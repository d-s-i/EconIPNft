{
  "address": "0x71fa87A49a1333DD47E8feB3Aa978a74DfDac790",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_booksPerOrder",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bookPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_econNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bookPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "booksPerOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfBooks",
          "type": "uint256"
        }
      ],
      "name": "buyBooks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "econNFT",
      "outputs": [
        {
          "internalType": "contract EconNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numberOfBooksBought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBookPrice",
          "type": "uint256"
        }
      ],
      "name": "setBookPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBooksPerOrder",
          "type": "uint256"
        }
      ],
      "name": "setBooksPerOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfBooksSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x74e88fd8f94c0da70b2cbe527b944216e49e22cf24282e2725baf6d4acd80d85",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x71fa87A49a1333DD47E8feB3Aa978a74DfDac790",
    "transactionIndex": 1,
    "gasUsed": "897933",
    "logsBloom": "0x
    "blockHash": "0x5e673e05d23cdeb64286fb27b3cd3ead8f7782b49a4883a4dc27fb1486c73d7a",
    "transactionHash": "0x74e88fd8f94c0da70b2cbe527b944216e49e22cf24282e2725baf6d4acd80d85",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 21751485,
        "transactionHash": "0x74e88fd8f94c0da70b2cbe527b944216e49e22cf24282e2725baf6d4acd80d85",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004428161dbd37d935c64894525f91039e1a6e4a1e",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b2a541d3d67000000000000000000000000000000000000000000000000008a25a5e0082132000000000000000000000000000000000000000000000001588e2d5870d32e3ab10000000000000000000000000000000000000000000000008a1a7b8beae3cb000000000000000000000000000000000000000000000001588e3882c4f06ba1b1",
        "logIndex": 2,
        "blockHash": "0x5e673e05d23cdeb64286fb27b3cd3ead8f7782b49a4883a4dc27fb1486c73d7a"
      }
    ],
    "blockNumber": 21751485,
    "cumulativeGasUsed": "1074834",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "20",
    "70000000",
    "0x7E8435c76a59fb12c3997bC46bD124F4aBb1C09a",
    "0xeb8f08a975ab53e34d8a0330e0d34de942c95926"
  ],
  "solcInputHash": "2bb33abcdae9a386285208c8c7b2b417",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_booksPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bookPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_econNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bookPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booksPerOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBooks\",\"type\":\"uint256\"}],\"name\":\"buyBooks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"econNFT\",\"outputs\":[{\"internalType\":\"contract EconNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfBooksBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBookPrice\",\"type\":\"uint256\"}],\"name\":\"setBookPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBooksPerOrder\",\"type\":\"uint256\"}],\"name\":\"setBooksPerOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfBooksSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyBooks(uint256)\":{\"details\":\"Payements are handled in USDC.\"},\"constructor\":{\"params\":{\"_bookPrice\":\"the number of USDC required to buy one book (/!\\\\ USDC have 6 decimals).\",\"_booksPerOrder\":\"the number of books you want per order (orders will need to be a multiple of this number).\",\"_econNFTAddress\":\"address of the EconNFT token contract.\",\"_usdcAddress\":\"address of the USDC token contract.*\"}},\"setBookPrice(uint256)\":{\"details\":\"Can only be called by the owner of the contract.\"},\"setBooksPerOrder(uint256)\":{\"details\":\"Can only be called by the owner of the contract.\"},\"setOwner(address)\":{\"details\":\"Can only be called by the current owner of the contract.\"}},\"title\":\"Accounting contract for Economics Design.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyBooks(uint256)\":{\"notice\":\"Function called by the owner of an EconNFT contract to order books to the company.\"},\"setBookPrice(uint256)\":{\"notice\":\"Set the price of one book.\"},\"setBooksPerOrder(uint256)\":{\"notice\":\"Set the number of books per order.\"},\"setOwner(address)\":{\"notice\":\"Set the owner of the contract.\"}},\"notice\":\"Helps the company to know who bought how much books and when.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Accounting.sol\":\"Accounting\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"lol\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc96f3be7ca66673270654781fede8a154706ecfdec6bf6b75f40393f74c824d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Accounting.sol\":{\"content\":\"//SPDLicensIdentifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"./EconNFT.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Accounting contract for Economics Design.\\r\\n/// @notice Helps the company to know who bought how much books and when.\\r\\ncontract Accounting {\\r\\n\\r\\n    // owner of the contract.\\r\\n    address public owner;\\r\\n\\r\\n    uint256 public totalNumberOfBooksSold;\\r\\n    // Orders must be more than one per order.\\r\\n    uint256 public booksPerOrder;\\r\\n    // The price of one book.\\r\\n    uint256 public bookPrice;\\r\\n\\r\\n    // Accounting of number of books bought per address.\\r\\n    mapping(address => uint256) public numberOfBooksBought;\\r\\n\\r\\n    // The EconNFT contract.\\r\\n    EconNFT public econNFT;\\r\\n    // The USDC contract.\\r\\n    IERC20 public usdc;\\r\\n\\r\\n    /**\\r\\n        * @param _booksPerOrder the number of books you want per order (orders will need to be a multiple of this number).\\r\\n        * @param _bookPrice the number of USDC required to buy one book (/!\\\\ USDC have 6 decimals).\\r\\n        * @param _econNFTAddress address of the EconNFT token contract.\\r\\n        * @param _usdcAddress address of the USDC token contract.\\r\\n    **/ \\r\\n    constructor(uint256 _booksPerOrder, uint256 _bookPrice, address _econNFTAddress, address _usdcAddress) public {\\r\\n        booksPerOrder = _booksPerOrder;\\r\\n        bookPrice = _bookPrice;\\r\\n        econNFT = EconNFT(_econNFTAddress);\\r\\n        usdc = IERC20(_usdcAddress);\\r\\n        // change this into Economics DEsign address\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict the function to the owner of the contract and revert otherwise.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"You are not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Function called by the owner of an EconNFT contract to order books to the company.\\r\\n    /// @dev Payements are handled in USDC.\\r\\n    function buyBooks(uint256 _numberOfBooks) external {\\r\\n        require(econNFT.balanceOf(msg.sender) > 0, \\\"You need to hold the property right token to buy and sell those books.\\\");\\r\\n        require(_numberOfBooks % booksPerOrder == 0, \\\"You can only buy a multiple of 20 books.\\\");\\r\\n\\r\\n        usdc.transferFrom(msg.sender, owner, _numberOfBooks * bookPrice);\\r\\n\\r\\n        numberOfBooksBought[msg.sender] += _numberOfBooks;\\r\\n        totalNumberOfBooksSold += _numberOfBooks;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the number of books per order.\\r\\n    /// @dev Can only be called by the owner of the contract.\\r\\n    function setBooksPerOrder(uint256 _newBooksPerOrder) external onlyOwner {\\r\\n        booksPerOrder = _newBooksPerOrder;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the price of one book.\\r\\n    /// @dev Can only be called by the owner of the contract.\\r\\n    function setBookPrice(uint256 _newBookPrice) external onlyOwner {\\r\\n        bookPrice = _newBookPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the owner of the contract.\\r\\n    /// @dev Can only be called by the current owner of the contract.\\r\\n    function setOwner(address _newOwner) external onlyOwner {\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3b0e95d667cca04c42fcd3003fb154256dd5fcf98fd39e550f44fb23f71206eb\"},\"contracts/EconNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/// @title Economics Design Property Right NFT.\\r\\n/// @notice Contract used to verify the ownership of the Economics Design book property rights.\\r\\ncontract EconNFT is ERC721, Ownable {\\r\\n\\r\\n    // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \\r\\n    struct Seed {\\r\\n        uint256 expirationTimestamp;\\r\\n    }\\r\\n\\r\\n    // Minter of the EconNFT. \\r\\n    address public minter;  \\r\\n\\r\\n    // Id currently auctionned.\\r\\n    uint256 private _currentEconNFTId;\\r\\n\\r\\n    bool public isMinterLocked;\\r\\n\\r\\n    // Contain information about the NFT that are set when its first minted.\\r\\n    mapping(uint256 => Seed) public seeds;\\r\\n\\r\\n    // Expiration timestamp currently associated with each EconNFT.\\r\\n    uint256 public currentExpirationTimestamp;\\r\\n\\r\\n    // Constant used to translate a timestamp into a date for tokenURI().\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    // Variables used to make the JPEG image.\\r\\n    uint256 public maxNumberOfPath;\\r\\n    uint256 public maxNumberOfPathCommands;\\r\\n    uint256 public size;\\r\\n    string[] public pathCommands;\\r\\n    string[] public colors;\\r\\n\\r\\n    /// @param _totalSupply maximum number of NFT that is going to be minted.\\r\\n    /// @param _expirationTimestamp the date where the EconNFT will expire (timestamp in seconds).\\r\\n    /// @dev Variables used to make the JPEG are set in order to construct an SVG later on. \\r\\n    constructor(uint256 _totalSupply, uint256 _expirationTimestamp) ERC721(\\\"Econteric IP\\\", \\\"ECIP\\\") Ownable() public {\\r\\n        isMinterLocked = false;\\r\\n        _currentEconNFTId = 0;\\r\\n        currentExpirationTimestamp = _expirationTimestamp;\\r\\n\\r\\n        maxNumberOfPath = 10;\\r\\n        maxNumberOfPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n        colors = [\\\"red\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"black\\\", \\\"white\\\"];\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict a function only when minter is not locked (i.e. isMinterLocked == false).\\r\\n    modifier whenMinterNotLocked() {\\r\\n        require(!isMinterLocked, \\\"Minter is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict a function to be called only by the minter address.\\r\\n    modifier onlyMinter() {\\r\\n        require(msg.sender == minter, \\\"Sender is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a new NFT.\\r\\n    /// @return Return the id of the minted NFT.\\r\\n    /// @dev Create a new NFT and send it to the minter.\\r\\n    function mint() public onlyMinter returns (uint256) {\\r\\n        return _mintTo(minter, _currentEconNFTId++);\\r\\n    }\\r\\n\\r\\n    /// @notice Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0).\\r\\n    /// @param econNFTId the id of the NFT you want to burn.\\r\\n    function burn(uint256 econNFTId) public onlyMinter {\\r\\n        _burn(econNFTId);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint an property right NFT.\\r\\n    /// @param to the address to send to the minted NFT.\\r\\n    /// @param econNFTId the id of the NFT to mint.\\r\\n    function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\\r\\n        seeds[econNFTId] = Seed({\\r\\n            expirationTimestamp: currentExpirationTimestamp\\r\\n        });\\r\\n        _mint(to, econNFTId);\\r\\n\\r\\n        return econNFTId;\\r\\n    }\\r\\n\\r\\n    /// @notice Contain all the informations needed for read this NFT informations.\\r\\n    /// @param tokenId the id of the token you would like to read information from.\\r\\n    /// @return data a 64 based encoded string containing a json object with all the informations.\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        uint256 year;\\r\\n        uint256 month;\\r\\n        uint256 day;\\r\\n        (year, month, day) = timestampToDate(seeds[tokenId].expirationTimestamp); \\r\\n        uint256 randomNumber = block.timestamp / block.number;\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        string memory json = Base64.encode(bytes(abi.encodePacked(\\r\\n            '{ \\\"name\\\": \\\"Economics Design Book\\\", ', \\r\\n            '\\\"description\\\": \\\"Economics and Math of Token Engineering and DeFi\\\"', \\r\\n            ', \\\"expirationDate\\\": \\\"',\\r\\n            uint2str(day),\\r\\n            '/',\\r\\n            uint2str(month),\\r\\n            '/',\\r\\n            uint2str(year),\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            imageURI,\\r\\n            '\\\" }'\\r\\n        )));\\r\\n\\r\\n        string memory data = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /// @notice Transform a uint type into a string type. Used to encode tokenURI().\\r\\n    /// @param _i the uint to encode into string.\\r\\n    /// @return _uintAsString the same number but in a string format.\\r\\n    /// @dev Function taken from https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    /// @notice Takes a timestamp in seconds and convert it into a human readable date.\\r\\n    /// @param timestamp the timestamp you want to convert.\\r\\n    /// @return year the year from your timestamp.\\r\\n    /// @return month the month from your timestamp (between 1 and 12).\\r\\n    /// @return day the day from your timestamp (between 1 and 31).\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate year/month/day from the number of days _days since 1970/01/01.\\r\\n    /// @param _days the number of day between the timestamp you can to convert into a date and 01/01/1970.\\r\\n    /// @return year the year from your timestamp.\\r\\n    /// @return month the month from your timestamp (between 1 and 12).\\r\\n    /// @return day the day from your timestamp (between 1 and 31).\\r\\n    /// @dev Function taken from https://etherscan.io/address/0x78f96b2d5f717fa9ad416957b79d825cc4cce69d#code.\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    /// @notice Generate a full SVG component.\\r\\n    /// @param _randomNumber is a random number used to construct the SVG (the more random the better).\\r\\n    /// @return finalSvg the full SVG component readable by a browser.\\r\\n    /// @dev The random number is used to print random lines and random colors on the final SVG.\\r\\n    function generateSVG(uint256 _randomNumber) public view returns(string memory finalSvg) {\\r\\n        uint256 numberOfPath = (_randomNumber % maxNumberOfPath) + 1;\\r\\n        finalSvg = string(abi.encodePacked('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"', uint2str(size), '\\\" width=\\\"', uint2str(size), '\\\">'));\\r\\n        for(uint i = 0; i < numberOfPath; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSvg = generatePath(newRNG);\\r\\n            finalSvg = string(abi.encodePacked(finalSvg, pathSvg));\\r\\n        }\\r\\n        finalSvg = string(abi.encodePacked(finalSvg, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Generate different paths that creates the SVG lines.\\r\\n    /// @param _randomNumber is a random number from the `generatePath()` function.\\r\\n    /// @return pathSvg a string containing all SVG instructions.\\r\\n    /// @dev Function called by the `generateSVG()` function.\\r\\n    function generatePath(uint256 _randomNumber) public view returns(string memory pathSvg) {\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxNumberOfPathCommands) + 1;\\r\\n        pathSvg = '<path d=\\\"';\\r\\n        for(uint i = 0; i < numberOfPathCommands; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\\r\\n            string memory pathCommand = generatePathCommand(newRNG);\\r\\n            pathSvg = string(abi.encodePacked(pathSvg, pathCommand));\\r\\n        }\\r\\n        string memory color = colors[_randomNumber % colors.length];\\r\\n        pathSvg = string(abi.encodePacked(pathSvg, '\\\" fill=\\\"transparent\\\" stroke=\\\"', color, '\\\"/>'));\\r\\n    }\\r\\n\\r\\n    /// @notice Generate the paths to create the SVG.\\r\\n    /// @param _randomNumber is a random number from the `generatePath()` function.\\r\\n    /// @return pathCommand a string containing the paths to create the SVG.\\r\\n    /// @dev Called by the `generatePath()` function.\\r\\n    function generatePathCommand(uint256 _randomNumber) public view returns(string memory pathCommand) {\\r\\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\\r\\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 2 + 1))) % size;\\r\\n        pathCommand = string(abi.encodePacked(pathCommand, \\\" \\\", uint2str(parameterOne), \\\" \\\", uint2str(parameterTwo), \\\" \\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Takes a SVG and encode it while still keeping it readable by a browser.\\r\\n    /// @param _svg is the SVG component.\\r\\n    /// @return imageURI a string readable by the browser which will display the SVG.\\r\\n    function svgToImageURI(string memory _svg) public pure returns(string memory) {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(_svg))));\\r\\n        string memory imageURI = string(abi.encodePacked(baseURL, svgBase64Encoded));\\r\\n        return imageURI;\\r\\n    }\\r\\n\\r\\n    /// @notice Change the minter address.\\r\\n    /// @param _minter The new minter address.\\r\\n    function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\\r\\n        minter = _minter;\\r\\n    }\\r\\n\\r\\n    /// @notice Lock the minter from calling certain functions.\\r\\n    function lockMinter() external onlyOwner whenMinterNotLocked {\\r\\n        isMinterLocked = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Change the expiration timestamp of the future NFTs about to get minted.\\r\\n    /// @param _newExpirationTimestamp the new timestamp.\\r\\n    function setCurrentExpirationTimestamp(uint256 _newExpirationTimestamp) external onlyOwner {\\r\\n        currentExpirationTimestamp = _newExpirationTimestamp;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// /// @title The Nouns ERC-721 token\\r\\n\\r\\n// pragma solidity ^0.8.6;\\r\\n\\r\\n// import { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import { ERC721Checkpointable } from \\\"./base/ERC721Checkpointable.sol\\\";\\r\\n// import { ERC721 } from \\\"./base/ERC721.sol\\\";\\r\\n// import { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n// contract EconNFT is IERC721, Ownable, ERC721Checkpointable {\\r\\n\\r\\n//     // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \\r\\n//     struct Seed {\\r\\n//         uint256 expirationTimestamp;\\r\\n//     }\\r\\n\\r\\n//     event NounCreated(uint256 indexed tokenId, Seed seed);\\r\\n\\r\\n//     event NounBurned(uint256 indexed tokenId);\\r\\n\\r\\n//     event MinterUpdated(address minter);\\r\\n\\r\\n//     event MinterLocked();\\r\\n\\r\\n//     // An address who has permissions to mint Nouns\\r\\n//     address public minter;\\r\\n\\r\\n//     // Whether the minter can be updated\\r\\n//     bool public isMinterLocked;\\r\\n\\r\\n//     // The noun seeds\\r\\n//     mapping(uint256 => Seed) public seeds;\\r\\n\\r\\n//     // The internal noun ID tracker\\r\\n//     uint256 private _currentEconNFTId;\\r\\n\\r\\n//     // Expiration timestamp currently associated with each EconNFT.\\r\\n//     uint256 public currentExpirationTimestamp;\\r\\n\\r\\n//     // Constant used to translate a timestamp into a date for tokenURI().\\r\\n//     uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n//     // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\\r\\n//     int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n//     /**\\r\\n//      * @notice Require that the minter has not been locked.\\r\\n//      */\\r\\n//     modifier whenMinterNotLocked() {\\r\\n//         require(!isMinterLocked, \\\"Minter is locked\\\");\\r\\n//         _;\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Require that the sender is the minter.\\r\\n//      */\\r\\n//     modifier onlyMinter() {\\r\\n//         require(msg.sender == minter, \\\"Sender is not the minter\\\");\\r\\n//         _;\\r\\n//     }\\r\\n\\r\\n//     constructor(\\r\\n//         uint256 _expirationTimestamp\\r\\n//     ) ERC721(\\\"Econ NFT Property Rights\\\", \\\"EconNFT\\\") Ownable() {\\r\\n//         currentExpirationTimestamp = _expirationTimestamp;\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Mint a Noun to the minter, along with a possible nounders reward\\r\\n//      * Noun. Nounders reward Nouns are minted every 10 Nouns, starting at 0,\\r\\n//      * until 183 nounder Nouns have been minted (5 years w/ 24 hour auctions).\\r\\n//      * @dev Call _mintTo with the to address(es).\\r\\n//      */\\r\\n//     function mint() public onlyMinter returns (uint256) {\\r\\n//         return _mintTo(minter, _currentEconNFTId++);\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Burn a noun.\\r\\n//      */\\r\\n//     function burn(uint256 econNFTId) public onlyMinter {\\r\\n//         _burn(econNFTId);\\r\\n//         emit NounBurned(econNFTId);\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n//      * @dev See {IERC721Metadata-tokenURI}.\\r\\n//      */\\r\\n//     function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n//         require(_exists(tokenId), \\\"NounsToken: URI query for nonexistent token\\\");\\r\\n//         return \\\"work\\\";\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Set the token minter.\\r\\n//      * @dev Only callable by the owner when not locked.\\r\\n//      */\\r\\n//     function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\\r\\n//         minter = _minter;\\r\\n\\r\\n//         emit MinterUpdated(_minter);\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Lock the minter.\\r\\n//      * @dev This cannot be reversed and is only callable by the owner when not locked.\\r\\n//      */\\r\\n//     function lockMinter() external onlyOwner whenMinterNotLocked {\\r\\n//         isMinterLocked = true;\\r\\n\\r\\n//         emit MinterLocked();\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Mint a Noun with `nounId` to the provided `to` address.\\r\\n//      */\\r\\n//     function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\\r\\n//         Seed memory seed = seeds[econNFTId] = Seed({ expirationTimestamp: currentExpirationTimestamp });\\r\\n\\r\\n//         _mint(owner(), to, econNFTId);\\r\\n//         emit NounCreated(econNFTId, seed);\\r\\n\\r\\n//         return econNFTId;\\r\\n//     }\\r\\n// }\\r\\n\",\"keccak256\":\"0xb6c3f8c71c2f84d2719a39c985b268cb22b63a639e76d79140ec207734d835ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f6038038062000f6083398181016040528101906200003791906200013f565b836002819055508260038190555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000228565b6000815190506200012281620001f4565b92915050565b60008151905062000139816200020e565b92915050565b600080600080608085870312156200015c576200015b620001ef565b5b60006200016c8782880162000128565b94505060206200017f8782880162000128565b9350506040620001928782880162000111565b9250506060620001a58782880162000111565b91505092959194509250565b6000620001be82620001c5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b620001ff81620001b1565b81146200020b57600080fd5b50565b6200021981620001e5565b81146200022557600080fd5b50565b610d2880620002386000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636e9164f4116100715780636e9164f414610150578063763893901461016e5780638da5cb5b1461018c578063b938c286146101aa578063c3037652146101c8578063d1524eec146101e6576100a9565b806313af4035146100ae578063157e8f34146100ca5780633cff3cdd146100e65780633e413bee14610116578063647b92e214610134575b600080fd5b6100c860048036038101906100c3919061077f565b610202565b005b6100e460048036038101906100df91906107d9565b6102d3565b005b61010060048036038101906100fb919061077f565b61036b565b60405161010d91906109c0565b60405180910390f35b61011e610383565b60405161012b9190610945565b60405180910390f35b61014e600480360381019061014991906107d9565b6103a9565b005b610158610637565b60405161016591906109c0565b60405180910390f35b61017661063d565b604051610183919061092a565b60405180910390f35b610194610663565b6040516101a191906108d8565b60405180910390f35b6101b2610687565b6040516101bf91906109c0565b60405180910390f35b6101d061068d565b6040516101dd91906109c0565b60405180910390f35b61020060048036038101906101fb91906107d9565b610693565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610287906109a0565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610358906109a0565b60405180910390fd5b8060038190555050565b60046020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161040691906108d8565b60206040518083038186803b15801561041e57600080fd5b505afa158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190610806565b11610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048d90610960565b60405180910390fd5b6000600254826104a69190610b2c565b146104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90610980565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354856105549190610a42565b6040518463ffffffff1660e01b8152600401610572939291906108f3565b602060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c491906107ac565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461061491906109ec565b92505081905550806001600082825461062d91906109ec565b9250508190555050565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610718906109a0565b60405180910390fd5b8060028190555050565b60008135905061073a81610cad565b92915050565b60008151905061074f81610cc4565b92915050565b60008135905061076481610cdb565b92915050565b60008151905061077981610cdb565b92915050565b60006020828403121561079557610794610bbb565b5b60006107a38482850161072b565b91505092915050565b6000602082840312156107c2576107c1610bbb565b5b60006107d084828501610740565b91505092915050565b6000602082840312156107ef576107ee610bbb565b5b60006107fd84828501610755565b91505092915050565b60006020828403121561081c5761081b610bbb565b5b600061082a8482850161076a565b91505092915050565b61083c81610a9c565b82525050565b61084b81610ae4565b82525050565b61085a81610b08565b82525050565b600061086d6046836109db565b915061087882610bc0565b606082019050919050565b60006108906028836109db565b915061089b82610c35565b604082019050919050565b60006108b36015836109db565b91506108be82610c84565b602082019050919050565b6108d281610ada565b82525050565b60006020820190506108ed6000830184610833565b92915050565b60006060820190506109086000830186610833565b6109156020830185610833565b61092260408301846108c9565b949350505050565b600060208201905061093f6000830184610842565b92915050565b600060208201905061095a6000830184610851565b92915050565b6000602082019050818103600083015261097981610860565b9050919050565b6000602082019050818103600083015261099981610883565b9050919050565b600060208201905081810360008301526109b9816108a6565b9050919050565b60006020820190506109d560008301846108c9565b92915050565b600082825260208201905092915050565b60006109f782610ada565b9150610a0283610ada565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3757610a36610b5d565b5b828201905092915050565b6000610a4d82610ada565b9150610a5883610ada565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9157610a90610b5d565b5b828202905092915050565b6000610aa782610aba565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610aef82610af6565b9050919050565b6000610b0182610aba565b9050919050565b6000610b1382610b1a565b9050919050565b6000610b2582610aba565b9050919050565b6000610b3782610ada565b9150610b4283610ada565b925082610b5257610b51610b8c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f596f75206e65656420746f20686f6c64207468652070726f706572747920726960008201527f67687420746f6b656e20746f2062757920616e642073656c6c2074686f73652060208201527f626f6f6b732e0000000000000000000000000000000000000000000000000000604082015250565b7f596f752063616e206f6e6c79206275792061206d756c7469706c65206f66203260008201527f3020626f6f6b732e000000000000000000000000000000000000000000000000602082015250565b7f596f7520617265206e6f7420746865206f776e65720000000000000000000000600082015250565b610cb681610a9c565b8114610cc157600080fd5b50565b610ccd81610aae565b8114610cd857600080fd5b50565b610ce481610ada565b8114610cef57600080fd5b5056fea264697066735822122020fdfe9ea24bf73eaad3ddf67bc1fc1d7ac188ea11333f1e52cf56da58230ae164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636e9164f4116100715780636e9164f414610150578063763893901461016e5780638da5cb5b1461018c578063b938c286146101aa578063c3037652146101c8578063d1524eec146101e6576100a9565b806313af4035146100ae578063157e8f34146100ca5780633cff3cdd146100e65780633e413bee14610116578063647b92e214610134575b600080fd5b6100c860048036038101906100c3919061077f565b610202565b005b6100e460048036038101906100df91906107d9565b6102d3565b005b61010060048036038101906100fb919061077f565b61036b565b60405161010d91906109c0565b60405180910390f35b61011e610383565b60405161012b9190610945565b60405180910390f35b61014e600480360381019061014991906107d9565b6103a9565b005b610158610637565b60405161016591906109c0565b60405180910390f35b61017661063d565b604051610183919061092a565b60405180910390f35b610194610663565b6040516101a191906108d8565b60405180910390f35b6101b2610687565b6040516101bf91906109c0565b60405180910390f35b6101d061068d565b6040516101dd91906109c0565b60405180910390f35b61020060048036038101906101fb91906107d9565b610693565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610287906109a0565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610358906109a0565b60405180910390fd5b8060038190555050565b60046020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161040691906108d8565b60206040518083038186803b15801561041e57600080fd5b505afa158015610432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104569190610806565b11610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048d90610960565b60405180910390fd5b6000600254826104a69190610b2c565b146104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90610980565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354856105549190610a42565b6040518463ffffffff1660e01b8152600401610572939291906108f3565b602060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c491906107ac565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461061491906109ec565b92505081905550806001600082825461062d91906109ec565b9250508190555050565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60025481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610718906109a0565b60405180910390fd5b8060028190555050565b60008135905061073a81610cad565b92915050565b60008151905061074f81610cc4565b92915050565b60008135905061076481610cdb565b92915050565b60008151905061077981610cdb565b92915050565b60006020828403121561079557610794610bbb565b5b60006107a38482850161072b565b91505092915050565b6000602082840312156107c2576107c1610bbb565b5b60006107d084828501610740565b91505092915050565b6000602082840312156107ef576107ee610bbb565b5b60006107fd84828501610755565b91505092915050565b60006020828403121561081c5761081b610bbb565b5b600061082a8482850161076a565b91505092915050565b61083c81610a9c565b82525050565b61084b81610ae4565b82525050565b61085a81610b08565b82525050565b600061086d6046836109db565b915061087882610bc0565b606082019050919050565b60006108906028836109db565b915061089b82610c35565b604082019050919050565b60006108b36015836109db565b91506108be82610c84565b602082019050919050565b6108d281610ada565b82525050565b60006020820190506108ed6000830184610833565b92915050565b60006060820190506109086000830186610833565b6109156020830185610833565b61092260408301846108c9565b949350505050565b600060208201905061093f6000830184610842565b92915050565b600060208201905061095a6000830184610851565b92915050565b6000602082019050818103600083015261097981610860565b9050919050565b6000602082019050818103600083015261099981610883565b9050919050565b600060208201905081810360008301526109b9816108a6565b9050919050565b60006020820190506109d560008301846108c9565b92915050565b600082825260208201905092915050565b60006109f782610ada565b9150610a0283610ada565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3757610a36610b5d565b5b828201905092915050565b6000610a4d82610ada565b9150610a5883610ada565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9157610a90610b5d565b5b828202905092915050565b6000610aa782610aba565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610aef82610af6565b9050919050565b6000610b0182610aba565b9050919050565b6000610b1382610b1a565b9050919050565b6000610b2582610aba565b9050919050565b6000610b3782610ada565b9150610b4283610ada565b925082610b5257610b51610b8c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f596f75206e65656420746f20686f6c64207468652070726f706572747920726960008201527f67687420746f6b656e20746f2062757920616e642073656c6c2074686f73652060208201527f626f6f6b732e0000000000000000000000000000000000000000000000000000604082015250565b7f596f752063616e206f6e6c79206275792061206d756c7469706c65206f66203260008201527f3020626f6f6b732e000000000000000000000000000000000000000000000000602082015250565b7f596f7520617265206e6f7420746865206f776e65720000000000000000000000600082015250565b610cb681610a9c565b8114610cc157600080fd5b50565b610ccd81610aae565b8114610cd857600080fd5b50565b610ce481610ada565b8114610cef57600080fd5b5056fea264697066735822122020fdfe9ea24bf73eaad3ddf67bc1fc1d7ac188ea11333f1e52cf56da58230ae164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyBooks(uint256)": {
        "details": "Payements are handled in USDC."
      },
      "constructor": {
        "params": {
          "_bookPrice": "the number of USDC required to buy one book (/!\\ USDC have 6 decimals).",
          "_booksPerOrder": "the number of books you want per order (orders will need to be a multiple of this number).",
          "_econNFTAddress": "address of the EconNFT token contract.",
          "_usdcAddress": "address of the USDC token contract.*"
        }
      },
      "setBookPrice(uint256)": {
        "details": "Can only be called by the owner of the contract."
      },
      "setBooksPerOrder(uint256)": {
        "details": "Can only be called by the owner of the contract."
      },
      "setOwner(address)": {
        "details": "Can only be called by the current owner of the contract."
      }
    },
    "title": "Accounting contract for Economics Design.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyBooks(uint256)": {
        "notice": "Function called by the owner of an EconNFT contract to order books to the company."
      },
      "setBookPrice(uint256)": {
        "notice": "Set the price of one book."
      },
      "setBooksPerOrder(uint256)": {
        "notice": "Set the number of books per order."
      },
      "setOwner(address)": {
        "notice": "Set the owner of the contract."
      }
    },
    "notice": "Helps the company to know who bought how much books and when.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2250,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2252,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "totalNumberOfBooksSold",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2254,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "booksPerOrder",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2256,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "bookPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2260,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "numberOfBooksBought",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2263,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "econNFT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(EconNFT)4352"
      },
      {
        "astId": 2266,
        "contract": "contracts/Accounting.sol:Accounting",
        "label": "usdc",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)567"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(EconNFT)4352": {
        "encoding": "inplace",
        "label": "contract EconNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)567": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}