{
  "language": "Solidity",
  "sources": {
    "contracts/Accounting.sol": {
      "content": "//SPDLicensIdentifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./EconNFT.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @title Accounting contract for Economics Design.\r\n/// @notice Helps the company to know who bought how much books and when.\r\ncontract Accounting {\r\n\r\n    // owner of the contract.\r\n    address public owner;\r\n\r\n    uint256 public totalNumberOfBooksSold;\r\n    // Orders must be more than one per order.\r\n    uint256 public booksPerOrder;\r\n    // The price of one book.\r\n    uint256 public bookPrice;\r\n\r\n    // Accounting of number of books bought per address.\r\n    mapping(address => uint256) public numberOfBooksBought;\r\n\r\n    // The EconNFT contract.\r\n    EconNFT public econNFT;\r\n    // The USDC contract.\r\n    IERC20 public usdc;\r\n\r\n    /**\r\n        * @param _booksPerOrder the number of books you want per order (orders will need to be a multiple of this number).\r\n        * @param _bookPrice the number of USDC required to buy one book (/!\\ USDC have 6 decimals).\r\n        * @param _econNFTAddress address of the EconNFT token contract.\r\n        * @param _usdcAddress address of the USDC token contract.\r\n    **/ \r\n    constructor(uint256 _booksPerOrder, uint256 _bookPrice, address _econNFTAddress, address _usdcAddress) public {\r\n        booksPerOrder = _booksPerOrder;\r\n        bookPrice = _bookPrice;\r\n        econNFT = EconNFT(_econNFTAddress);\r\n        usdc = IERC20(_usdcAddress);\r\n        // change this into Economics DEsign address\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Restrict the function to the owner of the contract and revert otherwise.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Function called by the owner of an EconNFT contract to order books to the company.\r\n    /// @dev Payements are handled in USDC.\r\n    function buyBooks(uint256 _numberOfBooks) external {\r\n        require(econNFT.balanceOf(msg.sender) > 0, \"You need to hold the property right token to buy and sell those books.\");\r\n        require(_numberOfBooks % booksPerOrder == 0, \"You can only buy a multiple of 20 books.\");\r\n\r\n        usdc.transferFrom(msg.sender, owner, _numberOfBooks * bookPrice);\r\n\r\n        numberOfBooksBought[msg.sender] += _numberOfBooks;\r\n        totalNumberOfBooksSold += _numberOfBooks;\r\n    }\r\n\r\n    /// @notice Set the number of books per order.\r\n    /// @dev Can only be called by the owner of the contract.\r\n    function setBooksPerOrder(uint256 _newBooksPerOrder) external onlyOwner {\r\n        booksPerOrder = _newBooksPerOrder;\r\n    }\r\n\r\n    /// @notice Set the price of one book.\r\n    /// @dev Can only be called by the owner of the contract.\r\n    function setBookPrice(uint256 _newBookPrice) external onlyOwner {\r\n        bookPrice = _newBookPrice;\r\n    }\r\n\r\n    /// @notice Set the owner of the contract.\r\n    /// @dev Can only be called by the current owner of the contract.\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}"
    },
    "contracts/EconNFT.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"base64-sol/base64.sol\";\r\n\r\n/// @title Economics Design Property Right NFT.\r\n/// @notice Contract used to verify the ownership of the Economics Design book property rights.\r\ncontract EconNFT is ERC721, Ownable {\r\n\r\n    // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \r\n    struct Seed {\r\n        uint256 expirationTimestamp;\r\n    }\r\n\r\n    // Minter of the EconNFT. \r\n    address public minter;  \r\n\r\n    // Id currently auctionned.\r\n    uint256 private _currentEconNFTId;\r\n\r\n    bool public isMinterLocked;\r\n\r\n    // Contain information about the NFT that are set when its first minted.\r\n    mapping(uint256 => Seed) public seeds;\r\n\r\n    // Expiration timestamp currently associated with each EconNFT.\r\n    uint256 public currentExpirationTimestamp;\r\n\r\n    // Constant used to translate a timestamp into a date for tokenURI().\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\r\n    int constant OFFSET19700101 = 2440588;\r\n\r\n    // Variables used to make the JPEG image.\r\n    uint256 public maxNumberOfPath;\r\n    uint256 public maxNumberOfPathCommands;\r\n    uint256 public size;\r\n    string[] public pathCommands;\r\n    string[] public colors;\r\n\r\n    /// @param _totalSupply maximum number of NFT that is going to be minted.\r\n    /// @param _expirationTimestamp the date where the EconNFT will expire (timestamp in seconds).\r\n    /// @dev Variables used to make the JPEG are set in order to construct an SVG later on. \r\n    constructor(uint256 _totalSupply, uint256 _expirationTimestamp) ERC721(\"Econteric IP\", \"ECIP\") Ownable() public {\r\n        isMinterLocked = false;\r\n        _currentEconNFTId = 0;\r\n        currentExpirationTimestamp = _expirationTimestamp;\r\n\r\n        maxNumberOfPath = 10;\r\n        maxNumberOfPathCommands = 5;\r\n        size = 500;\r\n        pathCommands = [\"M\", \"L\"];\r\n        colors = [\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"white\"];\r\n    }\r\n\r\n    /// @notice Restrict a function only when minter is not locked (i.e. isMinterLocked == false).\r\n    modifier whenMinterNotLocked() {\r\n        require(!isMinterLocked, \"Minter is locked\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Restrict a function to be called only by the minter address.\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter, \"Sender is not the minter\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Mint a new NFT.\r\n    /// @return Return the id of the minted NFT.\r\n    /// @dev Create a new NFT and send it to the minter.\r\n    function mint() public onlyMinter returns (uint256) {\r\n        return _mintTo(minter, _currentEconNFTId++);\r\n    }\r\n\r\n    /// @notice Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0).\r\n    /// @param econNFTId the id of the NFT you want to burn.\r\n    function burn(uint256 econNFTId) public onlyMinter {\r\n        _burn(econNFTId);\r\n    }\r\n\r\n    /// @notice Mint an property right NFT.\r\n    /// @param to the address to send to the minted NFT.\r\n    /// @param econNFTId the id of the NFT to mint.\r\n    function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\r\n        seeds[econNFTId] = Seed({\r\n            expirationTimestamp: currentExpirationTimestamp\r\n        });\r\n        _mint(to, econNFTId);\r\n\r\n        return econNFTId;\r\n    }\r\n\r\n    /// @notice Contain all the informations needed for read this NFT informations.\r\n    /// @param tokenId the id of the token you would like to read information from.\r\n    /// @return data a 64 based encoded string containing a json object with all the informations.\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        uint256 year;\r\n        uint256 month;\r\n        uint256 day;\r\n        (year, month, day) = timestampToDate(seeds[tokenId].expirationTimestamp); \r\n        uint256 randomNumber = block.timestamp / block.number;\r\n        string memory svg = generateSVG(randomNumber);\r\n        string memory imageURI = svgToImageURI(svg);\r\n        string memory json = Base64.encode(bytes(abi.encodePacked(\r\n            '{ \"name\": \"Economics Design Book\", ', \r\n            '\"description\": \"Economics and Math of Token Engineering and DeFi\"', \r\n            ', \"expirationDate\": \"',\r\n            uint2str(day),\r\n            '/',\r\n            uint2str(month),\r\n            '/',\r\n            uint2str(year),\r\n            '\", \"image\": \"',\r\n            imageURI,\r\n            '\" }'\r\n        )));\r\n\r\n        string memory data = string(abi.encodePacked('data:application/json;base64,', json));\r\n        return data;\r\n    }\r\n\r\n    /// @notice Transform a uint type into a string type. Used to encode tokenURI().\r\n    /// @param _i the uint to encode into string.\r\n    /// @return _uintAsString the same number but in a string format.\r\n    /// @dev Function taken from https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    /// @notice Takes a timestamp in seconds and convert it into a human readable date.\r\n    /// @param timestamp the timestamp you want to convert.\r\n    /// @return year the year from your timestamp.\r\n    /// @return month the month from your timestamp (between 1 and 12).\r\n    /// @return day the day from your timestamp (between 1 and 31).\r\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    /// @notice Calculate year/month/day from the number of days _days since 1970/01/01.\r\n    /// @param _days the number of day between the timestamp you can to convert into a date and 01/01/1970.\r\n    /// @return year the year from your timestamp.\r\n    /// @return month the month from your timestamp (between 1 and 12).\r\n    /// @return day the day from your timestamp (between 1 and 31).\r\n    /// @dev Function taken from https://etherscan.io/address/0x78f96b2d5f717fa9ad416957b79d825cc4cce69d#code.\r\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n        int __days = int(_days);\r\n\r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n\r\n    /// @notice Generate a full SVG component.\r\n    /// @param _randomNumber is a random number used to construct the SVG (the more random the better).\r\n    /// @return finalSvg the full SVG component readable by a browser.\r\n    /// @dev The random number is used to print random lines and random colors on the final SVG.\r\n    function generateSVG(uint256 _randomNumber) public view returns(string memory finalSvg) {\r\n        uint256 numberOfPath = (_randomNumber % maxNumberOfPath) + 1;\r\n        finalSvg = string(abi.encodePacked('<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"', uint2str(size), '\" width=\"', uint2str(size), '\">'));\r\n        for(uint i = 0; i < numberOfPath; i++) {\r\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\r\n            string memory pathSvg = generatePath(newRNG);\r\n            finalSvg = string(abi.encodePacked(finalSvg, pathSvg));\r\n        }\r\n        finalSvg = string(abi.encodePacked(finalSvg, \"</svg>\"));\r\n    }\r\n\r\n    /// @notice Generate different paths that creates the SVG lines.\r\n    /// @param _randomNumber is a random number from the `generatePath()` function.\r\n    /// @return pathSvg a string containing all SVG instructions.\r\n    /// @dev Function called by the `generateSVG()` function.\r\n    function generatePath(uint256 _randomNumber) public view returns(string memory pathSvg) {\r\n        uint256 numberOfPathCommands = (_randomNumber % maxNumberOfPathCommands) + 1;\r\n        pathSvg = '<path d=\"';\r\n        for(uint i = 0; i < numberOfPathCommands; i++) {\r\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\r\n            string memory pathCommand = generatePathCommand(newRNG);\r\n            pathSvg = string(abi.encodePacked(pathSvg, pathCommand));\r\n        }\r\n        string memory color = colors[_randomNumber % colors.length];\r\n        pathSvg = string(abi.encodePacked(pathSvg, '\" fill=\"transparent\" stroke=\"', color, '\"/>'));\r\n    }\r\n\r\n    /// @notice Generate the paths to create the SVG.\r\n    /// @param _randomNumber is a random number from the `generatePath()` function.\r\n    /// @return pathCommand a string containing the paths to create the SVG.\r\n    /// @dev Called by the `generatePath()` function.\r\n    function generatePathCommand(uint256 _randomNumber) public view returns(string memory pathCommand) {\r\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\r\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\r\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 2 + 1))) % size;\r\n        pathCommand = string(abi.encodePacked(pathCommand, \" \", uint2str(parameterOne), \" \", uint2str(parameterTwo), \" \"));\r\n    }\r\n\r\n    /// @notice Takes a SVG and encode it while still keeping it readable by a browser.\r\n    /// @param _svg is the SVG component.\r\n    /// @return imageURI a string readable by the browser which will display the SVG.\r\n    function svgToImageURI(string memory _svg) public pure returns(string memory) {\r\n        string memory baseURL = \"data:image/svg+xml;base64,\";\r\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(_svg))));\r\n        string memory imageURI = string(abi.encodePacked(baseURL, svgBase64Encoded));\r\n        return imageURI;\r\n    }\r\n\r\n    /// @notice Change the minter address.\r\n    /// @param _minter The new minter address.\r\n    function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\r\n        minter = _minter;\r\n    }\r\n\r\n    /// @notice Lock the minter from calling certain functions.\r\n    function lockMinter() external onlyOwner whenMinterNotLocked {\r\n        isMinterLocked = true;\r\n    }\r\n\r\n    /// @notice Change the expiration timestamp of the future NFTs about to get minted.\r\n    /// @param _newExpirationTimestamp the new timestamp.\r\n    function setCurrentExpirationTimestamp(uint256 _newExpirationTimestamp) external onlyOwner {\r\n        currentExpirationTimestamp = _newExpirationTimestamp;\r\n    }\r\n}\r\n\r\n\r\n// /// @title The Nouns ERC-721 token\r\n\r\n// pragma solidity ^0.8.6;\r\n\r\n// import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import { ERC721Checkpointable } from \"./base/ERC721Checkpointable.sol\";\r\n// import { ERC721 } from \"./base/ERC721.sol\";\r\n// import { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n// contract EconNFT is IERC721, Ownable, ERC721Checkpointable {\r\n\r\n//     // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \r\n//     struct Seed {\r\n//         uint256 expirationTimestamp;\r\n//     }\r\n\r\n//     event NounCreated(uint256 indexed tokenId, Seed seed);\r\n\r\n//     event NounBurned(uint256 indexed tokenId);\r\n\r\n//     event MinterUpdated(address minter);\r\n\r\n//     event MinterLocked();\r\n\r\n//     // An address who has permissions to mint Nouns\r\n//     address public minter;\r\n\r\n//     // Whether the minter can be updated\r\n//     bool public isMinterLocked;\r\n\r\n//     // The noun seeds\r\n//     mapping(uint256 => Seed) public seeds;\r\n\r\n//     // The internal noun ID tracker\r\n//     uint256 private _currentEconNFTId;\r\n\r\n//     // Expiration timestamp currently associated with each EconNFT.\r\n//     uint256 public currentExpirationTimestamp;\r\n\r\n//     // Constant used to translate a timestamp into a date for tokenURI().\r\n//     uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n//     // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\r\n//     int constant OFFSET19700101 = 2440588;\r\n\r\n//     /**\r\n//      * @notice Require that the minter has not been locked.\r\n//      */\r\n//     modifier whenMinterNotLocked() {\r\n//         require(!isMinterLocked, \"Minter is locked\");\r\n//         _;\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Require that the sender is the minter.\r\n//      */\r\n//     modifier onlyMinter() {\r\n//         require(msg.sender == minter, \"Sender is not the minter\");\r\n//         _;\r\n//     }\r\n\r\n//     constructor(\r\n//         uint256 _expirationTimestamp\r\n//     ) ERC721(\"Econ NFT Property Rights\", \"EconNFT\") Ownable() {\r\n//         currentExpirationTimestamp = _expirationTimestamp;\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Mint a Noun to the minter, along with a possible nounders reward\r\n//      * Noun. Nounders reward Nouns are minted every 10 Nouns, starting at 0,\r\n//      * until 183 nounder Nouns have been minted (5 years w/ 24 hour auctions).\r\n//      * @dev Call _mintTo with the to address(es).\r\n//      */\r\n//     function mint() public onlyMinter returns (uint256) {\r\n//         return _mintTo(minter, _currentEconNFTId++);\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Burn a noun.\r\n//      */\r\n//     function burn(uint256 econNFTId) public onlyMinter {\r\n//         _burn(econNFTId);\r\n//         emit NounBurned(econNFTId);\r\n//     }\r\n\r\n//     /**\r\n//      * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n//      * @dev See {IERC721Metadata-tokenURI}.\r\n//      */\r\n//     function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n//         require(_exists(tokenId), \"NounsToken: URI query for nonexistent token\");\r\n//         return \"work\";\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Set the token minter.\r\n//      * @dev Only callable by the owner when not locked.\r\n//      */\r\n//     function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\r\n//         minter = _minter;\r\n\r\n//         emit MinterUpdated(_minter);\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Lock the minter.\r\n//      * @dev This cannot be reversed and is only callable by the owner when not locked.\r\n//      */\r\n//     function lockMinter() external onlyOwner whenMinterNotLocked {\r\n//         isMinterLocked = true;\r\n\r\n//         emit MinterLocked();\r\n//     }\r\n\r\n//     /**\r\n//      * @notice Mint a Noun with `nounId` to the provided `to` address.\r\n//      */\r\n//     function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\r\n//         Seed memory seed = seeds[econNFTId] = Seed({ expirationTimestamp: currentExpirationTimestamp });\r\n\r\n//         _mint(owner(), to, econNFTId);\r\n//         emit NounCreated(econNFTId, seed);\r\n\r\n//         return econNFTId;\r\n//     }\r\n// }\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"lol\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/USDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract USDC is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = 1000000 * 10**6;\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 6;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/interfaces/IEconNFT.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IEconNFT is IERC721 {\r\n    function mint() external returns (uint256);\r\n\r\n    function burn(uint256 econNFTId) external;\r\n}"
    },
    "contracts/EconAuctionHouseUSDC.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// LICENSE\r\n// econNFTAuctionHouse.sol is a modified version of Zora\"s AuctionHouse.sol:\r\n// https://github.com/ourzora/auction-house/blob/54a12ec1a6cf562e49f0a4917990474b11350a2d/contracts/AuctionHouse.sol\r\n//\r\n// AuctionHouse.sol source code Copyright Zora licensed under the GPL-3.0 license.\r\n// With modifications by Nounders DAO and then by Economics design.\r\n\r\npragma solidity ^0.8.6;\r\n\r\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { IEconAuctionHouseUSDC } from \"./interfaces/IEconAuctionHouseUSDC.sol\";\r\nimport { IEconNFT } from \"./interfaces/IEconNFT.sol\";\r\n\r\n/// @title - The EconNFT auction house.\r\n/// @notice - Auction one EconNFT a day until max supply is reached.\r\ncontract EconAuctionHouseUSDC is IEconAuctionHouseUSDC, PausableUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\r\n    \r\n    // The econNFT ERC721 token contract\r\n    IEconNFT public econNFT;\r\n\r\n    IERC20 public usdc;\r\n\r\n    // The minimum amount of time left in an auction after a new bid is created\r\n    uint256 public timeBuffer;\r\n\r\n    // The minimum price accepted in an auction\r\n    uint256 public reservePrice;\r\n\r\n    // The minimum percentage difference between the last bid amount and the current bid\r\n    uint8 public minBidIncrementPercentage;\r\n\r\n    // The duration of a single auction\r\n    uint256 public duration;\r\n\r\n    // The active auction contract\r\n    IEconAuctionHouseUSDC.Auction public auction;\r\n\r\n    /**\r\n        * @notice Initialize the auction house and base contracts,\r\n        * populate configuration values, and pause the contract.\r\n        * @dev This function can only be called once.\r\n     */\r\n    function initialize(\r\n        IEconNFT _econNFT,\r\n        IERC20 _usdc,\r\n        uint256 _timeBuffer,\r\n        uint256 _reservePrice,\r\n        uint8 _minBidIncrementPercentage,\r\n        uint256 _duration\r\n    ) external initializer {\r\n        __Pausable_init();\r\n        __ReentrancyGuard_init();\r\n        __Ownable_init();\r\n\r\n        _pause();\r\n\r\n        econNFT = _econNFT;\r\n        usdc = _usdc;\r\n        timeBuffer = _timeBuffer;\r\n        reservePrice = _reservePrice;\r\n        minBidIncrementPercentage = _minBidIncrementPercentage;\r\n        duration = _duration;\r\n    }\r\n\r\n    /**\r\n        * @notice Settle the current auction, mint a new Noun, and put it up for auction.\r\n     */\r\n    function settleCurrentAndCreateNewAuction() external override nonReentrant whenNotPaused {\r\n        _settleAuction();\r\n        _createAuction();\r\n    }\r\n\r\n    /**\r\n        * @notice Settle the current auction.\r\n        * @dev This function can only be called when the contract is paused.\r\n     */\r\n    function settleAuction() external override whenPaused nonReentrant {\r\n        _settleAuction();\r\n    }\r\n\r\n    /**\r\n        * @notice Create a bid for a Noun, with a given amount.\r\n        * @dev This contract only accepts payment in ETH.\r\n     */\r\n    function createBid(uint256 econNFTId, uint256 _usdcAmount) external override nonReentrant {\r\n        IEconAuctionHouseUSDC.Auction memory _auction = auction;\r\n\r\n        require(_auction.econNFTId == econNFTId, \"NFT not up for auction\");\r\n        require(block.timestamp < _auction.endTime, \"Auction expired\");\r\n        // require(msg.value >= reservePrice, \"Must send at least reservePrice\");\r\n        // require(\r\n        //     msg.value >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\r\n        //     \"Must send more than last bid by minBidIncrementPercentage amount\"\r\n        // );\r\n\r\n        require(_usdcAmount >= reservePrice, \"Must send at least reservePrice\");\r\n        require(\r\n            _usdcAmount >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\r\n            \"Must send more than last bid by minBidIncrementPercentage amount\"\r\n        );\r\n\r\n        address lastBidder = _auction.bidder;\r\n\r\n        // Refund the last bidder, if applicable.\r\n        if (lastBidder != address(0)) {\r\n            // _safeTransferETHWithFallback(lastBidder, _auction.amount);\r\n            usdc.transfer(lastBidder, _auction.amount);\r\n        }\r\n\r\n        usdc.transferFrom(msg.sender, address(this), _usdcAmount);\r\n\r\n        auction.amount = _usdcAmount;\r\n        auction.bidder = msg.sender;\r\n\r\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time.\r\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\r\n        if (extended) {\r\n            auction.endTime = _auction.endTime = block.timestamp + timeBuffer;\r\n        }\r\n\r\n        emit AuctionBid(_auction.econNFTId, msg.sender, _usdcAmount, extended);\r\n\r\n        if (extended) {\r\n            emit AuctionExtended(_auction.econNFTId, _auction.endTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Pause the econNFT auction house.\r\n        * @dev This function can only be called by the owner when the\r\n        * contract is unpaused. While no new auctions can be started when paused,\r\n        * anyone can settle an ongoing auction.\r\n     */\r\n    function pause() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n        * @notice Unpause the econNFT auction house.\r\n        * @dev This function can only be called by the owner when the\r\n        * contract is paused. If required, this function will start a new auction.\r\n     */\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n\r\n        if (auction.startTime == 0 || auction.settled) {\r\n            _createAuction();\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Set the auction time buffer.\r\n        * @dev Only callable by the owner.\r\n     */\r\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\r\n        timeBuffer = _timeBuffer;\r\n\r\n        emit AuctionTimeBufferUpdated(_timeBuffer);\r\n    }\r\n\r\n    /**\r\n        * @notice Set the auction reserve price.\r\n        * @dev Only callable by the owner.\r\n     */\r\n    function setReservePrice(uint256 _reservePrice) external override onlyOwner {\r\n        reservePrice = _reservePrice;\r\n\r\n        emit AuctionReservePriceUpdated(_reservePrice);\r\n    }\r\n\r\n    /**\r\n        * @notice Set the auction minimum bid increment percentage.\r\n        * @dev Only callable by the owner.\r\n     */\r\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external override onlyOwner {\r\n        minBidIncrementPercentage = _minBidIncrementPercentage;\r\n\r\n        emit AuctionMinBidIncrementPercentageUpdated(_minBidIncrementPercentage);\r\n    }\r\n\r\n    /**\r\n        * @notice Create an auction.\r\n        * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\r\n        * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\r\n        * catch the revert and pause this contract.\r\n     */\r\n    function _createAuction() internal {\r\n        try econNFT.mint() returns (uint256 econNFTId) {\r\n            uint256 startTime = block.timestamp;\r\n            uint256 endTime = startTime + duration;\r\n\r\n            auction = Auction({\r\n                econNFTId: econNFTId,\r\n                amount: 0,\r\n                startTime: startTime,\r\n                endTime: endTime,\r\n                bidder: payable(0),\r\n                settled: false\r\n            });\r\n\r\n            emit AuctionCreated(econNFTId, startTime, endTime);\r\n        } catch Error(string memory) {\r\n            _pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Settle an auction, finalizing the bid and paying out to the owner.\r\n        * @dev If there are no bids, the Noun is burned.\r\n     */\r\n    function _settleAuction() internal {\r\n        IEconAuctionHouseUSDC.Auction memory _auction = auction;\r\n\r\n        require(_auction.startTime != 0, \"Auction hasn't begun\");\r\n        require(!_auction.settled, \"Auction has already been settled\");\r\n        require(block.timestamp >= _auction.endTime, \"Auction hasn't completed\");\r\n\r\n        auction.settled = true;\r\n\r\n        if (_auction.bidder == address(0)) {\r\n            econNFT.burn(_auction.econNFTId);\r\n        } else {\r\n            econNFT.transferFrom(address(this), _auction.bidder, _auction.econNFTId);\r\n        }\r\n\r\n        if (_auction.amount > 0) {\r\n            // _safeTransferETHWithFallback(owner(), _auction.amount);\r\n            usdc.transfer(owner(), _auction.amount);\r\n        }\r\n\r\n        emit AuctionSettled(_auction.econNFTId, _auction.bidder, _auction.amount);\r\n    }\r\n\r\n    /**\r\n        * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\r\n     */\r\n    // function _safeTransferETHWithFallback(address to, uint256 amount) internal {\r\n    //     if (!_safeTransferETH(to, amount)) {\r\n    //         IWETH(weth).deposit{ value: amount }();\r\n    //         IERC20(weth).transfer(to, amount);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n        * @notice Transfer ETH and return the success status.\r\n        * @dev This function only forwards 30,000 gas to the callee.\r\n     */\r\n    // function _safeTransferETH(address to, uint256 value) internal returns (bool) {\r\n    //     (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\r\n    //     return success;\r\n    // }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IEconAuctionHouseUSDC.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n/// @title Interface for Econteric Auction Houses\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IEconAuctionHouseUSDC {\r\n    struct Auction {\r\n        // ID for the Noun (ERC721 token ID)\r\n        uint256 econNFTId;\r\n        // The current highest bid amount\r\n        uint256 amount;\r\n        // The time that the auction started\r\n        uint256 startTime;\r\n        // The time that the auction is scheduled to end\r\n        uint256 endTime;\r\n        // The address of the current highest bid\r\n        address bidder;\r\n        // Whether or not the auction has been settled\r\n        bool settled;\r\n    }\r\n\r\n    event AuctionCreated(uint256 indexed econNFTId, uint256 startTime, uint256 endTime);\r\n\r\n    event AuctionBid(uint256 indexed econNFTId, address sender, uint256 value, bool extended);\r\n\r\n    event AuctionExtended(uint256 indexed econNFTId, uint256 endTime);\r\n\r\n    event AuctionSettled(uint256 indexed econNFTId, address winner, uint256 amount);\r\n\r\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\r\n\r\n    event AuctionReservePriceUpdated(uint256 reservePrice);\r\n\r\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\r\n\r\n    function settleAuction() external;\r\n\r\n    function settleCurrentAndCreateNewAuction() external;\r\n\r\n    function createBid(uint256 econNFTId, uint256 _usdcAmount) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setTimeBuffer(uint256 timeBuffer) external;\r\n\r\n    function setReservePrice(uint256 reservePrice) external;\r\n\r\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/EconAuctionHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// LICENSE\r\n// econNFTAuctionHouse.sol is a modified version of Zora's AuctionHouse.sol:\r\n// https://github.com/ourzora/auction-house/blob/54a12ec1a6cf562e49f0a4917990474b11350a2d/contracts/AuctionHouse.sol\r\n//\r\n// AuctionHouse.sol source code Copyright Zora licensed under the GPL-3.0 license.\r\n// With modifications by Nounders DAO and then by Economics design.\r\n\r\npragma solidity ^0.8.6;\r\n\r\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\r\nimport { ReentrancyGuardUpgradeable } from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport { IEconAuctionHouse } from './interfaces/IEconAuctionHouse.sol';\r\nimport { IEconNFT } from './interfaces/IEconNFT.sol';\r\nimport { IWETH } from './interfaces/IWETH.sol';\r\n\r\n/// @title - The EconNFT auction house.\r\n/// @notice - Auction one EconNFT a day until max supply is reached.\r\ncontract EconAuctionHouse is IEconAuctionHouse, PausableUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\r\n    // The econNFT ERC721 token contract\r\n    IEconNFT public econNFT;\r\n\r\n    // The address of the WETH contract\r\n    address public weth;\r\n\r\n    // The minimum amount of time left in an auction after a new bid is created\r\n    uint256 public timeBuffer;\r\n\r\n    // The minimum price accepted in an auction\r\n    uint256 public reservePrice;\r\n\r\n    // The minimum percentage difference between the last bid amount and the current bid\r\n    uint8 public minBidIncrementPercentage;\r\n\r\n    // The duration of a single auction\r\n    uint256 public duration;\r\n\r\n    // The active auction contract\r\n    IEconAuctionHouse.Auction public auction;\r\n\r\n    /**\r\n        * @notice Initialize the auction house and base contracts,\r\n        * populate configuration values, and pause the contract.\r\n        * @dev This function can only be called once.\r\n     */\r\n    function initialize(\r\n        IEconNFT _econNFT,\r\n        address _weth,\r\n        uint256 _timeBuffer,\r\n        uint256 _reservePrice,\r\n        uint8 _minBidIncrementPercentage,\r\n        uint256 _duration\r\n    ) external initializer {\r\n        __Pausable_init();\r\n        __ReentrancyGuard_init();\r\n        __Ownable_init();\r\n\r\n        _pause();\r\n\r\n        econNFT = IEconNFT(_econNFT);\r\n        weth = _weth;\r\n        timeBuffer = _timeBuffer;\r\n        reservePrice = _reservePrice;\r\n        minBidIncrementPercentage = _minBidIncrementPercentage;\r\n        duration = _duration;\r\n    }\r\n\r\n    /**\r\n        * @notice Settle the current auction, mint a new Noun, and put it up for auction.\r\n     */\r\n    function settleCurrentAndCreateNewAuction() external override nonReentrant whenNotPaused {\r\n        _settleAuction();\r\n        _createAuction();\r\n    }\r\n\r\n    /**\r\n        * @notice Settle the current auction.\r\n        * @dev This function can only be called when the contract is paused.\r\n     */\r\n    function settleAuction() external override whenPaused nonReentrant {\r\n        _settleAuction();\r\n    }\r\n\r\n    /**\r\n        * @notice Create a bid for a Noun, with a given amount.\r\n        * @dev This contract only accepts payment in ETH.\r\n     */\r\n    function createBid(uint256 econNFTId) external payable override nonReentrant {\r\n        IEconAuctionHouse.Auction memory _auction = auction;\r\n\r\n        require(_auction.econNFTId == econNFTId, 'NFT not up for auction');\r\n        require(block.timestamp < _auction.endTime, 'Auction expired');\r\n        require(msg.value >= reservePrice, 'Must send at least reservePrice');\r\n        require(\r\n            msg.value >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\r\n            'Must send more than last bid by minBidIncrementPercentage amount'\r\n        );\r\n\r\n        address payable lastBidder = _auction.bidder;\r\n\r\n        // Refund the last bidder, if applicable.\r\n        if (lastBidder != address(0)) {\r\n            _safeTransferETHWithFallback(lastBidder, _auction.amount);\r\n        }\r\n\r\n        auction.amount = msg.value;\r\n        auction.bidder = payable(msg.sender);\r\n\r\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time.\r\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\r\n        if (extended) {\r\n            auction.endTime = _auction.endTime = block.timestamp + timeBuffer;\r\n        }\r\n\r\n        emit AuctionBid(_auction.econNFTId, msg.sender, msg.value, extended);\r\n\r\n        if (extended) {\r\n            emit AuctionExtended(_auction.econNFTId, _auction.endTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Pause the econNFT auction house.\r\n        * @dev This function can only be called by the owner when the\r\n        * contract is unpaused. While no new auctions can be started when paused,\r\n        * anyone can settle an ongoing auction.\r\n     */\r\n    function pause() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n        * @notice Unpause the econNFT auction house.\r\n        * @dev This function can only be called by the owner when the\r\n        * contract is paused. If required, this function will start a new auction.\r\n     */\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n\r\n        if (auction.startTime == 0 || auction.settled) {\r\n            _createAuction();\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Set the auction time buffer.\r\n        * @dev Only callable by the owner.\r\n     */\r\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\r\n        timeBuffer = _timeBuffer;\r\n\r\n        emit AuctionTimeBufferUpdated(_timeBuffer);\r\n    }\r\n\r\n    /**\r\n        * @notice Set the auction reserve price.\r\n        * @dev Only callable by the owner.\r\n     */\r\n    function setReservePrice(uint256 _reservePrice) external override onlyOwner {\r\n        reservePrice = _reservePrice;\r\n\r\n        emit AuctionReservePriceUpdated(_reservePrice);\r\n    }\r\n\r\n    /**\r\n        * @notice Set the auction minimum bid increment percentage.\r\n        * @dev Only callable by the owner.\r\n     */\r\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external override onlyOwner {\r\n        minBidIncrementPercentage = _minBidIncrementPercentage;\r\n\r\n        emit AuctionMinBidIncrementPercentageUpdated(_minBidIncrementPercentage);\r\n    }\r\n\r\n    /**\r\n        * @notice Create an auction.\r\n        * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\r\n        * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\r\n        * catch the revert and pause this contract.\r\n     */\r\n    function _createAuction() internal {\r\n        try econNFT.mint() returns (uint256 econNFTId) {\r\n            uint256 startTime = block.timestamp;\r\n            uint256 endTime = startTime + duration;\r\n\r\n            auction = Auction({\r\n                econNFTId: econNFTId,\r\n                amount: 0,\r\n                startTime: startTime,\r\n                endTime: endTime,\r\n                bidder: payable(0),\r\n                settled: false\r\n            });\r\n\r\n            emit AuctionCreated(econNFTId, startTime, endTime);\r\n        } catch Error(string memory) {\r\n            _pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Settle an auction, finalizing the bid and paying out to the owner.\r\n        * @dev If there are no bids, the Noun is burned.\r\n     */\r\n    function _settleAuction() internal {\r\n        IEconAuctionHouse.Auction memory _auction = auction;\r\n\r\n        require(_auction.startTime != 0, \"Auction hasn't begun\");\r\n        require(!_auction.settled, 'Auction has already been settled');\r\n        require(block.timestamp >= _auction.endTime, \"Auction hasn't completed\");\r\n\r\n        auction.settled = true;\r\n\r\n        if (_auction.bidder == address(0)) {\r\n            econNFT.burn(_auction.econNFTId);\r\n        } else {\r\n            econNFT.transferFrom(address(this), _auction.bidder, _auction.econNFTId);\r\n        }\r\n\r\n        if (_auction.amount > 0) {\r\n            _safeTransferETHWithFallback(owner(), _auction.amount);\r\n        }\r\n\r\n        emit AuctionSettled(_auction.econNFTId, _auction.bidder, _auction.amount);\r\n    }\r\n\r\n    /**\r\n        * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\r\n     */\r\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\r\n        if (!_safeTransferETH(to, amount)) {\r\n            IWETH(weth).deposit{ value: amount }();\r\n            IERC20(weth).transfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @notice Transfer ETH and return the success status.\r\n        * @dev This function only forwards 30,000 gas to the callee.\r\n     */\r\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\r\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\r\n        return success;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IEconAuctionHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n/// @title Interface for Econteric Auction Houses\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IEconAuctionHouse {\r\n    struct Auction {\r\n        // ID for the Noun (ERC721 token ID)\r\n        uint256 econNFTId;\r\n        // The current highest bid amount\r\n        uint256 amount;\r\n        // The time that the auction started\r\n        uint256 startTime;\r\n        // The time that the auction is scheduled to end\r\n        uint256 endTime;\r\n        // The address of the current highest bid\r\n        address payable bidder;\r\n        // Whether or not the auction has been settled\r\n        bool settled;\r\n    }\r\n\r\n    event AuctionCreated(uint256 indexed econNFTId, uint256 startTime, uint256 endTime);\r\n\r\n    event AuctionBid(uint256 indexed econNFTId, address sender, uint256 value, bool extended);\r\n\r\n    event AuctionExtended(uint256 indexed econNFTId, uint256 endTime);\r\n\r\n    event AuctionSettled(uint256 indexed econNFTId, address winner, uint256 amount);\r\n\r\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\r\n\r\n    event AuctionReservePriceUpdated(uint256 reservePrice);\r\n\r\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\r\n\r\n    function settleAuction() external;\r\n\r\n    function settleCurrentAndCreateNewAuction() external;\r\n\r\n    function createBid(uint256 econNFTId) external payable;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setTimeBuffer(uint256 timeBuffer) external;\r\n\r\n    function setReservePrice(uint256 reservePrice) external;\r\n\r\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n"
    },
    "contracts/test/WETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// FOR TEST PURPOSES ONLY. NOT PRODUCTION SAFE\r\n// Source: https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\r\npragma solidity ^0.8.6;\r\n\r\ncontract WETH {\r\n    string public name = 'Wrapped Ether';\r\n    string public symbol = 'WETH';\r\n    uint8 public decimals = 18;\r\n\r\n    event Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    fallback() external payable {\r\n        deposit();\r\n    }\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        payable(msg.sender).transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 wad\r\n    ) public returns (bool) {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}