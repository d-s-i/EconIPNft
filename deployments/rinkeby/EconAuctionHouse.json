{
  "address": "0x0a9a038a93A2C254659089b0279e072e124beE83",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nounId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "extended",
          "type": "bool"
        }
      ],
      "name": "AuctionBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nounId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nounId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidIncrementPercentage",
          "type": "uint256"
        }
      ],
      "name": "AuctionMinBidIncrementPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "AuctionReservePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nounId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "econNFTId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "econNFTId",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "econNFT",
      "outputs": [
        {
          "internalType": "contract IEconNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEconNFT",
          "name": "_econNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        }
      ],
      "name": "setMinBidIncrementPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        }
      ],
      "name": "setReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimeBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleCurrentAndCreateNewAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ac99d3dce0c2e71230c382952f085ea9f4335d3bbfa68d97e34fcbfda191b02",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x0a9a038a93A2C254659089b0279e072e124beE83",
    "transactionIndex": 27,
    "gasUsed": "2697590",
    "logsBloom": "0x
    "blockHash": "0x94823b395b21df4ca434ee8efe6dac72045aa521ec6e9208eb778a46969a4f03",
    "transactionHash": "0x4ac99d3dce0c2e71230c382952f085ea9f4335d3bbfa68d97e34fcbfda191b02",
    "logs": [],
    "blockNumber": 9543018,
    "cumulativeGasUsed": "13744667",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c16f364313aec072ac2a5ce01e24a8d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrementPercentage\",\"type\":\"uint256\"}],\"name\":\"AuctionMinBidIncrementPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBuffer\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"econNFTId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"econNFTId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"econNFT\",\"outputs\":[{\"internalType\":\"contract IEconNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEconNFT\",\"name\":\"_econNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleCurrentAndCreateNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBid(uint256)\":{\"details\":\"This contract only accepts payment in ETH.\"},\"initialize(address,address,uint256,uint256,uint8,uint256)\":{\"details\":\"This function can only be called once.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"This function can only be called by the owner when the contract is unpaused. While no new auctions can be started when paused, anyone can settle an ongoing auction.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMinBidIncrementPercentage(uint8)\":{\"details\":\"Only callable by the owner.\"},\"setReservePrice(uint256)\":{\"details\":\"Only callable by the owner.\"},\"setTimeBuffer(uint256)\":{\"details\":\"Only callable by the owner.\"},\"settleAuction()\":{\"details\":\"This function can only be called when the contract is paused.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"This function can only be called by the owner when the contract is paused. If required, this function will start a new auction.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBid(uint256)\":{\"notice\":\"Create a bid for a Noun, with a given amount.\"},\"initialize(address,address,uint256,uint256,uint8,uint256)\":{\"notice\":\"Initialize the auction house and base contracts, populate configuration values, and pause the contract.\"},\"pause()\":{\"notice\":\"Pause the econNFT auction house.\"},\"setMinBidIncrementPercentage(uint8)\":{\"notice\":\"Set the auction minimum bid increment percentage.\"},\"setReservePrice(uint256)\":{\"notice\":\"Set the auction reserve price.\"},\"setTimeBuffer(uint256)\":{\"notice\":\"Set the auction time buffer.\"},\"settleAuction()\":{\"notice\":\"Settle the current auction.\"},\"settleCurrentAndCreateNewAuction()\":{\"notice\":\"Settle the current auction, mint a new Noun, and put it up for auction.\"},\"unpause()\":{\"notice\":\"Unpause the econNFT auction house.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EconAuctionHouse.sol\":\"EconAuctionHouse\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/EconAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/// @title The econNFT DAO auction house\\r\\n\\r\\n/*********************************\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n *********************************/\\r\\n\\r\\n// LICENSE\\r\\n// econNFTAuctionHouse.sol is a modified version of Zora's AuctionHouse.sol:\\r\\n// https://github.com/ourzora/auction-house/blob/54a12ec1a6cf562e49f0a4917990474b11350a2d/contracts/AuctionHouse.sol\\r\\n//\\r\\n// AuctionHouse.sol source code Copyright Zora licensed under the GPL-3.0 license.\\r\\n// With modifications by Nounders DAO.\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport { ReentrancyGuardUpgradeable } from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport { IEconAuctionHouse } from './interfaces/IEconAuctionHouse.sol';\\r\\nimport { IEconNFT } from './interfaces/IEconNFT.sol';\\r\\nimport { IWETH } from './interfaces/IWETH.sol';\\r\\n\\r\\ncontract EconAuctionHouse is IEconAuctionHouse, PausableUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\r\\n    // The econNFT ERC721 token contract\\r\\n    IEconNFT public econNFT;\\r\\n\\r\\n    // The address of the WETH contract\\r\\n    address public weth;\\r\\n\\r\\n    // The minimum amount of time left in an auction after a new bid is created\\r\\n    uint256 public timeBuffer;\\r\\n\\r\\n    // The minimum price accepted in an auction\\r\\n    uint256 public reservePrice;\\r\\n\\r\\n    // The minimum percentage difference between the last bid amount and the current bid\\r\\n    uint8 public minBidIncrementPercentage;\\r\\n\\r\\n    // The duration of a single auction\\r\\n    uint256 public duration;\\r\\n\\r\\n    // The active auction\\r\\n    IEconAuctionHouse.Auction public auction;\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the auction house and base contracts,\\r\\n     * populate configuration values, and pause the contract.\\r\\n     * @dev This function can only be called once.\\r\\n     */\\r\\n    function initialize(\\r\\n        IEconNFT _econNFT,\\r\\n        address _weth,\\r\\n        uint256 _timeBuffer,\\r\\n        uint256 _reservePrice,\\r\\n        uint8 _minBidIncrementPercentage,\\r\\n        uint256 _duration\\r\\n    ) external initializer {\\r\\n        __Pausable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        __Ownable_init();\\r\\n\\r\\n        _pause();\\r\\n\\r\\n        econNFT = _econNFT;\\r\\n        weth = _weth;\\r\\n        timeBuffer = _timeBuffer;\\r\\n        reservePrice = _reservePrice;\\r\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\r\\n        duration = _duration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settle the current auction, mint a new Noun, and put it up for auction.\\r\\n     */\\r\\n    function settleCurrentAndCreateNewAuction() external override nonReentrant whenNotPaused {\\r\\n        _settleAuction();\\r\\n        _createAuction();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settle the current auction.\\r\\n     * @dev This function can only be called when the contract is paused.\\r\\n     */\\r\\n    function settleAuction() external override whenPaused nonReentrant {\\r\\n        _settleAuction();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a bid for a Noun, with a given amount.\\r\\n     * @dev This contract only accepts payment in ETH.\\r\\n     */\\r\\n    function createBid(uint256 econNFTId) external payable override nonReentrant {\\r\\n        IEconAuctionHouse.Auction memory _auction = auction;\\r\\n\\r\\n        require(_auction.econNFTId == econNFTId, 'NFT not up for auction');\\r\\n        require(block.timestamp < _auction.endTime, 'Auction expired');\\r\\n        require(msg.value >= reservePrice, 'Must send at least reservePrice');\\r\\n        require(\\r\\n            msg.value >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\\r\\n            'Must send more than last bid by minBidIncrementPercentage amount'\\r\\n        );\\r\\n\\r\\n        address payable lastBidder = _auction.bidder;\\r\\n\\r\\n        // Refund the last bidder, if applicable\\r\\n        if (lastBidder != address(0)) {\\r\\n            _safeTransferETHWithFallback(lastBidder, _auction.amount);\\r\\n        }\\r\\n\\r\\n        auction.amount = msg.value;\\r\\n        auction.bidder = payable(msg.sender);\\r\\n\\r\\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\\r\\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\\r\\n        if (extended) {\\r\\n            auction.endTime = _auction.endTime = block.timestamp + timeBuffer;\\r\\n        }\\r\\n\\r\\n        emit AuctionBid(_auction.econNFTId, msg.sender, msg.value, extended);\\r\\n\\r\\n        if (extended) {\\r\\n            emit AuctionExtended(_auction.econNFTId, _auction.endTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pause the econNFT auction house.\\r\\n     * @dev This function can only be called by the owner when the\\r\\n     * contract is unpaused. While no new auctions can be started when paused,\\r\\n     * anyone can settle an ongoing auction.\\r\\n     */\\r\\n    function pause() external override onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unpause the econNFT auction house.\\r\\n     * @dev This function can only be called by the owner when the\\r\\n     * contract is paused. If required, this function will start a new auction.\\r\\n     */\\r\\n    function unpause() external override onlyOwner {\\r\\n        _unpause();\\r\\n\\r\\n        if (auction.startTime == 0 || auction.settled) {\\r\\n            _createAuction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction time buffer.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\\r\\n        timeBuffer = _timeBuffer;\\r\\n\\r\\n        emit AuctionTimeBufferUpdated(_timeBuffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction reserve price.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setReservePrice(uint256 _reservePrice) external override onlyOwner {\\r\\n        reservePrice = _reservePrice;\\r\\n\\r\\n        emit AuctionReservePriceUpdated(_reservePrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction minimum bid increment percentage.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external override onlyOwner {\\r\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\r\\n\\r\\n        emit AuctionMinBidIncrementPercentageUpdated(_minBidIncrementPercentage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create an auction.\\r\\n     * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\\r\\n     * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\\r\\n     * catch the revert and pause this contract.\\r\\n     */\\r\\n    function _createAuction() internal {\\r\\n        try econNFT.mint() returns (uint256 econNFTId) {\\r\\n            uint256 startTime = block.timestamp;\\r\\n            uint256 endTime = startTime + duration;\\r\\n\\r\\n            auction = Auction({\\r\\n                econNFTId: econNFTId,\\r\\n                amount: 0,\\r\\n                startTime: startTime,\\r\\n                endTime: endTime,\\r\\n                bidder: payable(0),\\r\\n                settled: false\\r\\n            });\\r\\n\\r\\n            emit AuctionCreated(econNFTId, startTime, endTime);\\r\\n        } catch Error(string memory) {\\r\\n            _pause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settle an auction, finalizing the bid and paying out to the owner.\\r\\n     * @dev If there are no bids, the Noun is burned.\\r\\n     */\\r\\n    function _settleAuction() internal {\\r\\n        IEconAuctionHouse.Auction memory _auction = auction;\\r\\n\\r\\n        require(_auction.startTime != 0, \\\"Auction hasn't begun\\\");\\r\\n        require(!_auction.settled, 'Auction has already been settled');\\r\\n        require(block.timestamp >= _auction.endTime, \\\"Auction hasn't completed\\\");\\r\\n\\r\\n        auction.settled = true;\\r\\n\\r\\n        if (_auction.bidder == address(0)) {\\r\\n            econNFT.burn(_auction.econNFTId);\\r\\n        } else {\\r\\n            econNFT.transferFrom(address(this), _auction.bidder, _auction.econNFTId);\\r\\n        }\\r\\n\\r\\n        if (_auction.amount > 0) {\\r\\n            _safeTransferETHWithFallback(owner(), _auction.amount);\\r\\n        }\\r\\n\\r\\n        emit AuctionSettled(_auction.econNFTId, _auction.bidder, _auction.amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\\r\\n     */\\r\\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\r\\n        if (!_safeTransferETH(to, amount)) {\\r\\n            IWETH(weth).deposit{ value: amount }();\\r\\n            IERC20(weth).transfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ETH and return the success status.\\r\\n     * @dev This function only forwards 30,000 gas to the callee.\\r\\n     */\\r\\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\r\\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x11c5676aa11148e812056429f6eb78ca3570788826879854e2747a74d2b3c06e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEconAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/// @title Interface for Noun Auction Houses\\r\\n\\r\\n/*********************************\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n * \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591 *\\r\\n *********************************/\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IEconAuctionHouse {\\r\\n    struct Auction {\\r\\n        // ID for the Noun (ERC721 token ID)\\r\\n        uint256 econNFTId;\\r\\n        // The current highest bid amount\\r\\n        uint256 amount;\\r\\n        // The time that the auction started\\r\\n        uint256 startTime;\\r\\n        // The time that the auction is scheduled to end\\r\\n        uint256 endTime;\\r\\n        // The address of the current highest bid\\r\\n        address payable bidder;\\r\\n        // Whether or not the auction has been settled\\r\\n        bool settled;\\r\\n    }\\r\\n\\r\\n    event AuctionCreated(uint256 indexed nounId, uint256 startTime, uint256 endTime);\\r\\n\\r\\n    event AuctionBid(uint256 indexed nounId, address sender, uint256 value, bool extended);\\r\\n\\r\\n    event AuctionExtended(uint256 indexed nounId, uint256 endTime);\\r\\n\\r\\n    event AuctionSettled(uint256 indexed nounId, address winner, uint256 amount);\\r\\n\\r\\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\\r\\n\\r\\n    event AuctionReservePriceUpdated(uint256 reservePrice);\\r\\n\\r\\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\\r\\n\\r\\n    function settleAuction() external;\\r\\n\\r\\n    function settleCurrentAndCreateNewAuction() external;\\r\\n\\r\\n    function createBid(uint256 nounId) external payable;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function setTimeBuffer(uint256 timeBuffer) external;\\r\\n\\r\\n    function setReservePrice(uint256 reservePrice) external;\\r\\n\\r\\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x421137275d8852c5c951ecb2fe61a8ebce3d00295910b28a85d40ed528ae10a0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEconNFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IEconNFT is IERC721 {\\r\\n    function mint() external returns (uint256);\\r\\n\\r\\n    function burn(uint256 econNFTId) external returns (uint256);\\r\\n}\",\"keccak256\":\"0x4d3f8868c3ea12e5e2e015d08be2bc4242e18491d0b32a6f3a64ea741d3b29bd\",\"license\":\"Unlicense\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x557bccce5a6a54c824760246d617442b01ab1a8cdffe51476012878a2c7b57ad\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613015806100206000396000f3fe60806040526004361061011f5760003560e01c80638456cb59116100a0578063ce9c7c0d11610064578063ce9c7c0d14610349578063db2e1eed14610372578063ec91f2a41461039d578063f25efffc146103c8578063f2fde38b146103df5761011f565b80638456cb591461029c57806387f49f54146102b35780638da5cb5b146102dc578063a4d0a17e14610307578063b296024d1461031e5761011f565b8063659dd2b4116100e7578063659dd2b4146101e55780637120334b14610201578063715018a61461022a57806376389390146102415780637d9f6db51461026c5761011f565b80630fb5a6b41461012457806336ebdb381461014f5780633f4ba83a146101785780633fc8cef31461018f5780635c975abb146101ba575b600080fd5b34801561013057600080fd5b50610139610408565b6040516101469190612813565b60405180910390f35b34801561015b57600080fd5b50610176600480360381019061017191906122ae565b61040e565b005b34801561018457600080fd5b5061018d6104df565b005b34801561019b57600080fd5b506101a4610596565b6040516101b19190612562565b60405180910390f35b3480156101c657600080fd5b506101cf6105bc565b6040516101dc919061263d565b60405180910390f35b6101ff60048036038101906101fa9190612254565b6105d3565b005b34801561020d57600080fd5b5061022860048036038101906102239190612254565b610988565b005b34801561023657600080fd5b5061023f610a45565b005b34801561024d57600080fd5b50610256610acd565b6040516102639190612658565b60405180910390f35b34801561027857600080fd5b50610281610af3565b60405161029396959493929190612857565b60405180910390f35b3480156102a857600080fd5b506102b1610b4a565b005b3480156102bf57600080fd5b506102da60048036038101906102d591906121c7565b610bd0565b005b3480156102e857600080fd5b506102f1610d81565b6040516102fe9190612562565b60405180910390f35b34801561031357600080fd5b5061031c610dab565b005b34801561032a57600080fd5b50610333610e52565b60405161034091906128d3565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190612254565b610e65565b005b34801561037e57600080fd5b50610387610f22565b6040516103949190612813565b60405180910390f35b3480156103a957600080fd5b506103b2610f28565b6040516103bf9190612813565b60405180910390f35b3480156103d457600080fd5b506103dd610f2e565b005b3480156103eb57600080fd5b506104066004803603810190610401919061216d565b610fde565b005b60ce5481565b6104166110d6565b73ffffffffffffffffffffffffffffffffffffffff16610434610d81565b73ffffffffffffffffffffffffffffffffffffffff161461048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048190612753565b60405180910390fd5b8060cd60006101000a81548160ff021916908360ff1602179055507fec5ccd96cc77b6219e9d44143df916af68fc169339ea7de5008ff15eae13450d816040516104d491906128b8565b60405180910390a150565b6104e76110d6565b73ffffffffffffffffffffffffffffffffffffffff16610505610d81565b73ffffffffffffffffffffffffffffffffffffffff161461055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290612753565b60405180910390fd5b6105636110de565b600060cf600201541480610586575060cf60040160149054906101000a900460ff165b1561059457610593611180565b5b565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900460ff16905090565b60026065541415610619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610610906127b3565b60405180910390fd5b6002606581905550600060cf6040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff161515151581525050905081816000015114610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906127f3565b60405180910390fd5b80606001514210610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e906127d3565b60405180910390fd5b60cc5434101561079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906126d3565b60405180910390fd5b606460cd60009054906101000a900460ff1660ff1682602001516107c091906129a6565b6107ca9190612975565b81602001516107d9919061291f565b34101561081b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081290612733565b60405180910390fd5b600081608001519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461086757610866818360200151611399565b5b3460cf600101819055503360cf60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060cb544284606001516108ca9190612a00565b10905080156108f35760cb54426108e1919061291f565b836060018181525060cf600301819055505b82600001517f1159164c56f277e6fc99c11731bd380e0347deb969b75523398734c252706ea333348460405161092b93929190612606565b60405180910390a2801561097a5782600001517f6e912a3a9105bdd2af817ba5adc14e6c127c1035b5b648faa29ca0d58ab8ff4e84606001516040516109719190612813565b60405180910390a25b505050600160658190555050565b6109906110d6565b73ffffffffffffffffffffffffffffffffffffffff166109ae610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90612753565b60405180910390fd5b8060cb819055507f1b55d9f7002bda4490f467e326f22a4a847629c0f2d1ed421607d318d25b410d81604051610a3a9190612813565b60405180910390a150565b610a4d6110d6565b73ffffffffffffffffffffffffffffffffffffffff16610a6b610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890612753565b60405180910390fd5b610acb60006114df565b565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cf8060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16905086565b610b526110d6565b73ffffffffffffffffffffffffffffffffffffffff16610b70610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90612753565b60405180910390fd5b610bce6115a5565b565b600060019054906101000a900460ff1680610bf6575060008054906101000a900460ff16155b610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c90612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c85576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c8d611648565b610c95611731565b610c9d611812565b610ca56115a5565b8660c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460cb819055508360cc819055508260cd60006101000a81548160ff021916908360ff1602179055508160ce819055508015610d785760008060016101000a81548160ff0219169083151502179055505b50505050505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610db36105bc565b610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990612673565b60405180910390fd5b60026065541415610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f906127b3565b60405180910390fd5b6002606581905550610e486118fb565b6001606581905550565b60cd60009054906101000a900460ff1681565b610e6d6110d6565b73ffffffffffffffffffffffffffffffffffffffff16610e8b610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed890612753565b60405180910390fd5b8060cc819055507f6ab2e127d7fdf53b8f304e59d3aab5bfe97979f52a85479691a6fab27a28a6b281604051610f179190612813565b60405180910390a150565b60cc5481565b60cb5481565b60026065541415610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b906127b3565b60405180910390fd5b6002606581905550610f846105bc565b15610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb906126f3565b60405180910390fd5b610fcc6118fb565b610fd4611180565b6001606581905550565b610fe66110d6565b73ffffffffffffffffffffffffffffffffffffffff16611004610d81565b73ffffffffffffffffffffffffffffffffffffffff161461105a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105190612753565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c190612693565b60405180910390fd5b6110d3816114df565b50565b600033905090565b6110e66105bc565b611125576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111c90612673565b60405180910390fd5b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6111696110d6565b6040516111769190612562565b60405180910390a1565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111ea57600080fd5b505af192505050801561121b57506040513d601f19601f820116820180604052508101906112189190612281565b60015b61126657611227612c0a565b806308c379a01415611255575061123c612ed6565b806112475750611257565b61124f6115a5565b50611261565b505b3d6000803e3d6000fd5b611397565b6000429050600060ce548261127b919061291f565b90506040518060c0016040528084815260200160008152602001838152602001828152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060cf6000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff021916908315150217905550905050827fd6eddd1118d71820909c1197aa966dbc15ed6f508554252169cc3d5ccac756ca838360405161138b92919061282e565b60405180910390a25050505b565b6113a38282611c8d565b6114db5760ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561141157600080fd5b505af1158015611425573d6000803e3d6000fd5b505050505060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016114879291906125dd565b602060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d9919061219a565b505b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115ad6105bc565b156115ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e4906126f3565b60405180910390fd5b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116316110d6565b60405161163e9190612562565b60405180910390a1565b600060019054906101000a900460ff168061166e575060008054906101000a900460ff16155b6116ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a490612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156116fd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611705611d58565b61170d611e31565b801561172e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611757575060008054906101000a900460ff16155b611796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178d90612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156117e6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117ee611f25565b801561180f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611838575060008054906101000a900460ff16155b611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186e90612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156118c7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6118cf611d58565b6118d7612006565b80156118f85760008060016101000a81548160ff0219169083151502179055505b50565b600060cf6040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff16151515158152505090506000816040015114156119ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e4906126b3565b60405180910390fd5b8060a0015115611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2990612773565b60405180910390fd5b8060600151421015611a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7090612793565b60405180910390fd5b600160cf60040160146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff161415611b875760c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c6882600001516040518263ffffffff1660e01b8152600401611b2f9190612813565b602060405180830381600087803b158015611b4957600080fd5b505af1158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b819190612281565b50611c21565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30836080015184600001516040518463ffffffff1660e01b8152600401611bee939291906125a6565b600060405180830381600087803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b505050505b600081602001511115611c4457611c43611c39610d81565b8260200151611399565b5b80600001517fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d9982608001518360200151604051611c8292919061257d565b60405180910390a250565b6000808373ffffffffffffffffffffffffffffffffffffffff168361753090600067ffffffffffffffff811115611cc757611cc6612bdb565b5b6040519080825280601f01601f191660200182016040528015611cf95781602001600182028036833780820191505090505b50604051611d07919061254b565b600060405180830381858888f193505050503d8060008114611d45576040519150601f19603f3d011682016040523d82523d6000602084013e611d4a565b606091505b505090508091505092915050565b600060019054906101000a900460ff1680611d7e575060008054906101000a900460ff16155b611dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db490612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e0d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015611e2e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611e57575060008054906101000a900460ff16155b611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015611ee6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000603360006101000a81548160ff0219169083151502179055508015611f225760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611f4b575060008054906101000a900460ff16155b611f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8190612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015611fda576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600160658190555080156120035760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061202c575060008054906101000a900460ff16155b61206b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206290612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156120bb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6120cb6120c66110d6565b6114df565b80156120ec5760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506120fe81612f6c565b92915050565b60008151905061211381612f83565b92915050565b60008135905061212881612f9a565b92915050565b60008135905061213d81612fb1565b92915050565b60008151905061215281612fb1565b92915050565b60008135905061216781612fc8565b92915050565b60006020828403121561218357612182612c2c565b5b6000612191848285016120ef565b91505092915050565b6000602082840312156121b0576121af612c2c565b5b60006121be84828501612104565b91505092915050565b60008060008060008060c087890312156121e4576121e3612c2c565b5b60006121f289828a01612119565b965050602061220389828a016120ef565b955050604061221489828a0161212e565b945050606061222589828a0161212e565b935050608061223689828a01612158565b92505060a061224789828a0161212e565b9150509295509295509295565b60006020828403121561226a57612269612c2c565b5b60006122788482850161212e565b91505092915050565b60006020828403121561229757612296612c2c565b5b60006122a584828501612143565b91505092915050565b6000602082840312156122c4576122c3612c2c565b5b60006122d284828501612158565b91505092915050565b6122e481612aad565b82525050565b6122f381612a46565b82525050565b61230281612a34565b82525050565b61231181612a58565b82525050565b6000612322826128f8565b61232c8185612903565b935061233c818560208601612b19565b80840191505092915050565b61235181612abf565b82525050565b600061236460148361290e565b915061236f82612c4f565b602082019050919050565b600061238760268361290e565b915061239282612c78565b604082019050919050565b60006123aa60148361290e565b91506123b582612cc7565b602082019050919050565b60006123cd601f8361290e565b91506123d882612cf0565b602082019050919050565b60006123f060108361290e565b91506123fb82612d19565b602082019050919050565b6000612413602e8361290e565b915061241e82612d42565b604082019050919050565b600061243660408361290e565b915061244182612d91565b604082019050919050565b600061245960208361290e565b915061246482612de0565b602082019050919050565b600061247c60208361290e565b915061248782612e09565b602082019050919050565b600061249f60188361290e565b91506124aa82612e32565b602082019050919050565b60006124c2601f8361290e565b91506124cd82612e5b565b602082019050919050565b60006124e5600f8361290e565b91506124f082612e84565b602082019050919050565b600061250860168361290e565b915061251382612ead565b602082019050919050565b61252781612a96565b82525050565b61253681612b07565b82525050565b61254581612aa0565b82525050565b60006125578284612317565b915081905092915050565b600060208201905061257760008301846122f9565b92915050565b600060408201905061259260008301856122db565b61259f602083018461251e565b9392505050565b60006060820190506125bb60008301866122f9565b6125c860208301856122db565b6125d5604083018461251e565b949350505050565b60006040820190506125f260008301856122f9565b6125ff602083018461251e565b9392505050565b600060608201905061261b60008301866122f9565b612628602083018561251e565b6126356040830184612308565b949350505050565b60006020820190506126526000830184612308565b92915050565b600060208201905061266d6000830184612348565b92915050565b6000602082019050818103600083015261268c81612357565b9050919050565b600060208201905081810360008301526126ac8161237a565b9050919050565b600060208201905081810360008301526126cc8161239d565b9050919050565b600060208201905081810360008301526126ec816123c0565b9050919050565b6000602082019050818103600083015261270c816123e3565b9050919050565b6000602082019050818103600083015261272c81612406565b9050919050565b6000602082019050818103600083015261274c81612429565b9050919050565b6000602082019050818103600083015261276c8161244c565b9050919050565b6000602082019050818103600083015261278c8161246f565b9050919050565b600060208201905081810360008301526127ac81612492565b9050919050565b600060208201905081810360008301526127cc816124b5565b9050919050565b600060208201905081810360008301526127ec816124d8565b9050919050565b6000602082019050818103600083015261280c816124fb565b9050919050565b6000602082019050612828600083018461251e565b92915050565b6000604082019050612843600083018561251e565b612850602083018461251e565b9392505050565b600060c08201905061286c600083018961251e565b612879602083018861251e565b612886604083018761251e565b612893606083018661251e565b6128a060808301856122ea565b6128ad60a0830184612308565b979650505050505050565b60006020820190506128cd600083018461252d565b92915050565b60006020820190506128e8600083018461253c565b92915050565b6000604051905090565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061292a82612a96565b915061293583612a96565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561296a57612969612b7d565b5b828201905092915050565b600061298082612a96565b915061298b83612a96565b92508261299b5761299a612bac565b5b828204905092915050565b60006129b182612a96565b91506129bc83612a96565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129f5576129f4612b7d565b5b828202905092915050565b6000612a0b82612a96565b9150612a1683612a96565b925082821015612a2957612a28612b7d565b5b828203905092915050565b6000612a3f82612a76565b9050919050565b6000612a5182612a76565b9050919050565b60008115159050919050565b6000612a6f82612a34565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612ab882612ae3565b9050919050565b6000612aca82612ad1565b9050919050565b6000612adc82612a76565b9050919050565b6000612aee82612af5565b9050919050565b6000612b0082612a76565b9050919050565b6000612b1282612aa0565b9050919050565b60005b83811015612b37578082015181840152602081019050612b1c565b83811115612b46576000848401525b50505050565b612b5582612c31565b810181811067ffffffffffffffff82111715612b7457612b73612bdb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115612c295760046000803e612c26600051612c42565b90505b90565b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f41756374696f6e206861736e277420626567756e000000000000000000000000600082015250565b7f4d7573742073656e64206174206c656173742072657365727665507269636500600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d7573742073656e64206d6f7265207468616e206c617374206269642062792060008201527f6d696e426964496e6372656d656e7450657263656e7461676520616d6f756e74602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f41756374696f6e2068617320616c7265616479206265656e20736574746c6564600082015250565b7f41756374696f6e206861736e277420636f6d706c657465640000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f41756374696f6e20657870697265640000000000000000000000000000000000600082015250565b7f4e4654206e6f7420757020666f722061756374696f6e00000000000000000000600082015250565b600060443d1015612ee657612f69565b612eee6128ee565b60043d036004823e80513d602482011167ffffffffffffffff82111715612f16575050612f69565b808201805167ffffffffffffffff811115612f345750505050612f69565b80602083010160043d038501811115612f51575050505050612f69565b612f6082602001850186612b4c565b82955050505050505b90565b612f7581612a34565b8114612f8057600080fd5b50565b612f8c81612a58565b8114612f9757600080fd5b50565b612fa381612a64565b8114612fae57600080fd5b50565b612fba81612a96565b8114612fc557600080fd5b50565b612fd181612aa0565b8114612fdc57600080fd5b5056fea2646970667358221220990020bdd154640592b224769866f0069c66107ce48f6022fcaf24c41e5511d364736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80638456cb59116100a0578063ce9c7c0d11610064578063ce9c7c0d14610349578063db2e1eed14610372578063ec91f2a41461039d578063f25efffc146103c8578063f2fde38b146103df5761011f565b80638456cb591461029c57806387f49f54146102b35780638da5cb5b146102dc578063a4d0a17e14610307578063b296024d1461031e5761011f565b8063659dd2b4116100e7578063659dd2b4146101e55780637120334b14610201578063715018a61461022a57806376389390146102415780637d9f6db51461026c5761011f565b80630fb5a6b41461012457806336ebdb381461014f5780633f4ba83a146101785780633fc8cef31461018f5780635c975abb146101ba575b600080fd5b34801561013057600080fd5b50610139610408565b6040516101469190612813565b60405180910390f35b34801561015b57600080fd5b50610176600480360381019061017191906122ae565b61040e565b005b34801561018457600080fd5b5061018d6104df565b005b34801561019b57600080fd5b506101a4610596565b6040516101b19190612562565b60405180910390f35b3480156101c657600080fd5b506101cf6105bc565b6040516101dc919061263d565b60405180910390f35b6101ff60048036038101906101fa9190612254565b6105d3565b005b34801561020d57600080fd5b5061022860048036038101906102239190612254565b610988565b005b34801561023657600080fd5b5061023f610a45565b005b34801561024d57600080fd5b50610256610acd565b6040516102639190612658565b60405180910390f35b34801561027857600080fd5b50610281610af3565b60405161029396959493929190612857565b60405180910390f35b3480156102a857600080fd5b506102b1610b4a565b005b3480156102bf57600080fd5b506102da60048036038101906102d591906121c7565b610bd0565b005b3480156102e857600080fd5b506102f1610d81565b6040516102fe9190612562565b60405180910390f35b34801561031357600080fd5b5061031c610dab565b005b34801561032a57600080fd5b50610333610e52565b60405161034091906128d3565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190612254565b610e65565b005b34801561037e57600080fd5b50610387610f22565b6040516103949190612813565b60405180910390f35b3480156103a957600080fd5b506103b2610f28565b6040516103bf9190612813565b60405180910390f35b3480156103d457600080fd5b506103dd610f2e565b005b3480156103eb57600080fd5b506104066004803603810190610401919061216d565b610fde565b005b60ce5481565b6104166110d6565b73ffffffffffffffffffffffffffffffffffffffff16610434610d81565b73ffffffffffffffffffffffffffffffffffffffff161461048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048190612753565b60405180910390fd5b8060cd60006101000a81548160ff021916908360ff1602179055507fec5ccd96cc77b6219e9d44143df916af68fc169339ea7de5008ff15eae13450d816040516104d491906128b8565b60405180910390a150565b6104e76110d6565b73ffffffffffffffffffffffffffffffffffffffff16610505610d81565b73ffffffffffffffffffffffffffffffffffffffff161461055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290612753565b60405180910390fd5b6105636110de565b600060cf600201541480610586575060cf60040160149054906101000a900460ff165b1561059457610593611180565b5b565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900460ff16905090565b60026065541415610619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610610906127b3565b60405180910390fd5b6002606581905550600060cf6040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff161515151581525050905081816000015114610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906127f3565b60405180910390fd5b80606001514210610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e906127d3565b60405180910390fd5b60cc5434101561079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906126d3565b60405180910390fd5b606460cd60009054906101000a900460ff1660ff1682602001516107c091906129a6565b6107ca9190612975565b81602001516107d9919061291f565b34101561081b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081290612733565b60405180910390fd5b600081608001519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461086757610866818360200151611399565b5b3460cf600101819055503360cf60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060cb544284606001516108ca9190612a00565b10905080156108f35760cb54426108e1919061291f565b836060018181525060cf600301819055505b82600001517f1159164c56f277e6fc99c11731bd380e0347deb969b75523398734c252706ea333348460405161092b93929190612606565b60405180910390a2801561097a5782600001517f6e912a3a9105bdd2af817ba5adc14e6c127c1035b5b648faa29ca0d58ab8ff4e84606001516040516109719190612813565b60405180910390a25b505050600160658190555050565b6109906110d6565b73ffffffffffffffffffffffffffffffffffffffff166109ae610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90612753565b60405180910390fd5b8060cb819055507f1b55d9f7002bda4490f467e326f22a4a847629c0f2d1ed421607d318d25b410d81604051610a3a9190612813565b60405180910390a150565b610a4d6110d6565b73ffffffffffffffffffffffffffffffffffffffff16610a6b610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890612753565b60405180910390fd5b610acb60006114df565b565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cf8060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16905086565b610b526110d6565b73ffffffffffffffffffffffffffffffffffffffff16610b70610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd90612753565b60405180910390fd5b610bce6115a5565b565b600060019054906101000a900460ff1680610bf6575060008054906101000a900460ff16155b610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c90612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c85576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c8d611648565b610c95611731565b610c9d611812565b610ca56115a5565b8660c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460cb819055508360cc819055508260cd60006101000a81548160ff021916908360ff1602179055508160ce819055508015610d785760008060016101000a81548160ff0219169083151502179055505b50505050505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610db36105bc565b610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de990612673565b60405180910390fd5b60026065541415610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f906127b3565b60405180910390fd5b6002606581905550610e486118fb565b6001606581905550565b60cd60009054906101000a900460ff1681565b610e6d6110d6565b73ffffffffffffffffffffffffffffffffffffffff16610e8b610d81565b73ffffffffffffffffffffffffffffffffffffffff1614610ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed890612753565b60405180910390fd5b8060cc819055507f6ab2e127d7fdf53b8f304e59d3aab5bfe97979f52a85479691a6fab27a28a6b281604051610f179190612813565b60405180910390a150565b60cc5481565b60cb5481565b60026065541415610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b906127b3565b60405180910390fd5b6002606581905550610f846105bc565b15610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb906126f3565b60405180910390fd5b610fcc6118fb565b610fd4611180565b6001606581905550565b610fe66110d6565b73ffffffffffffffffffffffffffffffffffffffff16611004610d81565b73ffffffffffffffffffffffffffffffffffffffff161461105a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105190612753565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c190612693565b60405180910390fd5b6110d3816114df565b50565b600033905090565b6110e66105bc565b611125576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111c90612673565b60405180910390fd5b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6111696110d6565b6040516111769190612562565b60405180910390a1565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111ea57600080fd5b505af192505050801561121b57506040513d601f19601f820116820180604052508101906112189190612281565b60015b61126657611227612c0a565b806308c379a01415611255575061123c612ed6565b806112475750611257565b61124f6115a5565b50611261565b505b3d6000803e3d6000fd5b611397565b6000429050600060ce548261127b919061291f565b90506040518060c0016040528084815260200160008152602001838152602001828152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060cf6000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff021916908315150217905550905050827fd6eddd1118d71820909c1197aa966dbc15ed6f508554252169cc3d5ccac756ca838360405161138b92919061282e565b60405180910390a25050505b565b6113a38282611c8d565b6114db5760ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561141157600080fd5b505af1158015611425573d6000803e3d6000fd5b505050505060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016114879291906125dd565b602060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d9919061219a565b505b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115ad6105bc565b156115ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e4906126f3565b60405180910390fd5b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116316110d6565b60405161163e9190612562565b60405180910390a1565b600060019054906101000a900460ff168061166e575060008054906101000a900460ff16155b6116ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a490612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156116fd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611705611d58565b61170d611e31565b801561172e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611757575060008054906101000a900460ff16155b611796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178d90612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156117e6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117ee611f25565b801561180f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611838575060008054906101000a900460ff16155b611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186e90612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156118c7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6118cf611d58565b6118d7612006565b80156118f85760008060016101000a81548160ff0219169083151502179055505b50565b600060cf6040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff16151515158152505090506000816040015114156119ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e4906126b3565b60405180910390fd5b8060a0015115611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2990612773565b60405180910390fd5b8060600151421015611a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7090612793565b60405180910390fd5b600160cf60040160146101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff161415611b875760c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c6882600001516040518263ffffffff1660e01b8152600401611b2f9190612813565b602060405180830381600087803b158015611b4957600080fd5b505af1158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b819190612281565b50611c21565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd30836080015184600001516040518463ffffffff1660e01b8152600401611bee939291906125a6565b600060405180830381600087803b158015611c0857600080fd5b505af1158015611c1c573d6000803e3d6000fd5b505050505b600081602001511115611c4457611c43611c39610d81565b8260200151611399565b5b80600001517fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d9982608001518360200151604051611c8292919061257d565b60405180910390a250565b6000808373ffffffffffffffffffffffffffffffffffffffff168361753090600067ffffffffffffffff811115611cc757611cc6612bdb565b5b6040519080825280601f01601f191660200182016040528015611cf95781602001600182028036833780820191505090505b50604051611d07919061254b565b600060405180830381858888f193505050503d8060008114611d45576040519150601f19603f3d011682016040523d82523d6000602084013e611d4a565b606091505b505090508091505092915050565b600060019054906101000a900460ff1680611d7e575060008054906101000a900460ff16155b611dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db490612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e0d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015611e2e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611e57575060008054906101000a900460ff16155b611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015611ee6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000603360006101000a81548160ff0219169083151502179055508015611f225760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611f4b575060008054906101000a900460ff16155b611f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8190612713565b60405180910390fd5b60008060019054906101000a900460ff161590508015611fda576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600160658190555080156120035760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061202c575060008054906101000a900460ff16155b61206b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206290612713565b60405180910390fd5b60008060019054906101000a900460ff1615905080156120bb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6120cb6120c66110d6565b6114df565b80156120ec5760008060016101000a81548160ff0219169083151502179055505b50565b6000813590506120fe81612f6c565b92915050565b60008151905061211381612f83565b92915050565b60008135905061212881612f9a565b92915050565b60008135905061213d81612fb1565b92915050565b60008151905061215281612fb1565b92915050565b60008135905061216781612fc8565b92915050565b60006020828403121561218357612182612c2c565b5b6000612191848285016120ef565b91505092915050565b6000602082840312156121b0576121af612c2c565b5b60006121be84828501612104565b91505092915050565b60008060008060008060c087890312156121e4576121e3612c2c565b5b60006121f289828a01612119565b965050602061220389828a016120ef565b955050604061221489828a0161212e565b945050606061222589828a0161212e565b935050608061223689828a01612158565b92505060a061224789828a0161212e565b9150509295509295509295565b60006020828403121561226a57612269612c2c565b5b60006122788482850161212e565b91505092915050565b60006020828403121561229757612296612c2c565b5b60006122a584828501612143565b91505092915050565b6000602082840312156122c4576122c3612c2c565b5b60006122d284828501612158565b91505092915050565b6122e481612aad565b82525050565b6122f381612a46565b82525050565b61230281612a34565b82525050565b61231181612a58565b82525050565b6000612322826128f8565b61232c8185612903565b935061233c818560208601612b19565b80840191505092915050565b61235181612abf565b82525050565b600061236460148361290e565b915061236f82612c4f565b602082019050919050565b600061238760268361290e565b915061239282612c78565b604082019050919050565b60006123aa60148361290e565b91506123b582612cc7565b602082019050919050565b60006123cd601f8361290e565b91506123d882612cf0565b602082019050919050565b60006123f060108361290e565b91506123fb82612d19565b602082019050919050565b6000612413602e8361290e565b915061241e82612d42565b604082019050919050565b600061243660408361290e565b915061244182612d91565b604082019050919050565b600061245960208361290e565b915061246482612de0565b602082019050919050565b600061247c60208361290e565b915061248782612e09565b602082019050919050565b600061249f60188361290e565b91506124aa82612e32565b602082019050919050565b60006124c2601f8361290e565b91506124cd82612e5b565b602082019050919050565b60006124e5600f8361290e565b91506124f082612e84565b602082019050919050565b600061250860168361290e565b915061251382612ead565b602082019050919050565b61252781612a96565b82525050565b61253681612b07565b82525050565b61254581612aa0565b82525050565b60006125578284612317565b915081905092915050565b600060208201905061257760008301846122f9565b92915050565b600060408201905061259260008301856122db565b61259f602083018461251e565b9392505050565b60006060820190506125bb60008301866122f9565b6125c860208301856122db565b6125d5604083018461251e565b949350505050565b60006040820190506125f260008301856122f9565b6125ff602083018461251e565b9392505050565b600060608201905061261b60008301866122f9565b612628602083018561251e565b6126356040830184612308565b949350505050565b60006020820190506126526000830184612308565b92915050565b600060208201905061266d6000830184612348565b92915050565b6000602082019050818103600083015261268c81612357565b9050919050565b600060208201905081810360008301526126ac8161237a565b9050919050565b600060208201905081810360008301526126cc8161239d565b9050919050565b600060208201905081810360008301526126ec816123c0565b9050919050565b6000602082019050818103600083015261270c816123e3565b9050919050565b6000602082019050818103600083015261272c81612406565b9050919050565b6000602082019050818103600083015261274c81612429565b9050919050565b6000602082019050818103600083015261276c8161244c565b9050919050565b6000602082019050818103600083015261278c8161246f565b9050919050565b600060208201905081810360008301526127ac81612492565b9050919050565b600060208201905081810360008301526127cc816124b5565b9050919050565b600060208201905081810360008301526127ec816124d8565b9050919050565b6000602082019050818103600083015261280c816124fb565b9050919050565b6000602082019050612828600083018461251e565b92915050565b6000604082019050612843600083018561251e565b612850602083018461251e565b9392505050565b600060c08201905061286c600083018961251e565b612879602083018861251e565b612886604083018761251e565b612893606083018661251e565b6128a060808301856122ea565b6128ad60a0830184612308565b979650505050505050565b60006020820190506128cd600083018461252d565b92915050565b60006020820190506128e8600083018461253c565b92915050565b6000604051905090565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061292a82612a96565b915061293583612a96565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561296a57612969612b7d565b5b828201905092915050565b600061298082612a96565b915061298b83612a96565b92508261299b5761299a612bac565b5b828204905092915050565b60006129b182612a96565b91506129bc83612a96565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129f5576129f4612b7d565b5b828202905092915050565b6000612a0b82612a96565b9150612a1683612a96565b925082821015612a2957612a28612b7d565b5b828203905092915050565b6000612a3f82612a76565b9050919050565b6000612a5182612a76565b9050919050565b60008115159050919050565b6000612a6f82612a34565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612ab882612ae3565b9050919050565b6000612aca82612ad1565b9050919050565b6000612adc82612a76565b9050919050565b6000612aee82612af5565b9050919050565b6000612b0082612a76565b9050919050565b6000612b1282612aa0565b9050919050565b60005b83811015612b37578082015181840152602081019050612b1c565b83811115612b46576000848401525b50505050565b612b5582612c31565b810181811067ffffffffffffffff82111715612b7457612b73612bdb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115612c295760046000803e612c26600051612c42565b90505b90565b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f41756374696f6e206861736e277420626567756e000000000000000000000000600082015250565b7f4d7573742073656e64206174206c656173742072657365727665507269636500600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d7573742073656e64206d6f7265207468616e206c617374206269642062792060008201527f6d696e426964496e6372656d656e7450657263656e7461676520616d6f756e74602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f41756374696f6e2068617320616c7265616479206265656e20736574746c6564600082015250565b7f41756374696f6e206861736e277420636f6d706c657465640000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f41756374696f6e20657870697265640000000000000000000000000000000000600082015250565b7f4e4654206e6f7420757020666f722061756374696f6e00000000000000000000600082015250565b600060443d1015612ee657612f69565b612eee6128ee565b60043d036004823e80513d602482011167ffffffffffffffff82111715612f16575050612f69565b808201805167ffffffffffffffff811115612f345750505050612f69565b80602083010160043d038501811115612f51575050505050612f69565b612f6082602001850186612b4c565b82955050505050505b90565b612f7581612a34565b8114612f8057600080fd5b50565b612f8c81612a58565b8114612f9757600080fd5b50565b612fa381612a64565b8114612fae57600080fd5b50565b612fba81612a96565b8114612fc557600080fd5b50565b612fd181612aa0565b8114612fdc57600080fd5b5056fea2646970667358221220990020bdd154640592b224769866f0069c66107ce48f6022fcaf24c41e5511d364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBid(uint256)": {
        "details": "This contract only accepts payment in ETH."
      },
      "initialize(address,address,uint256,uint256,uint8,uint256)": {
        "details": "This function can only be called once."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "This function can only be called by the owner when the contract is unpaused. While no new auctions can be started when paused, anyone can settle an ongoing auction."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMinBidIncrementPercentage(uint8)": {
        "details": "Only callable by the owner."
      },
      "setReservePrice(uint256)": {
        "details": "Only callable by the owner."
      },
      "setTimeBuffer(uint256)": {
        "details": "Only callable by the owner."
      },
      "settleAuction()": {
        "details": "This function can only be called when the contract is paused."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "This function can only be called by the owner when the contract is paused. If required, this function will start a new auction."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBid(uint256)": {
        "notice": "Create a bid for a Noun, with a given amount."
      },
      "initialize(address,address,uint256,uint256,uint8,uint256)": {
        "notice": "Initialize the auction house and base contracts, populate configuration values, and pause the contract."
      },
      "pause()": {
        "notice": "Pause the econNFT auction house."
      },
      "setMinBidIncrementPercentage(uint8)": {
        "notice": "Set the auction minimum bid increment percentage."
      },
      "setReservePrice(uint256)": {
        "notice": "Set the auction reserve price."
      },
      "setTimeBuffer(uint256)": {
        "notice": "Set the auction time buffer."
      },
      "settleAuction()": {
        "notice": "Settle the current auction."
      },
      "settleCurrentAndCreateNewAuction()": {
        "notice": "Settle the current auction, mint a new Noun, and put it up for auction."
      },
      "unpause()": {
        "notice": "Unpause the econNFT auction house."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 384,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2244,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "econNFT",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IEconNFT)3760"
      },
      {
        "astId": 2246,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "weth",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 2248,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "timeBuffer",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 2250,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "reservePrice",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 2252,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "minBidIncrementPercentage",
        "offset": 0,
        "slot": "205",
        "type": "t_uint8"
      },
      {
        "astId": 2254,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "duration",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 2257,
        "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
        "label": "auction",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(Auction)3665_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEconNFT)3760": {
        "encoding": "inplace",
        "label": "contract IEconNFT",
        "numberOfBytes": "20"
      },
      "t_struct(Auction)3665_storage": {
        "encoding": "inplace",
        "label": "struct IEconAuctionHouse.Auction",
        "members": [
          {
            "astId": 3654,
            "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
            "label": "econNFTId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3656,
            "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3658,
            "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3660,
            "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3662,
            "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
            "label": "bidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 3664,
            "contract": "contracts/EconAuctionHouse.sol:EconAuctionHouse",
            "label": "settled",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}