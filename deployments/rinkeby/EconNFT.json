{
  "address": "0x1C98027C77627366a928F9202D6Df8058c7cADbE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "econNFTId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExpirationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePath",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathSvg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePathCommand",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathCommand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "finalSvg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinterLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newExpirationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setCurrentExpirationTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf4fbb72c3aff03d9f4b753bdf9769715310e02f26e686944c8d63706c11ce94",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x1C98027C77627366a928F9202D6Df8058c7cADbE",
    "transactionIndex": 64,
    "gasUsed": "4471820",
    "logsBloom": "0x
    "blockHash": "0x6abc85ebb011e00938c57c2cc637bf7e7d3672e255f40ff797704130786d8429",
    "transactionHash": "0xbf4fbb72c3aff03d9f4b753bdf9769715310e02f26e686944c8d63706c11ce94",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 9681494,
        "transactionHash": "0xbf4fbb72c3aff03d9f4b753bdf9769715310e02f26e686944c8d63706c11ce94",
        "address": "0x1C98027C77627366a928F9202D6Df8058c7cADbE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004428161dbd37d935c64894525f91039e1a6e4a1e"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0x6abc85ebb011e00938c57c2cc637bf7e7d3672e255f40ff797704130786d8429"
      }
    ],
    "blockNumber": 9681494,
    "cumulativeGasUsed": "29891594",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0",
    1672441200
  ],
  "solcInputHash": "f7ae3fcaf91a4afebd8dfd436b30628f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"econNFTId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpirationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathSvg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePathCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathCommand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"finalSvg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinterLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExpirationTimestamp\",\"type\":\"uint256\"}],\"name\":\"setCurrentExpirationTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"econNFTId\":\"the id of the NFT you want to burn.\"}},\"constructor\":{\"details\":\"Variables used to make the JPEG are set in order to construct an SVG later on. \",\"params\":{\"_expirationTimestamp\":\"the date where the EconNFT will expire (timestamp in seconds).\",\"_totalSupply\":\"maximum number of NFT that is going to be minted.\"}},\"generatePath(uint256)\":{\"details\":\"Function called by the `generateSVG()` function.\",\"params\":{\"_randomNumber\":\"is a random number from the `generatePath()` function.\"},\"returns\":{\"pathSvg\":\"a string containing all SVG instructions.\"}},\"generatePathCommand(uint256)\":{\"details\":\"Called by the `generatePath()` function.\",\"params\":{\"_randomNumber\":\"is a random number from the `generatePath()` function.\"},\"returns\":{\"pathCommand\":\"a string containing the paths to create the SVG.\"}},\"generateSVG(uint256)\":{\"details\":\"The random number is used to print random lines and random colors on the final SVG.\",\"params\":{\"_randomNumber\":\"is a random number used to construct the SVG (the more random the better).\"},\"returns\":{\"finalSvg\":\"the full SVG component readable by a browser.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint()\":{\"details\":\"Create a new NFT and send it to the minter.\",\"returns\":{\"_0\":\"Return the id of the minted NFT.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setCurrentExpirationTimestamp(uint256)\":{\"params\":{\"_newExpirationTimestamp\":\"the new timestamp.\"}},\"setMinter(address)\":{\"params\":{\"_minter\":\"The new minter address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"svgToImageURI(string)\":{\"params\":{\"_svg\":\"is the SVG component.\"},\"returns\":{\"_0\":\"imageURI a string readable by the browser which will display the SVG.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the id of the token you would like to read information from.\"},\"returns\":{\"_0\":\"data a 64 based encoded string containing a json object with all the informations.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Economics Design Property Right NFT.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0).\"},\"generatePath(uint256)\":{\"notice\":\"Generate different paths that creates the SVG lines.\"},\"generatePathCommand(uint256)\":{\"notice\":\"Generate the paths to create the SVG.\"},\"generateSVG(uint256)\":{\"notice\":\"Generate a full SVG component.\"},\"lockMinter()\":{\"notice\":\"Lock the minter from calling certain functions.\"},\"mint()\":{\"notice\":\"Mint a new NFT.\"},\"setCurrentExpirationTimestamp(uint256)\":{\"notice\":\"Change the expiration timestamp of the future NFTs about to get minted.\"},\"setMinter(address)\":{\"notice\":\"Change the minter address.\"},\"svgToImageURI(string)\":{\"notice\":\"Takes a SVG and encode it while still keeping it readable by a browser.\"},\"tokenURI(uint256)\":{\"notice\":\"Contain all the informations needed for read this NFT informations.\"}},\"notice\":\"Contract used to verify the ownership of the Economics Design book property rights.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EconNFT.sol\":\"EconNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"lol\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc96f3be7ca66673270654781fede8a154706ecfdec6bf6b75f40393f74c824d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/EconNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/// @title Economics Design Property Right NFT.\\r\\n/// @notice Contract used to verify the ownership of the Economics Design book property rights.\\r\\ncontract EconNFT is ERC721, Ownable {\\r\\n\\r\\n    // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \\r\\n    struct Seed {\\r\\n        uint256 expirationTimestamp;\\r\\n    }\\r\\n\\r\\n    // Minter of the EconNFT. \\r\\n    address public minter;  \\r\\n\\r\\n    // Id currently auctionned.\\r\\n    uint256 private _currentEconNFTId;\\r\\n\\r\\n    bool public isMinterLocked;\\r\\n\\r\\n    // Contain information about the NFT that are set when its first minted.\\r\\n    mapping(uint256 => Seed) public seeds;\\r\\n\\r\\n    // Expiration timestamp currently associated with each EconNFT.\\r\\n    uint256 public currentExpirationTimestamp;\\r\\n\\r\\n    // Constant used to translate a timestamp into a date for tokenURI().\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    // Variables used to make the JPEG image.\\r\\n    uint256 public maxNumberOfPath;\\r\\n    uint256 public maxNumberOfPathCommands;\\r\\n    uint256 public size;\\r\\n    string[] public pathCommands;\\r\\n    string[] public colors;\\r\\n\\r\\n    /// @param _totalSupply maximum number of NFT that is going to be minted.\\r\\n    /// @param _expirationTimestamp the date where the EconNFT will expire (timestamp in seconds).\\r\\n    /// @dev Variables used to make the JPEG are set in order to construct an SVG later on. \\r\\n    constructor(uint256 _totalSupply, uint256 _expirationTimestamp) ERC721(\\\"Econteric IP\\\", \\\"ECIP\\\") Ownable() public {\\r\\n        isMinterLocked = false;\\r\\n        _currentEconNFTId = 0;\\r\\n        currentExpirationTimestamp = _expirationTimestamp;\\r\\n\\r\\n        maxNumberOfPath = 10;\\r\\n        maxNumberOfPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n        colors = [\\\"red\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"black\\\", \\\"white\\\"];\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict a function only when minter is not locked (i.e. isMinterLocked == false).\\r\\n    modifier whenMinterNotLocked() {\\r\\n        require(!isMinterLocked, \\\"Minter is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict a function to be called only by the minter address.\\r\\n    modifier onlyMinter() {\\r\\n        require(msg.sender == minter, \\\"Sender is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a new NFT.\\r\\n    /// @return Return the id of the minted NFT.\\r\\n    /// @dev Create a new NFT and send it to the minter.\\r\\n    function mint() public onlyMinter returns (uint256) {\\r\\n        return _mintTo(minter, _currentEconNFTId++);\\r\\n    }\\r\\n\\r\\n    /// @notice Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0).\\r\\n    /// @param econNFTId the id of the NFT you want to burn.\\r\\n    function burn(uint256 econNFTId) public onlyMinter {\\r\\n        _burn(econNFTId);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint an property right NFT.\\r\\n    /// @param to the address to send to the minted NFT.\\r\\n    /// @param econNFTId the id of the NFT to mint.\\r\\n    function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\\r\\n        seeds[econNFTId] = Seed({\\r\\n            expirationTimestamp: currentExpirationTimestamp\\r\\n        });\\r\\n        _mint(to, econNFTId);\\r\\n\\r\\n        return econNFTId;\\r\\n    }\\r\\n\\r\\n    /// @notice Contain all the informations needed for read this NFT informations.\\r\\n    /// @param tokenId the id of the token you would like to read information from.\\r\\n    /// @return data a 64 based encoded string containing a json object with all the informations.\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        uint256 year;\\r\\n        uint256 month;\\r\\n        uint256 day;\\r\\n        (year, month, day) = timestampToDate(seeds[tokenId].expirationTimestamp); \\r\\n        uint256 randomNumber = block.timestamp / block.number;\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        string memory json = Base64.encode(bytes(abi.encodePacked(\\r\\n            '{ \\\"name\\\": \\\"Economics Design Book\\\", ', \\r\\n            '\\\"description\\\": \\\"Economics and Math of Token Engineering and DeFi\\\"', \\r\\n            ', \\\"expirationDate\\\": \\\"',\\r\\n            uint2str(day),\\r\\n            '/',\\r\\n            uint2str(month),\\r\\n            '/',\\r\\n            uint2str(year),\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            imageURI,\\r\\n            '\\\" }'\\r\\n        )));\\r\\n\\r\\n        string memory data = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /// @notice Transform a uint type into a string type. Used to encode tokenURI().\\r\\n    /// @param _i the uint to encode into string.\\r\\n    /// @return _uintAsString the same number but in a string format.\\r\\n    /// @dev Function taken from https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    /// @notice Takes a timestamp in seconds and convert it into a human readable date.\\r\\n    /// @param timestamp the timestamp you want to convert.\\r\\n    /// @return year the year from your timestamp.\\r\\n    /// @return month the month from your timestamp (between 1 and 12).\\r\\n    /// @return day the day from your timestamp (between 1 and 31).\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate year/month/day from the number of days _days since 1970/01/01.\\r\\n    /// @param _days the number of day between the timestamp you can to convert into a date and 01/01/1970.\\r\\n    /// @return year the year from your timestamp.\\r\\n    /// @return month the month from your timestamp (between 1 and 12).\\r\\n    /// @return day the day from your timestamp (between 1 and 31).\\r\\n    /// @dev Function taken from https://etherscan.io/address/0x78f96b2d5f717fa9ad416957b79d825cc4cce69d#code.\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    /// @notice Generate a full SVG component.\\r\\n    /// @param _randomNumber is a random number used to construct the SVG (the more random the better).\\r\\n    /// @return finalSvg the full SVG component readable by a browser.\\r\\n    /// @dev The random number is used to print random lines and random colors on the final SVG.\\r\\n    function generateSVG(uint256 _randomNumber) public view returns(string memory finalSvg) {\\r\\n        uint256 numberOfPath = (_randomNumber % maxNumberOfPath) + 1;\\r\\n        finalSvg = string(abi.encodePacked('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"', uint2str(size), '\\\" width=\\\"', uint2str(size), '\\\">'));\\r\\n        for(uint i = 0; i < numberOfPath; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSvg = generatePath(newRNG);\\r\\n            finalSvg = string(abi.encodePacked(finalSvg, pathSvg));\\r\\n        }\\r\\n        finalSvg = string(abi.encodePacked(finalSvg, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Generate different paths that creates the SVG lines.\\r\\n    /// @param _randomNumber is a random number from the `generatePath()` function.\\r\\n    /// @return pathSvg a string containing all SVG instructions.\\r\\n    /// @dev Function called by the `generateSVG()` function.\\r\\n    function generatePath(uint256 _randomNumber) public view returns(string memory pathSvg) {\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxNumberOfPathCommands) + 1;\\r\\n        pathSvg = '<path d=\\\"';\\r\\n        for(uint i = 0; i < numberOfPathCommands; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\\r\\n            string memory pathCommand = generatePathCommand(newRNG);\\r\\n            pathSvg = string(abi.encodePacked(pathSvg, pathCommand));\\r\\n        }\\r\\n        string memory color = colors[_randomNumber % colors.length];\\r\\n        pathSvg = string(abi.encodePacked(pathSvg, '\\\" fill=\\\"transparent\\\" stroke=\\\"', color, '\\\"/>'));\\r\\n    }\\r\\n\\r\\n    /// @notice Generate the paths to create the SVG.\\r\\n    /// @param _randomNumber is a random number from the `generatePath()` function.\\r\\n    /// @return pathCommand a string containing the paths to create the SVG.\\r\\n    /// @dev Called by the `generatePath()` function.\\r\\n    function generatePathCommand(uint256 _randomNumber) public view returns(string memory pathCommand) {\\r\\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\\r\\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 2 + 1))) % size;\\r\\n        pathCommand = string(abi.encodePacked(pathCommand, \\\" \\\", uint2str(parameterOne), \\\" \\\", uint2str(parameterTwo), \\\" \\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Takes a SVG and encode it while still keeping it readable by a browser.\\r\\n    /// @param _svg is the SVG component.\\r\\n    /// @return imageURI a string readable by the browser which will display the SVG.\\r\\n    function svgToImageURI(string memory _svg) public pure returns(string memory) {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(_svg))));\\r\\n        string memory imageURI = string(abi.encodePacked(baseURL, svgBase64Encoded));\\r\\n        return imageURI;\\r\\n    }\\r\\n\\r\\n    /// @notice Change the minter address.\\r\\n    /// @param _minter The new minter address.\\r\\n    function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\\r\\n        minter = _minter;\\r\\n    }\\r\\n\\r\\n    /// @notice Lock the minter from calling certain functions.\\r\\n    function lockMinter() external onlyOwner whenMinterNotLocked {\\r\\n        isMinterLocked = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Change the expiration timestamp of the future NFTs about to get minted.\\r\\n    /// @param _newExpirationTimestamp the new timestamp.\\r\\n    function setCurrentExpirationTimestamp(uint256 _newExpirationTimestamp) external onlyOwner {\\r\\n        currentExpirationTimestamp = _newExpirationTimestamp;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// /// @title The Nouns ERC-721 token\\r\\n\\r\\n// pragma solidity ^0.8.6;\\r\\n\\r\\n// import { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import { ERC721Checkpointable } from \\\"./base/ERC721Checkpointable.sol\\\";\\r\\n// import { ERC721 } from \\\"./base/ERC721.sol\\\";\\r\\n// import { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n// contract EconNFT is IERC721, Ownable, ERC721Checkpointable {\\r\\n\\r\\n//     // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \\r\\n//     struct Seed {\\r\\n//         uint256 expirationTimestamp;\\r\\n//     }\\r\\n\\r\\n//     event NounCreated(uint256 indexed tokenId, Seed seed);\\r\\n\\r\\n//     event NounBurned(uint256 indexed tokenId);\\r\\n\\r\\n//     event MinterUpdated(address minter);\\r\\n\\r\\n//     event MinterLocked();\\r\\n\\r\\n//     // An address who has permissions to mint Nouns\\r\\n//     address public minter;\\r\\n\\r\\n//     // Whether the minter can be updated\\r\\n//     bool public isMinterLocked;\\r\\n\\r\\n//     // The noun seeds\\r\\n//     mapping(uint256 => Seed) public seeds;\\r\\n\\r\\n//     // The internal noun ID tracker\\r\\n//     uint256 private _currentEconNFTId;\\r\\n\\r\\n//     // Expiration timestamp currently associated with each EconNFT.\\r\\n//     uint256 public currentExpirationTimestamp;\\r\\n\\r\\n//     // Constant used to translate a timestamp into a date for tokenURI().\\r\\n//     uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n//     // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\\r\\n//     int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n//     /**\\r\\n//      * @notice Require that the minter has not been locked.\\r\\n//      */\\r\\n//     modifier whenMinterNotLocked() {\\r\\n//         require(!isMinterLocked, \\\"Minter is locked\\\");\\r\\n//         _;\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Require that the sender is the minter.\\r\\n//      */\\r\\n//     modifier onlyMinter() {\\r\\n//         require(msg.sender == minter, \\\"Sender is not the minter\\\");\\r\\n//         _;\\r\\n//     }\\r\\n\\r\\n//     constructor(\\r\\n//         uint256 _expirationTimestamp\\r\\n//     ) ERC721(\\\"Econ NFT Property Rights\\\", \\\"EconNFT\\\") Ownable() {\\r\\n//         currentExpirationTimestamp = _expirationTimestamp;\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Mint a Noun to the minter, along with a possible nounders reward\\r\\n//      * Noun. Nounders reward Nouns are minted every 10 Nouns, starting at 0,\\r\\n//      * until 183 nounder Nouns have been minted (5 years w/ 24 hour auctions).\\r\\n//      * @dev Call _mintTo with the to address(es).\\r\\n//      */\\r\\n//     function mint() public onlyMinter returns (uint256) {\\r\\n//         return _mintTo(minter, _currentEconNFTId++);\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Burn a noun.\\r\\n//      */\\r\\n//     function burn(uint256 econNFTId) public onlyMinter {\\r\\n//         _burn(econNFTId);\\r\\n//         emit NounBurned(econNFTId);\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n//      * @dev See {IERC721Metadata-tokenURI}.\\r\\n//      */\\r\\n//     function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n//         require(_exists(tokenId), \\\"NounsToken: URI query for nonexistent token\\\");\\r\\n//         return \\\"work\\\";\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Set the token minter.\\r\\n//      * @dev Only callable by the owner when not locked.\\r\\n//      */\\r\\n//     function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\\r\\n//         minter = _minter;\\r\\n\\r\\n//         emit MinterUpdated(_minter);\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Lock the minter.\\r\\n//      * @dev This cannot be reversed and is only callable by the owner when not locked.\\r\\n//      */\\r\\n//     function lockMinter() external onlyOwner whenMinterNotLocked {\\r\\n//         isMinterLocked = true;\\r\\n\\r\\n//         emit MinterLocked();\\r\\n//     }\\r\\n\\r\\n//     /**\\r\\n//      * @notice Mint a Noun with `nounId` to the provided `to` address.\\r\\n//      */\\r\\n//     function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\\r\\n//         Seed memory seed = seeds[econNFTId] = Seed({ expirationTimestamp: currentExpirationTimestamp });\\r\\n\\r\\n//         _mint(owner(), to, econNFTId);\\r\\n//         emit NounCreated(econNFTId, seed);\\r\\n\\r\\n//         return econNFTId;\\r\\n//     }\\r\\n// }\\r\\n\",\"keccak256\":\"0xb6c3f8c71c2f84d2719a39c985b268cb22b63a639e76d79140ec207734d835ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004fe138038062004fe1833981810160405281019062000037919062000623565b6040518060400160405280600c81526020017f45636f6e746572696320495000000000000000000000000000000000000000008152506040518060400160405280600481526020017f45434950000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000420565b508060019080519060200190620000d492919062000420565b505050620000f7620000eb6200035260201b60201c565b6200035a60201b60201c565b6000600960006101000a81548160ff021916908315150217905550600060088190555080600b81905550600a600c819055506005600d819055506101f4600e8190555060405180604001604052806040518060400160405280600181526020017f4d0000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f4c00000000000000000000000000000000000000000000000000000000000000815250815250600f906002620001cb929190620004b1565b506040518060c001604052806040518060400160405280600381526020017f726564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f626c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f677265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f79656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f626c61636b00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f776869746500000000000000000000000000000000000000000000000000000081525081525060109060066200034992919062000518565b505050620006f8565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200042e9062000674565b90600052602060002090601f0160209004810192826200045257600085556200049e565b82601f106200046d57805160ff19168380011785556200049e565b828001600101855582156200049e579182015b828111156200049d57825182559160200191906001019062000480565b5b509050620004ad91906200057f565b5090565b82805482825590600052602060002090810192821562000505579160200282015b8281111562000504578251829080519060200190620004f392919062000420565b5091602001919060010190620004d2565b5b5090506200051491906200059e565b5090565b8280548282559060005260206000209081019282156200056c579160200282015b828111156200056b5782518290805190602001906200055a92919062000420565b509160200191906001019062000539565b5b5090506200057b91906200059e565b5090565b5b808211156200059a57600081600090555060010162000580565b5090565b5b80821115620005c25760008181620005b89190620005c6565b506001016200059f565b5090565b508054620005d49062000674565b6000825580601f10620005e8575062000609565b601f0160209004906000526020600020908101906200060891906200057f565b5b50565b6000815190506200061d81620006de565b92915050565b600080604083850312156200063d576200063c620006d9565b5b60006200064d858286016200060c565b925050602062000660858286016200060c565b9150509250929050565b6000819050919050565b600060028204905060018216806200068d57607f821691505b60208210811415620006a457620006a3620006aa565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b620006e9816200066a565b8114620006f557600080fd5b50565b6148d980620007086000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063715018a61161011a578063bd11f69d116100ad578063f0503e801161007c578063f0503e8014610615578063f26e54f314610645578063f2c5df9b14610661578063f2fde38b1461067f578063fca3b5aa1461069b57610206565b8063bd11f69d14610555578063c68b49d114610585578063c87b56dd146105b5578063e985e9c5146105e557610206565b8063955968d4116100e9578063955968d4146104cf57806395d89b41146104ff578063a22cb4651461051d578063b88d4fde1461053957610206565b8063715018a61461047f57806376daebe1146104895780638da5cb5b14610493578063949d225d146104b157610206565b806330d871c61161019d57806348e896ab1161016c57806348e896ab146103b3578063568a1844146103d15780636352211e146103ef5780636dcee4ca1461041f57806370a082311461044f57610206565b806330d871c61461031b57806333af59891461034b57806342842e0e1461037b57806342966c681461039757610206565b8063095ea7b3116101d9578063095ea7b3146102a75780631249c58b146102c35780631e688e10146102e157806323b872dd146102ff57610206565b806301ffc9a71461020b57806306fdde031461023b5780630754617214610259578063081812fc14610277575b600080fd5b61022560048036038101906102209190612e9d565b6106b7565b60405161023291906136bc565b60405180910390f35b610243610799565b60405161025091906136d7565b60405180910390f35b61026161082b565b60405161026e9190613655565b60405180910390f35b610291600480360381019061028c9190612f40565b610851565b60405161029e9190613655565b60405180910390f35b6102c160048036038101906102bc9190612e5d565b6108d6565b005b6102cb6109ee565b6040516102d89190613919565b60405180910390f35b6102e9610ac7565b6040516102f691906136bc565b60405180910390f35b61031960048036038101906103149190612d47565b610ada565b005b61033560048036038101906103309190612ef7565b610b3a565b60405161034291906136d7565b60405180910390f35b61036560048036038101906103609190612f40565b610bd3565b60405161037291906136d7565b60405180910390f35b61039560048036038101906103909190612d47565b610d9f565b005b6103b160048036038101906103ac9190612f40565b610dbf565b005b6103bb610e5b565b6040516103c89190613919565b60405180910390f35b6103d9610e61565b6040516103e69190613919565b60405180910390f35b61040960048036038101906104049190612f40565b610e67565b6040516104169190613655565b60405180910390f35b61043960048036038101906104349190612f40565b610f19565b60405161044691906136d7565b60405180910390f35b61046960048036038101906104649190612cda565b61101b565b6040516104769190613919565b60405180910390f35b6104876110d3565b005b61049161115b565b005b61049b611244565b6040516104a89190613655565b60405180910390f35b6104b961126e565b6040516104c69190613919565b60405180910390f35b6104e960048036038101906104e49190612f40565b611274565b6040516104f691906136d7565b60405180910390f35b610507611320565b60405161051491906136d7565b60405180910390f35b61053760048036038101906105329190612e1d565b6113b2565b005b610553600480360381019061054e9190612d9a565b611533565b005b61056f600480360381019061056a9190612f40565b611595565b60405161057c91906136d7565b60405180910390f35b61059f600480360381019061059a9190612f40565b611641565b6040516105ac91906136d7565b60405180910390f35b6105cf60048036038101906105ca9190612f40565b6117da565b6040516105dc91906136d7565b60405180910390f35b6105ff60048036038101906105fa9190612d07565b6118b4565b60405161060c91906136bc565b60405180910390f35b61062f600480360381019061062a9190612f40565b611948565b60405161063c9190613919565b60405180910390f35b61065f600480360381019061065a9190612f40565b611966565b005b6106696119ec565b6040516106769190613919565b60405180910390f35b61069960048036038101906106949190612cda565b6119f2565b005b6106b560048036038101906106b09190612cda565b611aea565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061078257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610792575061079182611bfa565b5b9050919050565b6060600080546107a890613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546107d490613ee9565b80156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061085c82611c64565b61089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290613879565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108e182610e67565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610949906138d9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610971611cd0565b73ffffffffffffffffffffffffffffffffffffffff1614806109a0575061099f8161099a611cd0565b6118b4565b5b6109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d6906137f9565b60405180910390fd5b6109e98383611cd8565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7790613739565b60405180910390fd5b610ac2600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660086000815480929190610ab990613f4c565b91905055611d91565b905090565b600960009054906101000a900460ff1681565b610aeb610ae5611cd0565b82611dd7565b610b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b21906138f9565b60405180910390fd5b610b35838383611eb5565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610ba084604051602001610b8c919061347a565b604051602081830303815290604052612111565b905060008282604051602001610bb7929190613491565b6040516020818303038152906040529050809350505050919050565b606060006001600d5484610be79190613f95565b610bf19190613abb565b90506040518060400160405280600981526020017f3c7061746820643d220000000000000000000000000000000000000000000000815250915060005b81811015610cb95760008482600e54610c479190613abb565b604051602001610c58929190613934565b6040516020818303038152906040528051906020012060001c90506000610c7e82611641565b90508481604051602001610c93929190613491565b604051602081830303815290604052945050508080610cb190613f4c565b915050610c2e565b5060006010808054905085610cce9190613f95565b81548110610cdf57610cde614053565b5b906000526020600020018054610cf490613ee9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2090613ee9565b8015610d6d5780601f10610d4257610100808354040283529160200191610d6d565b820191906000526020600020905b815481529060010190602001808311610d5057829003601f168201915b505050505090508281604051602001610d87929190613507565b60405160208183030381529060405292505050919050565b610dba83838360405180602001604052806000815250611533565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4690613739565b60405180910390fd5b610e588161228a565b50565b600d5481565b600c5481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790613839565b60405180910390fd5b80915050919050565b606060006001600c5484610f2d9190613f95565b610f379190613abb565b9050610f44600e5461239b565b610f4f600e5461239b565b604051602001610f60929190613563565b604051602081830303815290604052915060005b81811015610ff25760008482604051602001610f91929190613934565b6040516020818303038152906040528051906020012060001c90506000610fb782610bd3565b90508481604051602001610fcc929190613491565b604051602081830303815290604052945050508080610fea90613f4c565b915050610f74565b50816040516020016110049190613541565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390613819565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110db611cd0565b73ffffffffffffffffffffffffffffffffffffffff166110f9611244565b73ffffffffffffffffffffffffffffffffffffffff161461114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690613899565b60405180910390fd5b6111596000612524565b565b611163611cd0565b73ffffffffffffffffffffffffffffffffffffffff16611181611244565b73ffffffffffffffffffffffffffffffffffffffff16146111d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ce90613899565b60405180910390fd5b600960009054906101000a900460ff1615611227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121e906137d9565b60405180910390fd5b6001600960006101000a81548160ff021916908315150217905550565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600e5481565b600f818154811061128457600080fd5b90600052602060002001600091509050805461129f90613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546112cb90613ee9565b80156113185780601f106112ed57610100808354040283529160200191611318565b820191906000526020600020905b8154815290600101906020018083116112fb57829003601f168201915b505050505081565b60606001805461132f90613ee9565b80601f016020809104026020016040519081016040528092919081815260200182805461135b90613ee9565b80156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b5050505050905090565b6113ba611cd0565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90613799565b60405180910390fd5b8060056000611435611cd0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166114e2611cd0565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161152791906136bc565b60405180910390a35050565b61154461153e611cd0565b83611dd7565b611583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157a906138f9565b60405180910390fd5b61158f848484846125ea565b50505050565b601081815481106115a557600080fd5b9060005260206000200160009150905080546115c090613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546115ec90613ee9565b80156116395780601f1061160e57610100808354040283529160200191611639565b820191906000526020600020905b81548152906001019060200180831161161c57829003601f168201915b505050505081565b6060600f8080549050836116559190613f95565b8154811061166657611665614053565b5b90600052602060002001805461167b90613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546116a790613ee9565b80156116f45780601f106116c9576101008083540402835291602001916116f4565b820191906000526020600020905b8154815290600101906020018083116116d757829003601f168201915b505050505090506000600e54836002600e546117109190613cfa565b604051602001611721929190613934565b6040516020818303038152906040528051906020012060001c6117449190613f95565b90506000600e548460016002600e5461175d9190613cfa565b6117679190613abb565b604051602001611778929190613934565b6040516020818303038152906040528051906020012060001c61179b9190613f95565b9050826117a78361239b565b6117b08361239b565b6040516020016117c2939291906134b5565b60405160208183030381529060405292505050919050565b60606000806000611800600a600087815260200190815260200160002060000154612646565b8093508194508295505050506000434261181a9190613bb2565b9050600061182782610f19565b9050600061183482610b3a565b9050600061187e6118448661239b565b61184d8861239b565b6118568a61239b565b8560405160200161186a94939291906135ca565b604051602081830303815290604052612111565b905060008160405160200161189391906135a8565b60405160208183030381529060405290508098505050505050505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a6020528060005260406000206000915090508060000154905081565b61196e611cd0565b73ffffffffffffffffffffffffffffffffffffffff1661198c611244565b73ffffffffffffffffffffffffffffffffffffffff16146119e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d990613899565b60405180910390fd5b80600b8190555050565b600b5481565b6119fa611cd0565b73ffffffffffffffffffffffffffffffffffffffff16611a18611244565b73ffffffffffffffffffffffffffffffffffffffff1614611a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6590613899565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad590613719565b60405180910390fd5b611ae781612524565b50565b611af2611cd0565b73ffffffffffffffffffffffffffffffffffffffff16611b10611244565b73ffffffffffffffffffffffffffffffffffffffff1614611b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5d90613899565b60405180910390fd5b600960009054906101000a900460ff1615611bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bad906137d9565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d4b83610e67565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006040518060200160405280600b54815250600a600084815260200190815260200160002060008201518160000155905050611dce8383612675565b81905092915050565b6000611de282611c64565b611e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e18906137b9565b60405180910390fd5b6000611e2c83610e67565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e9b57508373ffffffffffffffffffffffffffffffffffffffff16611e8384610851565b73ffffffffffffffffffffffffffffffffffffffff16145b80611eac5750611eab81856118b4565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ed582610e67565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f22906138b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613779565b60405180910390fd5b611fa6838383612843565b611fb1600082611cd8565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120019190613de8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120589190613abb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b606060008251141561213457604051806020016040528060008152509050612285565b600060405180606001604052806040815260200161486460409139905060006003600285516121639190613abb565b61216d9190613bb2565b60046121799190613cfa565b9050600060208261218a9190613abb565b67ffffffffffffffff8111156121a3576121a2614082565b5b6040519080825280601f01601f1916602001820160405280156121d55781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612244576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253600182019150506121e9565b60038951066001811461225e576002811461226e57612279565b613d3d60f01b6002830352612279565b603d60f81b60018303525b50505050508093505050505b919050565b600061229582610e67565b90506122a381600084612843565b6122ae600083611cd8565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122fe9190613de8565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b606060008214156123e3576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061251f565b600082905060005b600082146124155780806123fe90613f4c565b915050600a8261240e9190613bb2565b91506123eb565b60008167ffffffffffffffff81111561243157612430614082565b5b6040519080825280601f01601f1916602001820160405280156124635781602001600182028036833780820191505090505b50905060008290505b60008614612517576001816124819190613de8565b90506000600a80886124939190613bb2565b61249d9190613cfa565b876124a89190613de8565b60306124b49190613b11565b905060008160f81b9050808484815181106124d2576124d1614053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8861250e9190613bb2565b9750505061246c565b819450505050505b919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6125f5848484611eb5565b61260184848484612848565b612640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612637906136f9565b60405180910390fd5b50505050565b6000806000612662620151808561265d9190613bb2565b6129df565b8093508194508295505050509193909250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156126e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126dc90613859565b60405180910390fd5b6126ee81611c64565b1561272e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272590613759565b60405180910390fd5b61273a60008383612843565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461278a9190613abb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b60006128698473ffffffffffffffffffffffffffffffffffffffff16612b7e565b156129d2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612892611cd0565b8786866040518563ffffffff1660e01b81526004016128b49493929190613670565b602060405180830381600087803b1580156128ce57600080fd5b505af19250505080156128ff57506040513d601f19601f820116820180604052508101906128fc9190612eca565b60015b612982573d806000811461292f576040519150601f19603f3d011682016040523d82523d6000602084013e612934565b606091505b5060008151141561297a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612971906136f9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129d7565b600190505b949350505050565b600080600080849050600062253d8c62010bd9836129fd9190613a27565b612a079190613a27565b9050600062023ab1826004612a1c9190613be3565b612a269190613b48565b9050600460038262023ab1612a3b9190613be3565b612a459190613a27565b612a4f9190613b48565b82612a5a9190613d54565b9150600062164b09600184612a6f9190613a27565b610fa0612a7c9190613be3565b612a869190613b48565b9050601f6004826105b5612a9a9190613be3565b612aa49190613b48565b84612aaf9190613d54565b612ab99190613a27565b9250600061098f846050612acd9190613be3565b612ad79190613b48565b9050600060508261098f612aeb9190613be3565b612af59190613b48565b85612b009190613d54565b9050600b82612b0f9190613b48565b945084600c612b1e9190613be3565b600283612b2b9190613a27565b612b359190613d54565b91508483603186612b469190613d54565b6064612b529190613be3565b612b5c9190613a27565b612b669190613a27565b92508298508197508096505050505050509193909250565b600080823b905060008111915050919050565b6000612ba4612b9f84613982565b61395d565b905082815260208101848484011115612bc057612bbf6140b6565b5b612bcb848285613ea7565b509392505050565b6000612be6612be1846139b3565b61395d565b905082815260208101848484011115612c0257612c016140b6565b5b612c0d848285613ea7565b509392505050565b600081359050612c2481614807565b92915050565b600081359050612c398161481e565b92915050565b600081359050612c4e81614835565b92915050565b600081519050612c6381614835565b92915050565b600082601f830112612c7e57612c7d6140b1565b5b8135612c8e848260208601612b91565b91505092915050565b600082601f830112612cac57612cab6140b1565b5b8135612cbc848260208601612bd3565b91505092915050565b600081359050612cd48161484c565b92915050565b600060208284031215612cf057612cef6140c0565b5b6000612cfe84828501612c15565b91505092915050565b60008060408385031215612d1e57612d1d6140c0565b5b6000612d2c85828601612c15565b9250506020612d3d85828601612c15565b9150509250929050565b600080600060608486031215612d6057612d5f6140c0565b5b6000612d6e86828701612c15565b9350506020612d7f86828701612c15565b9250506040612d9086828701612cc5565b9150509250925092565b60008060008060808587031215612db457612db36140c0565b5b6000612dc287828801612c15565b9450506020612dd387828801612c15565b9350506040612de487828801612cc5565b925050606085013567ffffffffffffffff811115612e0557612e046140bb565b5b612e1187828801612c69565b91505092959194509250565b60008060408385031215612e3457612e336140c0565b5b6000612e4285828601612c15565b9250506020612e5385828601612c2a565b9150509250929050565b60008060408385031215612e7457612e736140c0565b5b6000612e8285828601612c15565b9250506020612e9385828601612cc5565b9150509250929050565b600060208284031215612eb357612eb26140c0565b5b6000612ec184828501612c3f565b91505092915050565b600060208284031215612ee057612edf6140c0565b5b6000612eee84828501612c54565b91505092915050565b600060208284031215612f0d57612f0c6140c0565b5b600082013567ffffffffffffffff811115612f2b57612f2a6140bb565b5b612f3784828501612c97565b91505092915050565b600060208284031215612f5657612f556140c0565b5b6000612f6484828501612cc5565b91505092915050565b612f7681613e1c565b82525050565b612f8581613e2e565b82525050565b6000612f96826139e4565b612fa081856139fa565b9350612fb0818560208601613eb6565b612fb9816140c5565b840191505092915050565b6000612fcf826139ef565b612fd98185613a0b565b9350612fe9818560208601613eb6565b612ff2816140c5565b840191505092915050565b6000613008826139ef565b6130128185613a1c565b9350613022818560208601613eb6565b80840191505092915050565b600061303b603283613a0b565b9150613046826140d6565b604082019050919050565b600061305e602683613a0b565b915061306982614125565b604082019050919050565b6000613081601883613a0b565b915061308c82614174565b602082019050919050565b60006130a4601c83613a0b565b91506130af8261419d565b602082019050919050565b60006130c7602483613a0b565b91506130d2826141c6565b604082019050919050565b60006130ea601983613a0b565b91506130f582614215565b602082019050919050565b600061310d600383613a1c565b91506131188261423e565b600382019050919050565b6000613130602c83613a0b565b915061313b82614267565b604082019050919050565b6000613153601083613a0b565b915061315e826142b6565b602082019050919050565b6000613176600183613a1c565b9150613181826142df565b600182019050919050565b6000613199603883613a0b565b91506131a482614308565b604082019050919050565b60006131bc602a83613a0b565b91506131c782614357565b604082019050919050565b60006131df602983613a0b565b91506131ea826143a6565b604082019050919050565b6000613202601583613a1c565b915061320d826143f5565b601582019050919050565b6000613225602083613a0b565b91506132308261441e565b602082019050919050565b6000613248600d83613a1c565b915061325382614447565b600d82019050919050565b600061326b602c83613a0b565b915061327682614470565b604082019050919050565b600061328e602083613a0b565b9150613299826144bf565b602082019050919050565b60006132b1602983613a0b565b91506132bc826144e8565b604082019050919050565b60006132d4603083613a1c565b91506132df82614537565b603082019050919050565b60006132f7600383613a1c565b915061330282614586565b600382019050919050565b600061331a602183613a0b565b9150613325826145af565b604082019050919050565b600061333d601d83613a1c565b9150613348826145fe565b601d82019050919050565b6000613360601d83613a1c565b915061336b82614627565b601d82019050919050565b6000613383603183613a0b565b915061338e82614650565b604082019050919050565b60006133a6602383613a1c565b91506133b18261469f565b602382019050919050565b60006133c9600283613a1c565b91506133d4826146ee565b600282019050919050565b60006133ec604183613a1c565b91506133f782614717565b604182019050919050565b600061340f600683613a1c565b915061341a8261478c565b600682019050919050565b6000613432600983613a1c565b915061343d826147b5565b600982019050919050565b6000613455600183613a1c565b9150613460826147de565b600182019050919050565b61347481613e90565b82525050565b60006134868284612ffd565b915081905092915050565b600061349d8285612ffd565b91506134a98284612ffd565b91508190509392505050565b60006134c18286612ffd565b91506134cc82613169565b91506134d88285612ffd565b91506134e382613169565b91506134ef8284612ffd565b91506134fa82613169565b9150819050949350505050565b60006135138285612ffd565b915061351e82613330565b915061352a8284612ffd565b9150613535826132ea565b91508190509392505050565b600061354d8284612ffd565b915061355882613402565b915081905092915050565b600061356e826132c7565b915061357a8285612ffd565b915061358582613425565b91506135918284612ffd565b915061359c826133bc565b91508190509392505050565b60006135b382613353565b91506135bf8284612ffd565b915081905092915050565b60006135d582613399565b91506135e0826133df565b91506135eb826131f5565b91506135f78287612ffd565b915061360282613448565b915061360e8286612ffd565b915061361982613448565b91506136258285612ffd565b91506136308261323b565b915061363c8284612ffd565b915061364782613100565b915081905095945050505050565b600060208201905061366a6000830184612f6d565b92915050565b60006080820190506136856000830187612f6d565b6136926020830186612f6d565b61369f604083018561346b565b81810360608301526136b18184612f8b565b905095945050505050565b60006020820190506136d16000830184612f7c565b92915050565b600060208201905081810360008301526136f18184612fc4565b905092915050565b600060208201905081810360008301526137128161302e565b9050919050565b6000602082019050818103600083015261373281613051565b9050919050565b6000602082019050818103600083015261375281613074565b9050919050565b6000602082019050818103600083015261377281613097565b9050919050565b60006020820190508181036000830152613792816130ba565b9050919050565b600060208201905081810360008301526137b2816130dd565b9050919050565b600060208201905081810360008301526137d281613123565b9050919050565b600060208201905081810360008301526137f281613146565b9050919050565b600060208201905081810360008301526138128161318c565b9050919050565b60006020820190508181036000830152613832816131af565b9050919050565b60006020820190508181036000830152613852816131d2565b9050919050565b6000602082019050818103600083015261387281613218565b9050919050565b600060208201905081810360008301526138928161325e565b9050919050565b600060208201905081810360008301526138b281613281565b9050919050565b600060208201905081810360008301526138d2816132a4565b9050919050565b600060208201905081810360008301526138f28161330d565b9050919050565b6000602082019050818103600083015261391281613376565b9050919050565b600060208201905061392e600083018461346b565b92915050565b6000604082019050613949600083018561346b565b613956602083018461346b565b9392505050565b6000613967613978565b90506139738282613f1b565b919050565b6000604051905090565b600067ffffffffffffffff82111561399d5761399c614082565b5b6139a6826140c5565b9050602081019050919050565b600067ffffffffffffffff8211156139ce576139cd614082565b5b6139d7826140c5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a3282613e66565b9150613a3d83613e66565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615613a7857613a77613fc6565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615613ab057613aaf613fc6565b5b828201905092915050565b6000613ac682613e90565b9150613ad183613e90565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b0657613b05613fc6565b5b828201905092915050565b6000613b1c82613e9a565b9150613b2783613e9a565b92508260ff03821115613b3d57613b3c613fc6565b5b828201905092915050565b6000613b5382613e66565b9150613b5e83613e66565b925082613b6e57613b6d613ff5565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615613ba757613ba6613fc6565b5b828205905092915050565b6000613bbd82613e90565b9150613bc883613e90565b925082613bd857613bd7613ff5565b5b828204905092915050565b6000613bee82613e66565b9150613bf983613e66565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615613c3857613c37613fc6565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615613c7557613c74613fc6565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615613cb257613cb1613fc6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615613cef57613cee613fc6565b5b828202905092915050565b6000613d0582613e90565b9150613d1083613e90565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d4957613d48613fc6565b5b828202905092915050565b6000613d5f82613e66565b9150613d6a83613e66565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613da557613da4613fc6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613ddd57613ddc613fc6565b5b828203905092915050565b6000613df382613e90565b9150613dfe83613e90565b925082821015613e1157613e10613fc6565b5b828203905092915050565b6000613e2782613e70565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613ed4578082015181840152602081019050613eb9565b83811115613ee3576000848401525b50505050565b60006002820490506001821680613f0157607f821691505b60208210811415613f1557613f14614024565b5b50919050565b613f24826140c5565b810181811067ffffffffffffffff82111715613f4357613f42614082565b5b80604052505050565b6000613f5782613e90565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f8a57613f89613fc6565b5b600182019050919050565b6000613fa082613e90565b9150613fab83613e90565b925082613fbb57613fba613ff5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206973206e6f7420746865206d696e7465720000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f22207d0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4d696e746572206973206c6f636b656400000000000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f2c202265787069726174696f6e44617465223a20220000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766722206865696768743d2200000000000000000000000000000000602082015250565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f222066696c6c3d227472616e73706172656e7422207374726f6b653d22000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f7b20226e616d65223a202245636f6e6f6d6963732044657369676e20426f6f6b60008201527f222c200000000000000000000000000000000000000000000000000000000000602082015250565b7f223e000000000000000000000000000000000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202245636f6e6f6d69637320616e64204d6160008201527f7468206f6620546f6b656e20456e67696e656572696e6720616e64204465466960208201527f2200000000000000000000000000000000000000000000000000000000000000604082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b61481081613e1c565b811461481b57600080fd5b50565b61482781613e2e565b811461483257600080fd5b50565b61483e81613e3a565b811461484957600080fd5b50565b61485581613e90565b811461486057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122045be6d8db645570113a713064e1d849ae695029504433222db6f181e091eb05364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c8063715018a61161011a578063bd11f69d116100ad578063f0503e801161007c578063f0503e8014610615578063f26e54f314610645578063f2c5df9b14610661578063f2fde38b1461067f578063fca3b5aa1461069b57610206565b8063bd11f69d14610555578063c68b49d114610585578063c87b56dd146105b5578063e985e9c5146105e557610206565b8063955968d4116100e9578063955968d4146104cf57806395d89b41146104ff578063a22cb4651461051d578063b88d4fde1461053957610206565b8063715018a61461047f57806376daebe1146104895780638da5cb5b14610493578063949d225d146104b157610206565b806330d871c61161019d57806348e896ab1161016c57806348e896ab146103b3578063568a1844146103d15780636352211e146103ef5780636dcee4ca1461041f57806370a082311461044f57610206565b806330d871c61461031b57806333af59891461034b57806342842e0e1461037b57806342966c681461039757610206565b8063095ea7b3116101d9578063095ea7b3146102a75780631249c58b146102c35780631e688e10146102e157806323b872dd146102ff57610206565b806301ffc9a71461020b57806306fdde031461023b5780630754617214610259578063081812fc14610277575b600080fd5b61022560048036038101906102209190612e9d565b6106b7565b60405161023291906136bc565b60405180910390f35b610243610799565b60405161025091906136d7565b60405180910390f35b61026161082b565b60405161026e9190613655565b60405180910390f35b610291600480360381019061028c9190612f40565b610851565b60405161029e9190613655565b60405180910390f35b6102c160048036038101906102bc9190612e5d565b6108d6565b005b6102cb6109ee565b6040516102d89190613919565b60405180910390f35b6102e9610ac7565b6040516102f691906136bc565b60405180910390f35b61031960048036038101906103149190612d47565b610ada565b005b61033560048036038101906103309190612ef7565b610b3a565b60405161034291906136d7565b60405180910390f35b61036560048036038101906103609190612f40565b610bd3565b60405161037291906136d7565b60405180910390f35b61039560048036038101906103909190612d47565b610d9f565b005b6103b160048036038101906103ac9190612f40565b610dbf565b005b6103bb610e5b565b6040516103c89190613919565b60405180910390f35b6103d9610e61565b6040516103e69190613919565b60405180910390f35b61040960048036038101906104049190612f40565b610e67565b6040516104169190613655565b60405180910390f35b61043960048036038101906104349190612f40565b610f19565b60405161044691906136d7565b60405180910390f35b61046960048036038101906104649190612cda565b61101b565b6040516104769190613919565b60405180910390f35b6104876110d3565b005b61049161115b565b005b61049b611244565b6040516104a89190613655565b60405180910390f35b6104b961126e565b6040516104c69190613919565b60405180910390f35b6104e960048036038101906104e49190612f40565b611274565b6040516104f691906136d7565b60405180910390f35b610507611320565b60405161051491906136d7565b60405180910390f35b61053760048036038101906105329190612e1d565b6113b2565b005b610553600480360381019061054e9190612d9a565b611533565b005b61056f600480360381019061056a9190612f40565b611595565b60405161057c91906136d7565b60405180910390f35b61059f600480360381019061059a9190612f40565b611641565b6040516105ac91906136d7565b60405180910390f35b6105cf60048036038101906105ca9190612f40565b6117da565b6040516105dc91906136d7565b60405180910390f35b6105ff60048036038101906105fa9190612d07565b6118b4565b60405161060c91906136bc565b60405180910390f35b61062f600480360381019061062a9190612f40565b611948565b60405161063c9190613919565b60405180910390f35b61065f600480360381019061065a9190612f40565b611966565b005b6106696119ec565b6040516106769190613919565b60405180910390f35b61069960048036038101906106949190612cda565b6119f2565b005b6106b560048036038101906106b09190612cda565b611aea565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061078257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610792575061079182611bfa565b5b9050919050565b6060600080546107a890613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546107d490613ee9565b80156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061085c82611c64565b61089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290613879565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108e182610e67565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610949906138d9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610971611cd0565b73ffffffffffffffffffffffffffffffffffffffff1614806109a0575061099f8161099a611cd0565b6118b4565b5b6109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d6906137f9565b60405180910390fd5b6109e98383611cd8565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7790613739565b60405180910390fd5b610ac2600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660086000815480929190610ab990613f4c565b91905055611d91565b905090565b600960009054906101000a900460ff1681565b610aeb610ae5611cd0565b82611dd7565b610b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b21906138f9565b60405180910390fd5b610b35838383611eb5565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610ba084604051602001610b8c919061347a565b604051602081830303815290604052612111565b905060008282604051602001610bb7929190613491565b6040516020818303038152906040529050809350505050919050565b606060006001600d5484610be79190613f95565b610bf19190613abb565b90506040518060400160405280600981526020017f3c7061746820643d220000000000000000000000000000000000000000000000815250915060005b81811015610cb95760008482600e54610c479190613abb565b604051602001610c58929190613934565b6040516020818303038152906040528051906020012060001c90506000610c7e82611641565b90508481604051602001610c93929190613491565b604051602081830303815290604052945050508080610cb190613f4c565b915050610c2e565b5060006010808054905085610cce9190613f95565b81548110610cdf57610cde614053565b5b906000526020600020018054610cf490613ee9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2090613ee9565b8015610d6d5780601f10610d4257610100808354040283529160200191610d6d565b820191906000526020600020905b815481529060010190602001808311610d5057829003601f168201915b505050505090508281604051602001610d87929190613507565b60405160208183030381529060405292505050919050565b610dba83838360405180602001604052806000815250611533565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4690613739565b60405180910390fd5b610e588161228a565b50565b600d5481565b600c5481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790613839565b60405180910390fd5b80915050919050565b606060006001600c5484610f2d9190613f95565b610f379190613abb565b9050610f44600e5461239b565b610f4f600e5461239b565b604051602001610f60929190613563565b604051602081830303815290604052915060005b81811015610ff25760008482604051602001610f91929190613934565b6040516020818303038152906040528051906020012060001c90506000610fb782610bd3565b90508481604051602001610fcc929190613491565b604051602081830303815290604052945050508080610fea90613f4c565b915050610f74565b50816040516020016110049190613541565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390613819565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110db611cd0565b73ffffffffffffffffffffffffffffffffffffffff166110f9611244565b73ffffffffffffffffffffffffffffffffffffffff161461114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690613899565b60405180910390fd5b6111596000612524565b565b611163611cd0565b73ffffffffffffffffffffffffffffffffffffffff16611181611244565b73ffffffffffffffffffffffffffffffffffffffff16146111d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ce90613899565b60405180910390fd5b600960009054906101000a900460ff1615611227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121e906137d9565b60405180910390fd5b6001600960006101000a81548160ff021916908315150217905550565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600e5481565b600f818154811061128457600080fd5b90600052602060002001600091509050805461129f90613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546112cb90613ee9565b80156113185780601f106112ed57610100808354040283529160200191611318565b820191906000526020600020905b8154815290600101906020018083116112fb57829003601f168201915b505050505081565b60606001805461132f90613ee9565b80601f016020809104026020016040519081016040528092919081815260200182805461135b90613ee9565b80156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b5050505050905090565b6113ba611cd0565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90613799565b60405180910390fd5b8060056000611435611cd0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166114e2611cd0565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161152791906136bc565b60405180910390a35050565b61154461153e611cd0565b83611dd7565b611583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157a906138f9565b60405180910390fd5b61158f848484846125ea565b50505050565b601081815481106115a557600080fd5b9060005260206000200160009150905080546115c090613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546115ec90613ee9565b80156116395780601f1061160e57610100808354040283529160200191611639565b820191906000526020600020905b81548152906001019060200180831161161c57829003601f168201915b505050505081565b6060600f8080549050836116559190613f95565b8154811061166657611665614053565b5b90600052602060002001805461167b90613ee9565b80601f01602080910402602001604051908101604052809291908181526020018280546116a790613ee9565b80156116f45780601f106116c9576101008083540402835291602001916116f4565b820191906000526020600020905b8154815290600101906020018083116116d757829003601f168201915b505050505090506000600e54836002600e546117109190613cfa565b604051602001611721929190613934565b6040516020818303038152906040528051906020012060001c6117449190613f95565b90506000600e548460016002600e5461175d9190613cfa565b6117679190613abb565b604051602001611778929190613934565b6040516020818303038152906040528051906020012060001c61179b9190613f95565b9050826117a78361239b565b6117b08361239b565b6040516020016117c2939291906134b5565b60405160208183030381529060405292505050919050565b60606000806000611800600a600087815260200190815260200160002060000154612646565b8093508194508295505050506000434261181a9190613bb2565b9050600061182782610f19565b9050600061183482610b3a565b9050600061187e6118448661239b565b61184d8861239b565b6118568a61239b565b8560405160200161186a94939291906135ca565b604051602081830303815290604052612111565b905060008160405160200161189391906135a8565b60405160208183030381529060405290508098505050505050505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a6020528060005260406000206000915090508060000154905081565b61196e611cd0565b73ffffffffffffffffffffffffffffffffffffffff1661198c611244565b73ffffffffffffffffffffffffffffffffffffffff16146119e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d990613899565b60405180910390fd5b80600b8190555050565b600b5481565b6119fa611cd0565b73ffffffffffffffffffffffffffffffffffffffff16611a18611244565b73ffffffffffffffffffffffffffffffffffffffff1614611a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6590613899565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad590613719565b60405180910390fd5b611ae781612524565b50565b611af2611cd0565b73ffffffffffffffffffffffffffffffffffffffff16611b10611244565b73ffffffffffffffffffffffffffffffffffffffff1614611b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5d90613899565b60405180910390fd5b600960009054906101000a900460ff1615611bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bad906137d9565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d4b83610e67565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006040518060200160405280600b54815250600a600084815260200190815260200160002060008201518160000155905050611dce8383612675565b81905092915050565b6000611de282611c64565b611e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e18906137b9565b60405180910390fd5b6000611e2c83610e67565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e9b57508373ffffffffffffffffffffffffffffffffffffffff16611e8384610851565b73ffffffffffffffffffffffffffffffffffffffff16145b80611eac5750611eab81856118b4565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ed582610e67565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f22906138b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613779565b60405180910390fd5b611fa6838383612843565b611fb1600082611cd8565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120019190613de8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120589190613abb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b606060008251141561213457604051806020016040528060008152509050612285565b600060405180606001604052806040815260200161486460409139905060006003600285516121639190613abb565b61216d9190613bb2565b60046121799190613cfa565b9050600060208261218a9190613abb565b67ffffffffffffffff8111156121a3576121a2614082565b5b6040519080825280601f01601f1916602001820160405280156121d55781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612244576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253600182019150506121e9565b60038951066001811461225e576002811461226e57612279565b613d3d60f01b6002830352612279565b603d60f81b60018303525b50505050508093505050505b919050565b600061229582610e67565b90506122a381600084612843565b6122ae600083611cd8565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122fe9190613de8565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b606060008214156123e3576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061251f565b600082905060005b600082146124155780806123fe90613f4c565b915050600a8261240e9190613bb2565b91506123eb565b60008167ffffffffffffffff81111561243157612430614082565b5b6040519080825280601f01601f1916602001820160405280156124635781602001600182028036833780820191505090505b50905060008290505b60008614612517576001816124819190613de8565b90506000600a80886124939190613bb2565b61249d9190613cfa565b876124a89190613de8565b60306124b49190613b11565b905060008160f81b9050808484815181106124d2576124d1614053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8861250e9190613bb2565b9750505061246c565b819450505050505b919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6125f5848484611eb5565b61260184848484612848565b612640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612637906136f9565b60405180910390fd5b50505050565b6000806000612662620151808561265d9190613bb2565b6129df565b8093508194508295505050509193909250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156126e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126dc90613859565b60405180910390fd5b6126ee81611c64565b1561272e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272590613759565b60405180910390fd5b61273a60008383612843565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461278a9190613abb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b60006128698473ffffffffffffffffffffffffffffffffffffffff16612b7e565b156129d2578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612892611cd0565b8786866040518563ffffffff1660e01b81526004016128b49493929190613670565b602060405180830381600087803b1580156128ce57600080fd5b505af19250505080156128ff57506040513d601f19601f820116820180604052508101906128fc9190612eca565b60015b612982573d806000811461292f576040519150601f19603f3d011682016040523d82523d6000602084013e612934565b606091505b5060008151141561297a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612971906136f9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129d7565b600190505b949350505050565b600080600080849050600062253d8c62010bd9836129fd9190613a27565b612a079190613a27565b9050600062023ab1826004612a1c9190613be3565b612a269190613b48565b9050600460038262023ab1612a3b9190613be3565b612a459190613a27565b612a4f9190613b48565b82612a5a9190613d54565b9150600062164b09600184612a6f9190613a27565b610fa0612a7c9190613be3565b612a869190613b48565b9050601f6004826105b5612a9a9190613be3565b612aa49190613b48565b84612aaf9190613d54565b612ab99190613a27565b9250600061098f846050612acd9190613be3565b612ad79190613b48565b9050600060508261098f612aeb9190613be3565b612af59190613b48565b85612b009190613d54565b9050600b82612b0f9190613b48565b945084600c612b1e9190613be3565b600283612b2b9190613a27565b612b359190613d54565b91508483603186612b469190613d54565b6064612b529190613be3565b612b5c9190613a27565b612b669190613a27565b92508298508197508096505050505050509193909250565b600080823b905060008111915050919050565b6000612ba4612b9f84613982565b61395d565b905082815260208101848484011115612bc057612bbf6140b6565b5b612bcb848285613ea7565b509392505050565b6000612be6612be1846139b3565b61395d565b905082815260208101848484011115612c0257612c016140b6565b5b612c0d848285613ea7565b509392505050565b600081359050612c2481614807565b92915050565b600081359050612c398161481e565b92915050565b600081359050612c4e81614835565b92915050565b600081519050612c6381614835565b92915050565b600082601f830112612c7e57612c7d6140b1565b5b8135612c8e848260208601612b91565b91505092915050565b600082601f830112612cac57612cab6140b1565b5b8135612cbc848260208601612bd3565b91505092915050565b600081359050612cd48161484c565b92915050565b600060208284031215612cf057612cef6140c0565b5b6000612cfe84828501612c15565b91505092915050565b60008060408385031215612d1e57612d1d6140c0565b5b6000612d2c85828601612c15565b9250506020612d3d85828601612c15565b9150509250929050565b600080600060608486031215612d6057612d5f6140c0565b5b6000612d6e86828701612c15565b9350506020612d7f86828701612c15565b9250506040612d9086828701612cc5565b9150509250925092565b60008060008060808587031215612db457612db36140c0565b5b6000612dc287828801612c15565b9450506020612dd387828801612c15565b9350506040612de487828801612cc5565b925050606085013567ffffffffffffffff811115612e0557612e046140bb565b5b612e1187828801612c69565b91505092959194509250565b60008060408385031215612e3457612e336140c0565b5b6000612e4285828601612c15565b9250506020612e5385828601612c2a565b9150509250929050565b60008060408385031215612e7457612e736140c0565b5b6000612e8285828601612c15565b9250506020612e9385828601612cc5565b9150509250929050565b600060208284031215612eb357612eb26140c0565b5b6000612ec184828501612c3f565b91505092915050565b600060208284031215612ee057612edf6140c0565b5b6000612eee84828501612c54565b91505092915050565b600060208284031215612f0d57612f0c6140c0565b5b600082013567ffffffffffffffff811115612f2b57612f2a6140bb565b5b612f3784828501612c97565b91505092915050565b600060208284031215612f5657612f556140c0565b5b6000612f6484828501612cc5565b91505092915050565b612f7681613e1c565b82525050565b612f8581613e2e565b82525050565b6000612f96826139e4565b612fa081856139fa565b9350612fb0818560208601613eb6565b612fb9816140c5565b840191505092915050565b6000612fcf826139ef565b612fd98185613a0b565b9350612fe9818560208601613eb6565b612ff2816140c5565b840191505092915050565b6000613008826139ef565b6130128185613a1c565b9350613022818560208601613eb6565b80840191505092915050565b600061303b603283613a0b565b9150613046826140d6565b604082019050919050565b600061305e602683613a0b565b915061306982614125565b604082019050919050565b6000613081601883613a0b565b915061308c82614174565b602082019050919050565b60006130a4601c83613a0b565b91506130af8261419d565b602082019050919050565b60006130c7602483613a0b565b91506130d2826141c6565b604082019050919050565b60006130ea601983613a0b565b91506130f582614215565b602082019050919050565b600061310d600383613a1c565b91506131188261423e565b600382019050919050565b6000613130602c83613a0b565b915061313b82614267565b604082019050919050565b6000613153601083613a0b565b915061315e826142b6565b602082019050919050565b6000613176600183613a1c565b9150613181826142df565b600182019050919050565b6000613199603883613a0b565b91506131a482614308565b604082019050919050565b60006131bc602a83613a0b565b91506131c782614357565b604082019050919050565b60006131df602983613a0b565b91506131ea826143a6565b604082019050919050565b6000613202601583613a1c565b915061320d826143f5565b601582019050919050565b6000613225602083613a0b565b91506132308261441e565b602082019050919050565b6000613248600d83613a1c565b915061325382614447565b600d82019050919050565b600061326b602c83613a0b565b915061327682614470565b604082019050919050565b600061328e602083613a0b565b9150613299826144bf565b602082019050919050565b60006132b1602983613a0b565b91506132bc826144e8565b604082019050919050565b60006132d4603083613a1c565b91506132df82614537565b603082019050919050565b60006132f7600383613a1c565b915061330282614586565b600382019050919050565b600061331a602183613a0b565b9150613325826145af565b604082019050919050565b600061333d601d83613a1c565b9150613348826145fe565b601d82019050919050565b6000613360601d83613a1c565b915061336b82614627565b601d82019050919050565b6000613383603183613a0b565b915061338e82614650565b604082019050919050565b60006133a6602383613a1c565b91506133b18261469f565b602382019050919050565b60006133c9600283613a1c565b91506133d4826146ee565b600282019050919050565b60006133ec604183613a1c565b91506133f782614717565b604182019050919050565b600061340f600683613a1c565b915061341a8261478c565b600682019050919050565b6000613432600983613a1c565b915061343d826147b5565b600982019050919050565b6000613455600183613a1c565b9150613460826147de565b600182019050919050565b61347481613e90565b82525050565b60006134868284612ffd565b915081905092915050565b600061349d8285612ffd565b91506134a98284612ffd565b91508190509392505050565b60006134c18286612ffd565b91506134cc82613169565b91506134d88285612ffd565b91506134e382613169565b91506134ef8284612ffd565b91506134fa82613169565b9150819050949350505050565b60006135138285612ffd565b915061351e82613330565b915061352a8284612ffd565b9150613535826132ea565b91508190509392505050565b600061354d8284612ffd565b915061355882613402565b915081905092915050565b600061356e826132c7565b915061357a8285612ffd565b915061358582613425565b91506135918284612ffd565b915061359c826133bc565b91508190509392505050565b60006135b382613353565b91506135bf8284612ffd565b915081905092915050565b60006135d582613399565b91506135e0826133df565b91506135eb826131f5565b91506135f78287612ffd565b915061360282613448565b915061360e8286612ffd565b915061361982613448565b91506136258285612ffd565b91506136308261323b565b915061363c8284612ffd565b915061364782613100565b915081905095945050505050565b600060208201905061366a6000830184612f6d565b92915050565b60006080820190506136856000830187612f6d565b6136926020830186612f6d565b61369f604083018561346b565b81810360608301526136b18184612f8b565b905095945050505050565b60006020820190506136d16000830184612f7c565b92915050565b600060208201905081810360008301526136f18184612fc4565b905092915050565b600060208201905081810360008301526137128161302e565b9050919050565b6000602082019050818103600083015261373281613051565b9050919050565b6000602082019050818103600083015261375281613074565b9050919050565b6000602082019050818103600083015261377281613097565b9050919050565b60006020820190508181036000830152613792816130ba565b9050919050565b600060208201905081810360008301526137b2816130dd565b9050919050565b600060208201905081810360008301526137d281613123565b9050919050565b600060208201905081810360008301526137f281613146565b9050919050565b600060208201905081810360008301526138128161318c565b9050919050565b60006020820190508181036000830152613832816131af565b9050919050565b60006020820190508181036000830152613852816131d2565b9050919050565b6000602082019050818103600083015261387281613218565b9050919050565b600060208201905081810360008301526138928161325e565b9050919050565b600060208201905081810360008301526138b281613281565b9050919050565b600060208201905081810360008301526138d2816132a4565b9050919050565b600060208201905081810360008301526138f28161330d565b9050919050565b6000602082019050818103600083015261391281613376565b9050919050565b600060208201905061392e600083018461346b565b92915050565b6000604082019050613949600083018561346b565b613956602083018461346b565b9392505050565b6000613967613978565b90506139738282613f1b565b919050565b6000604051905090565b600067ffffffffffffffff82111561399d5761399c614082565b5b6139a6826140c5565b9050602081019050919050565b600067ffffffffffffffff8211156139ce576139cd614082565b5b6139d7826140c5565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a3282613e66565b9150613a3d83613e66565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615613a7857613a77613fc6565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615613ab057613aaf613fc6565b5b828201905092915050565b6000613ac682613e90565b9150613ad183613e90565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b0657613b05613fc6565b5b828201905092915050565b6000613b1c82613e9a565b9150613b2783613e9a565b92508260ff03821115613b3d57613b3c613fc6565b5b828201905092915050565b6000613b5382613e66565b9150613b5e83613e66565b925082613b6e57613b6d613ff5565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615613ba757613ba6613fc6565b5b828205905092915050565b6000613bbd82613e90565b9150613bc883613e90565b925082613bd857613bd7613ff5565b5b828204905092915050565b6000613bee82613e66565b9150613bf983613e66565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615613c3857613c37613fc6565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615613c7557613c74613fc6565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615613cb257613cb1613fc6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615613cef57613cee613fc6565b5b828202905092915050565b6000613d0582613e90565b9150613d1083613e90565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d4957613d48613fc6565b5b828202905092915050565b6000613d5f82613e66565b9150613d6a83613e66565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613da557613da4613fc6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613ddd57613ddc613fc6565b5b828203905092915050565b6000613df382613e90565b9150613dfe83613e90565b925082821015613e1157613e10613fc6565b5b828203905092915050565b6000613e2782613e70565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613ed4578082015181840152602081019050613eb9565b83811115613ee3576000848401525b50505050565b60006002820490506001821680613f0157607f821691505b60208210811415613f1557613f14614024565b5b50919050565b613f24826140c5565b810181811067ffffffffffffffff82111715613f4357613f42614082565b5b80604052505050565b6000613f5782613e90565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f8a57613f89613fc6565b5b600182019050919050565b6000613fa082613e90565b9150613fab83613e90565b925082613fbb57613fba613ff5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206973206e6f7420746865206d696e7465720000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f22207d0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4d696e746572206973206c6f636b656400000000000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f2c202265787069726174696f6e44617465223a20220000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766722206865696768743d2200000000000000000000000000000000602082015250565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f222066696c6c3d227472616e73706172656e7422207374726f6b653d22000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f7b20226e616d65223a202245636f6e6f6d6963732044657369676e20426f6f6b60008201527f222c200000000000000000000000000000000000000000000000000000000000602082015250565b7f223e000000000000000000000000000000000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202245636f6e6f6d69637320616e64204d6160008201527f7468206f6620546f6b656e20456e67696e656572696e6720616e64204465466960208201527f2200000000000000000000000000000000000000000000000000000000000000604082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b61481081613e1c565b811461481b57600080fd5b50565b61482781613e2e565b811461483257600080fd5b50565b61483e81613e3a565b811461484957600080fd5b50565b61485581613e90565b811461486057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122045be6d8db645570113a713064e1d849ae695029504433222db6f181e091eb05364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "econNFTId": "the id of the NFT you want to burn."
        }
      },
      "constructor": {
        "details": "Variables used to make the JPEG are set in order to construct an SVG later on. ",
        "params": {
          "_expirationTimestamp": "the date where the EconNFT will expire (timestamp in seconds).",
          "_totalSupply": "maximum number of NFT that is going to be minted."
        }
      },
      "generatePath(uint256)": {
        "details": "Function called by the `generateSVG()` function.",
        "params": {
          "_randomNumber": "is a random number from the `generatePath()` function."
        },
        "returns": {
          "pathSvg": "a string containing all SVG instructions."
        }
      },
      "generatePathCommand(uint256)": {
        "details": "Called by the `generatePath()` function.",
        "params": {
          "_randomNumber": "is a random number from the `generatePath()` function."
        },
        "returns": {
          "pathCommand": "a string containing the paths to create the SVG."
        }
      },
      "generateSVG(uint256)": {
        "details": "The random number is used to print random lines and random colors on the final SVG.",
        "params": {
          "_randomNumber": "is a random number used to construct the SVG (the more random the better)."
        },
        "returns": {
          "finalSvg": "the full SVG component readable by a browser."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint()": {
        "details": "Create a new NFT and send it to the minter.",
        "returns": {
          "_0": "Return the id of the minted NFT."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setCurrentExpirationTimestamp(uint256)": {
        "params": {
          "_newExpirationTimestamp": "the new timestamp."
        }
      },
      "setMinter(address)": {
        "params": {
          "_minter": "The new minter address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "svgToImageURI(string)": {
        "params": {
          "_svg": "is the SVG component."
        },
        "returns": {
          "_0": "imageURI a string readable by the browser which will display the SVG."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the id of the token you would like to read information from."
        },
        "returns": {
          "_0": "data a 64 based encoded string containing a json object with all the informations."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Economics Design Property Right NFT.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0)."
      },
      "generatePath(uint256)": {
        "notice": "Generate different paths that creates the SVG lines."
      },
      "generatePathCommand(uint256)": {
        "notice": "Generate the paths to create the SVG."
      },
      "generateSVG(uint256)": {
        "notice": "Generate a full SVG component."
      },
      "lockMinter()": {
        "notice": "Lock the minter from calling certain functions."
      },
      "mint()": {
        "notice": "Mint a new NFT."
      },
      "setCurrentExpirationTimestamp(uint256)": {
        "notice": "Change the expiration timestamp of the future NFTs about to get minted."
      },
      "setMinter(address)": {
        "notice": "Change the minter address."
      },
      "svgToImageURI(string)": {
        "notice": "Takes a SVG and encode it while still keeping it readable by a browser."
      },
      "tokenURI(uint256)": {
        "notice": "Contain all the informations needed for read this NFT informations."
      }
    },
    "notice": "Contract used to verify the ownership of the Economics Design book property rights.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 618,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 620,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 624,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 628,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 632,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 638,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 393,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3533,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "minter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3535,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_currentEconNFTId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3537,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "isMinterLocked",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3542,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "seeds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Seed)3531_storage)"
      },
      {
        "astId": 3544,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "currentExpirationTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3556,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "maxNumberOfPath",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3558,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "maxNumberOfPathCommands",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3560,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "size",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3563,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "pathCommands",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3566,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "colors",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)3531_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EconNFT.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)3531_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Seed)3531_storage": {
        "encoding": "inplace",
        "label": "struct EconNFT.Seed",
        "members": [
          {
            "astId": 3530,
            "contract": "contracts/EconNFT.sol:EconNFT",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}