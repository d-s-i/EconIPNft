{
  "address": "0x7E8435c76a59fb12c3997bC46bD124F4aBb1C09a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "econNFTId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExpirationDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePath",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathSvg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePathCommand",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathCommand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "finalSvg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinterLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfBooks",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newExpirationDate",
          "type": "uint256"
        }
      ],
      "name": "setCurrentExpirationDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3bafe1bfb6f2152bc5711c8ebd77b5905feeaeec94d06a16660e778269d7f47",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x7E8435c76a59fb12c3997bC46bD124F4aBb1C09a",
    "transactionIndex": 20,
    "gasUsed": "4509248",
    "logsBloom": "0x
    "blockHash": "0x789ff3c2832f07d8468d680c97573ece24720bb9c2d5bb49869045a7c661d3d4",
    "transactionHash": "0xd3bafe1bfb6f2152bc5711c8ebd77b5905feeaeec94d06a16660e778269d7f47",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 9543017,
        "transactionHash": "0xd3bafe1bfb6f2152bc5711c8ebd77b5905feeaeec94d06a16660e778269d7f47",
        "address": "0x7E8435c76a59fb12c3997bC46bD124F4aBb1C09a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004428161dbd37d935c64894525f91039e1a6e4a1e"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x789ff3c2832f07d8468d680c97573ece24720bb9c2d5bb49869045a7c661d3d4"
      }
    ],
    "blockNumber": 9543017,
    "cumulativeGasUsed": "24321518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0"
  ],
  "solcInputHash": "c16f364313aec072ac2a5ce01e24a8d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"econNFTId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpirationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathSvg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePathCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathCommand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"finalSvg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinterLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfBooks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExpirationDate\",\"type\":\"uint256\"}],\"name\":\"setCurrentExpirationDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn a nft.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EconNFT.sol\":\"EconNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"lol\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x30a1319625ab4e17bb9c41811aeff2dbe9b40389897579d8011b4b5a54901610\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/EconNFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\ncontract EconNFT is ERC721, Ownable {\\r\\n\\r\\n    struct Seed {\\r\\n        uint256 expirationDate;\\r\\n        uint256 numberOfBooks;\\r\\n    }\\r\\n\\r\\n    address public minter;\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    uint256 private _currentEconNFTId;\\r\\n\\r\\n    bool public isMinterLocked;\\r\\n\\r\\n    mapping(uint256 => Seed) public seeds;\\r\\n\\r\\n    uint256 public currentExpirationDate;\\r\\n\\r\\n    // Mapping from token ID to owner address - already present in base contracts\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count - already present in base contracts\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    // art variables\\r\\n    uint256 public maxNumberOfPath;\\r\\n    uint256 public maxNumberOfPathCommands;\\r\\n    uint256 public size;\\r\\n    string[] public pathCommands;\\r\\n    string[] public colors;\\r\\n\\r\\n    constructor(uint256 _totalSupply) ERC721(\\\"Econteric IP\\\", \\\"ECIP\\\") Ownable() public {\\r\\n        totalSupply = _totalSupply;\\r\\n        isMinterLocked = false;\\r\\n        _currentEconNFTId = 0;\\r\\n        currentExpirationDate = 1640991600;\\r\\n\\r\\n        maxNumberOfPath = 10;\\r\\n        maxNumberOfPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n        colors = [\\\"red\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"black\\\", \\\"white\\\"];\\r\\n    }\\r\\n\\r\\n    modifier whenMinterNotLocked() {\\r\\n        require(!isMinterLocked, \\\"Minter is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(msg.sender == minter, \\\"Sender is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint() public onlyMinter returns (uint256) {\\r\\n        return _mintTo(minter, _currentEconNFTId++);\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @notice Burn a nft.\\r\\n     */\\r\\n    function burn(uint256 econNFTId) public onlyMinter {\\r\\n        _burn(econNFTId);\\r\\n    }\\r\\n\\r\\n    function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\\r\\n        minter = _minter;\\r\\n    }\\r\\n\\r\\n    function lockMinter() external onlyOwner whenMinterNotLocked {\\r\\n        isMinterLocked = true;\\r\\n    }\\r\\n\\r\\n    function setCurrentExpirationDate(uint256 _newExpirationDate) external onlyOwner {\\r\\n        currentExpirationDate = _newExpirationDate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint a property right with `econNFTId` to the provided `to` address.\\r\\n     */\\r\\n    function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\\r\\n        seeds[econNFTId] = Seed({\\r\\n            expirationDate: currentExpirationDate,\\r\\n            numberOfBooks: 20\\r\\n        });\\r\\n        _mint(to, econNFTId);\\r\\n\\r\\n        return econNFTId;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        uint256 year;\\r\\n        uint256 month;\\r\\n        uint256 day;\\r\\n        (year, month, day) = timestampToDate(seeds[tokenId].expirationDate); \\r\\n        uint256 randomNumber = block.timestamp / block.number;\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        string memory json = Base64.encode(bytes(abi.encodePacked(\\r\\n            '{\\\"name\\\": \\\"Econteric Book\\\", ', \\r\\n            '\\\"description\\\": \\\"Economics and Math of Token Engineering and DeFi\\\", ', \\r\\n            '\\\"numberOfBooks\\\": \\\"', \\r\\n            uint2str(seeds[tokenId].numberOfBooks),\\r\\n            '\\\", \\\"expirationDate\\\": \\\"',\\r\\n            uint2str(day),\\r\\n            '/',\\r\\n            uint2str(month),\\r\\n            '/',\\r\\n            uint2str(year),\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            imageURI,\\r\\n            '\\\"}'\\r\\n        )));\\r\\n\\r\\n        string memory data = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function generateSVG(uint256 _randomNumber) public view returns(string memory finalSvg) {\\r\\n        uint256 numberOfPath = (_randomNumber % maxNumberOfPath) + 1;\\r\\n        finalSvg = string(abi.encodePacked('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"', uint2str(size), '\\\" width=\\\"', uint2str(size), '\\\">'));\\r\\n        for(uint i = 0; i < numberOfPath; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSvg = generatePath(newRNG);\\r\\n            finalSvg = string(abi.encodePacked(finalSvg, pathSvg));\\r\\n        }\\r\\n        finalSvg = string(abi.encodePacked(finalSvg, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    function generatePath(uint256 _randomNumber) public view returns(string memory pathSvg) {\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxNumberOfPathCommands) + 1;\\r\\n        pathSvg = '<path d=\\\"';\\r\\n        for(uint i = 0; i < numberOfPathCommands; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\\r\\n            string memory pathCommand = generatePathCommand(newRNG);\\r\\n            pathSvg = string(abi.encodePacked(pathSvg, pathCommand));\\r\\n        }\\r\\n        string memory color = colors[_randomNumber % colors.length];\\r\\n        pathSvg = string(abi.encodePacked(pathSvg, '\\\" fill=\\\"transparent\\\" stroke=\\\"', color, '\\\"/>'));\\r\\n    }\\r\\n\\r\\n    function generatePathCommand(uint256 _randomNumber) public view returns(string memory pathCommand) {\\r\\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\\r\\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 2 + 1))) % size;\\r\\n        pathCommand = string(abi.encodePacked(pathCommand, \\\" \\\", uint2str(parameterOne), \\\" \\\", uint2str(parameterTwo), \\\" \\\"));\\r\\n    }\\r\\n\\r\\n    function svgToImageURI(string memory _svg) public pure returns(string memory) {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(_svg))));\\r\\n        string memory imageURI = string(abi.encodePacked(baseURL, svgBase64Encoded));\\r\\n        return imageURI;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x53be5a357fa6432f830ba3aaed2990b223e8ceab52f9731c8978fa8e4a7b583a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200507b3803806200507b83398181016040528101906200003791906200062d565b6040518060400160405280600c81526020017f45636f6e746572696320495000000000000000000000000000000000000000008152506040518060400160405280600481526020017f45434950000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200042a565b508060019080519060200190620000d49291906200042a565b505050620000f7620000eb6200035c60201b60201c565b6200036460201b60201c565b806008819055506000600a60006101000a81548160ff02191690831515021790555060006009819055506361cf8b70600c81905550600a600f8190555060056010819055506101f460118190555060405180604001604052806040518060400160405280600181526020017f4d0000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f4c000000000000000000000000000000000000000000000000000000000000008152508152506012906002620001d6929190620004bb565b506040518060c001604052806040518060400160405280600381526020017f726564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f626c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f677265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f79656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f626c61636b00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f776869746500000000000000000000000000000000000000000000000000000081525081525060139060066200035492919062000522565b5050620006ed565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620004389062000669565b90600052602060002090601f0160209004810192826200045c5760008555620004a8565b82601f106200047757805160ff1916838001178555620004a8565b82800160010185558215620004a8579182015b82811115620004a75782518255916020019190600101906200048a565b5b509050620004b7919062000589565b5090565b8280548282559060005260206000209081019282156200050f579160200282015b828111156200050e578251829080519060200190620004fd9291906200042a565b5091602001919060010190620004dc565b5b5090506200051e9190620005a8565b5090565b82805482825590600052602060002090810192821562000576579160200282015b8281111562000575578251829080519060200190620005649291906200042a565b509160200191906001019062000543565b5b509050620005859190620005a8565b5090565b5b80821115620005a45760008160009055506001016200058a565b5090565b5b80821115620005cc5760008181620005c29190620005d0565b50600101620005a9565b5090565b508054620005de9062000669565b6000825580601f10620005f2575062000613565b601f01602090049060005260206000209081019062000612919062000589565b5b50565b6000815190506200062781620006d3565b92915050565b600060208284031215620006465762000645620006ce565b5b6000620006568482850162000616565b91505092915050565b6000819050919050565b600060028204905060018216806200068257607f821691505b602082108114156200069957620006986200069f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b620006de816200065f565b8114620006ea57600080fd5b50565b61497e80620006fd6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636dcee4ca11610125578063b88d4fde116100ad578063e11c81441161007c578063e11c81441461062c578063e985e9c514610648578063f0503e8014610678578063f2fde38b146106a9578063fca3b5aa146106c557610211565b8063b88d4fde14610580578063bd11f69d1461059c578063c68b49d1146105cc578063c87b56dd146105fc57610211565b80638da5cb5b116100f45780638da5cb5b146104da578063949d225d146104f8578063955968d41461051657806395d89b4114610546578063a22cb4651461056457610211565b80636dcee4ca1461046657806370a0823114610496578063715018a6146104c657806376daebe1146104d057610211565b806323b872dd116101a857806342966c681161017757806342966c68146103c057806348e896ab146103dc5780634f2f005e146103fa578063568a1844146104185780636352211e1461043657610211565b806323b872dd1461032857806330d871c61461034457806333af59891461037457806342842e0e146103a457610211565b8063095ea7b3116101e4578063095ea7b3146102b25780631249c58b146102ce57806318160ddd146102ec5780631e688e101461030a57610211565b806301ffc9a71461021657806306fdde03146102465780630754617214610264578063081812fc14610282575b600080fd5b610230600480360381019061022b9190612f04565b6106e1565b60405161023d919061375e565b60405180910390f35b61024e6107c3565b60405161025b9190613779565b60405180910390f35b61026c610855565b60405161027991906136f7565b60405180910390f35b61029c60048036038101906102979190612fa7565b61087b565b6040516102a991906136f7565b60405180910390f35b6102cc60048036038101906102c79190612ec4565b610900565b005b6102d6610a18565b6040516102e391906139bb565b60405180910390f35b6102f4610af1565b60405161030191906139bb565b60405180910390f35b610312610af7565b60405161031f919061375e565b60405180910390f35b610342600480360381019061033d9190612dae565b610b0a565b005b61035e60048036038101906103599190612f5e565b610b6a565b60405161036b9190613779565b60405180910390f35b61038e60048036038101906103899190612fa7565b610c03565b60405161039b9190613779565b60405180910390f35b6103be60048036038101906103b99190612dae565b610dcf565b005b6103da60048036038101906103d59190612fa7565b610def565b005b6103e4610e8b565b6040516103f191906139bb565b60405180910390f35b610402610e91565b60405161040f91906139bb565b60405180910390f35b610420610e97565b60405161042d91906139bb565b60405180910390f35b610450600480360381019061044b9190612fa7565b610e9d565b60405161045d91906136f7565b60405180910390f35b610480600480360381019061047b9190612fa7565b610f4f565b60405161048d9190613779565b60405180910390f35b6104b060048036038101906104ab9190612d41565b611051565b6040516104bd91906139bb565b60405180910390f35b6104ce611109565b005b6104d8611191565b005b6104e261127a565b6040516104ef91906136f7565b60405180910390f35b6105006112a4565b60405161050d91906139bb565b60405180910390f35b610530600480360381019061052b9190612fa7565b6112aa565b60405161053d9190613779565b60405180910390f35b61054e611356565b60405161055b9190613779565b60405180910390f35b61057e60048036038101906105799190612e84565b6113e8565b005b61059a60048036038101906105959190612e01565b611569565b005b6105b660048036038101906105b19190612fa7565b6115cb565b6040516105c39190613779565b60405180910390f35b6105e660048036038101906105e19190612fa7565b611677565b6040516105f39190613779565b60405180910390f35b61061660048036038101906106119190612fa7565b611810565b6040516106239190613779565b60405180910390f35b61064660048036038101906106419190612fa7565b61190a565b005b610662600480360381019061065d9190612d6e565b611990565b60405161066f919061375e565b60405180910390f35b610692600480360381019061068d9190612fa7565b611a24565b6040516106a09291906139d6565b60405180910390f35b6106c360048036038101906106be9190612d41565b611a48565b005b6106df60048036038101906106da9190612d41565b611b40565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107ac57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107bc57506107bb82611c50565b5b9050919050565b6060600080546107d290613f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107fe90613f8b565b801561084b5780601f106108205761010080835404028352916020019161084b565b820191906000526020600020905b81548152906001019060200180831161082e57829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061088682611cba565b6108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc9061391b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061090b82610e9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561097c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109739061397b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661099b611d26565b73ffffffffffffffffffffffffffffffffffffffff1614806109ca57506109c9816109c4611d26565b611990565b5b610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a009061389b565b60405180910390fd5b610a138383611d2e565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa1906137db565b60405180910390fd5b610aec600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660096000815480929190610ae390613fee565b91905055611de7565b905090565b60085481565b600a60009054906101000a900460ff1681565b610b1b610b15611d26565b82611e3e565b610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b519061399b565b60405180910390fd5b610b65838383611f1c565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610bd084604051602001610bbc9190613504565b604051602081830303815290604052612178565b905060008282604051602001610be792919061351b565b6040516020818303038152906040529050809350505050919050565b60606000600160105484610c179190614037565b610c219190613b5d565b90506040518060400160405280600981526020017f3c7061746820643d220000000000000000000000000000000000000000000000815250915060005b81811015610ce95760008482601154610c779190613b5d565b604051602001610c889291906139d6565b6040516020818303038152906040528051906020012060001c90506000610cae82611677565b90508481604051602001610cc392919061351b565b604051602081830303815290604052945050508080610ce190613fee565b915050610c5e565b5060006013808054905085610cfe9190614037565b81548110610d0f57610d0e6140f5565b5b906000526020600020018054610d2490613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5090613f8b565b8015610d9d5780601f10610d7257610100808354040283529160200191610d9d565b820191906000526020600020905b815481529060010190602001808311610d8057829003601f168201915b505050505090508281604051602001610db7929190613591565b60405160208183030381529060405292505050919050565b610dea83838360405180602001604052806000815250611569565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e76906137db565b60405180910390fd5b610e88816122f1565b50565b60105481565b600c5481565b600f5481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d906138db565b60405180910390fd5b80915050919050565b606060006001600f5484610f639190614037565b610f6d9190613b5d565b9050610f7a601154612402565b610f85601154612402565b604051602001610f96929190613690565b604051602081830303815290604052915060005b818110156110285760008482604051602001610fc79291906139d6565b6040516020818303038152906040528051906020012060001c90506000610fed82610c03565b9050848160405160200161100292919061351b565b60405160208183030381529060405294505050808061102090613fee565b915050610faa565b508160405160200161103a91906135cb565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b9906138bb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611111611d26565b73ffffffffffffffffffffffffffffffffffffffff1661112f61127a565b73ffffffffffffffffffffffffffffffffffffffff1614611185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117c9061393b565b60405180910390fd5b61118f600061258b565b565b611199611d26565b73ffffffffffffffffffffffffffffffffffffffff166111b761127a565b73ffffffffffffffffffffffffffffffffffffffff161461120d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112049061393b565b60405180910390fd5b600a60009054906101000a900460ff161561125d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112549061387b565b60405180910390fd5b6001600a60006101000a81548160ff021916908315150217905550565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60115481565b601281815481106112ba57600080fd5b9060005260206000200160009150905080546112d590613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461130190613f8b565b801561134e5780601f106113235761010080835404028352916020019161134e565b820191906000526020600020905b81548152906001019060200180831161133157829003601f168201915b505050505081565b60606001805461136590613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461139190613f8b565b80156113de5780601f106113b3576101008083540402835291602001916113de565b820191906000526020600020905b8154815290600101906020018083116113c157829003601f168201915b5050505050905090565b6113f0611d26565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561145e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114559061383b565b60405180910390fd5b806005600061146b611d26565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611518611d26565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161155d919061375e565b60405180910390a35050565b61157a611574611d26565b83611e3e565b6115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b09061399b565b60405180910390fd5b6115c584848484612651565b50505050565b601381815481106115db57600080fd5b9060005260206000200160009150905080546115f690613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461162290613f8b565b801561166f5780601f106116445761010080835404028352916020019161166f565b820191906000526020600020905b81548152906001019060200180831161165257829003601f168201915b505050505081565b6060601280805490508361168b9190614037565b8154811061169c5761169b6140f5565b5b9060005260206000200180546116b190613f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546116dd90613f8b565b801561172a5780601f106116ff5761010080835404028352916020019161172a565b820191906000526020600020905b81548152906001019060200180831161170d57829003601f168201915b5050505050905060006011548360026011546117469190613d9c565b6040516020016117579291906139d6565b6040516020818303038152906040528051906020012060001c61177a9190614037565b9050600060115484600160026011546117939190613d9c565b61179d9190613b5d565b6040516020016117ae9291906139d6565b6040516020818303038152906040528051906020012060001c6117d19190614037565b9050826117dd83612402565b6117e683612402565b6040516020016117f89392919061353f565b60405160208183030381529060405292505050919050565b60606000806000611836600b6000878152602001908152602001600020600001546126ad565b809350819450829550505050600043426118509190613c54565b9050600061185d82610f4f565b9050600061186a82610b6a565b905060006118d4611890600b60008c815260200190815260200160002060010154612402565b61189987612402565b6118a289612402565b6118ab8b612402565b866040516020016118c09594939291906135ed565b604051602081830303815290604052612178565b90506000816040516020016118e991906136d5565b60405160208183030381529060405290508098505050505050505050919050565b611912611d26565b73ffffffffffffffffffffffffffffffffffffffff1661193061127a565b73ffffffffffffffffffffffffffffffffffffffff1614611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197d9061393b565b60405180910390fd5b80600c8190555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600b6020528060005260406000206000915090508060000154908060010154905082565b611a50611d26565b73ffffffffffffffffffffffffffffffffffffffff16611a6e61127a565b73ffffffffffffffffffffffffffffffffffffffff1614611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb9061393b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2b906137bb565b60405180910390fd5b611b3d8161258b565b50565b611b48611d26565b73ffffffffffffffffffffffffffffffffffffffff16611b6661127a565b73ffffffffffffffffffffffffffffffffffffffff1614611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb39061393b565b60405180910390fd5b600a60009054906101000a900460ff1615611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c039061387b565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611da183610e9d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006040518060400160405280600c5481526020016014815250600b60008481526020019081526020016000206000820151816000015560208201518160010155905050611e3583836126dc565b81905092915050565b6000611e4982611cba565b611e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f9061385b565b60405180910390fd5b6000611e9383610e9d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f0257508373ffffffffffffffffffffffffffffffffffffffff16611eea8461087b565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f135750611f128185611990565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f3c82610e9d565b73ffffffffffffffffffffffffffffffffffffffff1614611f92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f899061395b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff99061381b565b60405180910390fd5b61200d8383836128aa565b612018600082611d2e565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120689190613e8a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120bf9190613b5d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b606060008251141561219b576040518060200160405280600081525090506122ec565b600060405180606001604052806040815260200161490960409139905060006003600285516121ca9190613b5d565b6121d49190613c54565b60046121e09190613d9c565b905060006020826121f19190613b5d565b67ffffffffffffffff81111561220a57612209614124565b5b6040519080825280601f01601f19166020018201604052801561223c5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156122ab576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612250565b6003895106600181146122c557600281146122d5576122e0565b613d3d60f01b60028303526122e0565b603d60f81b60018303525b50505050508093505050505b919050565b60006122fc82610e9d565b905061230a816000846128aa565b612315600083611d2e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123659190613e8a565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6060600082141561244a576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612586565b600082905060005b6000821461247c57808061246590613fee565b915050600a826124759190613c54565b9150612452565b60008167ffffffffffffffff81111561249857612497614124565b5b6040519080825280601f01601f1916602001820160405280156124ca5781602001600182028036833780820191505090505b50905060008290505b6000861461257e576001816124e89190613e8a565b90506000600a80886124fa9190613c54565b6125049190613d9c565b8761250f9190613e8a565b603061251b9190613bb3565b905060008160f81b905080848481518110612539576125386140f5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886125759190613c54565b975050506124d3565b819450505050505b919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61265c848484611f1c565b612668848484846128af565b6126a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269e9061379b565b60405180910390fd5b50505050565b60008060006126c962015180856126c49190613c54565b612a46565b8093508194508295505050509193909250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561274c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612743906138fb565b60405180910390fd5b61275581611cba565b15612795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278c906137fb565b60405180910390fd5b6127a1600083836128aa565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127f19190613b5d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b60006128d08473ffffffffffffffffffffffffffffffffffffffff16612be5565b15612a39578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026128f9611d26565b8786866040518563ffffffff1660e01b815260040161291b9493929190613712565b602060405180830381600087803b15801561293557600080fd5b505af192505050801561296657506040513d601f19601f820116820180604052508101906129639190612f31565b60015b6129e9573d8060008114612996576040519150601f19603f3d011682016040523d82523d6000602084013e61299b565b606091505b506000815114156129e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d89061379b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612a3e565b600190505b949350505050565b600080600080849050600062253d8c62010bd983612a649190613ac9565b612a6e9190613ac9565b9050600062023ab1826004612a839190613c85565b612a8d9190613bea565b9050600460038262023ab1612aa29190613c85565b612aac9190613ac9565b612ab69190613bea565b82612ac19190613df6565b9150600062164b09600184612ad69190613ac9565b610fa0612ae39190613c85565b612aed9190613bea565b9050601f6004826105b5612b019190613c85565b612b0b9190613bea565b84612b169190613df6565b612b209190613ac9565b9250600061098f846050612b349190613c85565b612b3e9190613bea565b9050600060508261098f612b529190613c85565b612b5c9190613bea565b85612b679190613df6565b9050600b82612b769190613bea565b945084600c612b859190613c85565b600283612b929190613ac9565b612b9c9190613df6565b91508483603186612bad9190613df6565b6064612bb99190613c85565b612bc39190613ac9565b612bcd9190613ac9565b92508298508197508096505050505050509193909250565b600080823b905060008111915050919050565b6000612c0b612c0684613a24565b6139ff565b905082815260208101848484011115612c2757612c26614158565b5b612c32848285613f49565b509392505050565b6000612c4d612c4884613a55565b6139ff565b905082815260208101848484011115612c6957612c68614158565b5b612c74848285613f49565b509392505050565b600081359050612c8b816148ac565b92915050565b600081359050612ca0816148c3565b92915050565b600081359050612cb5816148da565b92915050565b600081519050612cca816148da565b92915050565b600082601f830112612ce557612ce4614153565b5b8135612cf5848260208601612bf8565b91505092915050565b600082601f830112612d1357612d12614153565b5b8135612d23848260208601612c3a565b91505092915050565b600081359050612d3b816148f1565b92915050565b600060208284031215612d5757612d56614162565b5b6000612d6584828501612c7c565b91505092915050565b60008060408385031215612d8557612d84614162565b5b6000612d9385828601612c7c565b9250506020612da485828601612c7c565b9150509250929050565b600080600060608486031215612dc757612dc6614162565b5b6000612dd586828701612c7c565b9350506020612de686828701612c7c565b9250506040612df786828701612d2c565b9150509250925092565b60008060008060808587031215612e1b57612e1a614162565b5b6000612e2987828801612c7c565b9450506020612e3a87828801612c7c565b9350506040612e4b87828801612d2c565b925050606085013567ffffffffffffffff811115612e6c57612e6b61415d565b5b612e7887828801612cd0565b91505092959194509250565b60008060408385031215612e9b57612e9a614162565b5b6000612ea985828601612c7c565b9250506020612eba85828601612c91565b9150509250929050565b60008060408385031215612edb57612eda614162565b5b6000612ee985828601612c7c565b9250506020612efa85828601612d2c565b9150509250929050565b600060208284031215612f1a57612f19614162565b5b6000612f2884828501612ca6565b91505092915050565b600060208284031215612f4757612f46614162565b5b6000612f5584828501612cbb565b91505092915050565b600060208284031215612f7457612f73614162565b5b600082013567ffffffffffffffff811115612f9257612f9161415d565b5b612f9e84828501612cfe565b91505092915050565b600060208284031215612fbd57612fbc614162565b5b6000612fcb84828501612d2c565b91505092915050565b612fdd81613ebe565b82525050565b612fec81613ed0565b82525050565b6000612ffd82613a86565b6130078185613a9c565b9350613017818560208601613f58565b61302081614167565b840191505092915050565b600061303682613a91565b6130408185613aad565b9350613050818560208601613f58565b61305981614167565b840191505092915050565b600061306f82613a91565b6130798185613abe565b9350613089818560208601613f58565b80840191505092915050565b60006130a2603283613aad565b91506130ad82614178565b604082019050919050565b60006130c5602683613aad565b91506130d0826141c7565b604082019050919050565b60006130e8601883613aad565b91506130f382614216565b602082019050919050565b600061310b601c83613aad565b91506131168261423f565b602082019050919050565b600061312e601b83613abe565b915061313982614268565b601b82019050919050565b6000613151602483613aad565b915061315c82614291565b604082019050919050565b6000613174601983613aad565b915061317f826142e0565b602082019050919050565b6000613197602c83613aad565b91506131a282614309565b604082019050919050565b60006131ba601083613aad565b91506131c582614358565b602082019050919050565b60006131dd600183613abe565b91506131e882614381565b600182019050919050565b6000613200603883613aad565b915061320b826143aa565b604082019050919050565b6000613223602a83613aad565b915061322e826143f9565b604082019050919050565b6000613246602983613aad565b915061325182614448565b604082019050919050565b6000613269604383613abe565b915061327482614497565b604382019050919050565b600061328c600283613abe565b91506132978261450c565b600282019050919050565b60006132af602083613aad565b91506132ba82614535565b602082019050919050565b60006132d2600d83613abe565b91506132dd8261455e565b600d82019050919050565b60006132f5602c83613aad565b915061330082614587565b604082019050919050565b6000613318602083613aad565b9150613323826145d6565b602082019050919050565b600061333b601283613abe565b9150613346826145ff565b601282019050919050565b600061335e602983613aad565b915061336982614628565b604082019050919050565b6000613381603083613abe565b915061338c82614677565b603082019050919050565b60006133a4600383613abe565b91506133af826146c6565b600382019050919050565b60006133c7602183613aad565b91506133d2826146ef565b604082019050919050565b60006133ea601d83613abe565b91506133f58261473e565b601d82019050919050565b600061340d601d83613abe565b915061341882614767565b601d82019050919050565b6000613430603183613aad565b915061343b82614790565b604082019050919050565b6000613453600283613abe565b915061345e826147df565b600282019050919050565b6000613476600683613abe565b915061348182614808565b600682019050919050565b6000613499600983613abe565b91506134a482614831565b600982019050919050565b60006134bc601683613abe565b91506134c78261485a565b601682019050919050565b60006134df600183613abe565b91506134ea82614883565b600182019050919050565b6134fe81613f32565b82525050565b60006135108284613064565b915081905092915050565b60006135278285613064565b91506135338284613064565b91508190509392505050565b600061354b8286613064565b9150613556826131d0565b91506135628285613064565b915061356d826131d0565b91506135798284613064565b9150613584826131d0565b9150819050949350505050565b600061359d8285613064565b91506135a8826133dd565b91506135b48284613064565b91506135bf82613397565b91508190509392505050565b60006135d78284613064565b91506135e282613469565b915081905092915050565b60006135f882613121565b91506136038261325c565b915061360e8261332e565b915061361a8288613064565b9150613625826134af565b91506136318287613064565b915061363c826134d2565b91506136488286613064565b9150613653826134d2565b915061365f8285613064565b915061366a826132c5565b91506136768284613064565b91506136818261327f565b91508190509695505050505050565b600061369b82613374565b91506136a78285613064565b91506136b28261348c565b91506136be8284613064565b91506136c982613446565b91508190509392505050565b60006136e082613400565b91506136ec8284613064565b915081905092915050565b600060208201905061370c6000830184612fd4565b92915050565b60006080820190506137276000830187612fd4565b6137346020830186612fd4565b61374160408301856134f5565b81810360608301526137538184612ff2565b905095945050505050565b60006020820190506137736000830184612fe3565b92915050565b60006020820190508181036000830152613793818461302b565b905092915050565b600060208201905081810360008301526137b481613095565b9050919050565b600060208201905081810360008301526137d4816130b8565b9050919050565b600060208201905081810360008301526137f4816130db565b9050919050565b60006020820190508181036000830152613814816130fe565b9050919050565b6000602082019050818103600083015261383481613144565b9050919050565b6000602082019050818103600083015261385481613167565b9050919050565b600060208201905081810360008301526138748161318a565b9050919050565b60006020820190508181036000830152613894816131ad565b9050919050565b600060208201905081810360008301526138b4816131f3565b9050919050565b600060208201905081810360008301526138d481613216565b9050919050565b600060208201905081810360008301526138f481613239565b9050919050565b60006020820190508181036000830152613914816132a2565b9050919050565b60006020820190508181036000830152613934816132e8565b9050919050565b600060208201905081810360008301526139548161330b565b9050919050565b6000602082019050818103600083015261397481613351565b9050919050565b60006020820190508181036000830152613994816133ba565b9050919050565b600060208201905081810360008301526139b481613423565b9050919050565b60006020820190506139d060008301846134f5565b92915050565b60006040820190506139eb60008301856134f5565b6139f860208301846134f5565b9392505050565b6000613a09613a1a565b9050613a158282613fbd565b919050565b6000604051905090565b600067ffffffffffffffff821115613a3f57613a3e614124565b5b613a4882614167565b9050602081019050919050565b600067ffffffffffffffff821115613a7057613a6f614124565b5b613a7982614167565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ad482613f08565b9150613adf83613f08565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615613b1a57613b19614068565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615613b5257613b51614068565b5b828201905092915050565b6000613b6882613f32565b9150613b7383613f32565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ba857613ba7614068565b5b828201905092915050565b6000613bbe82613f3c565b9150613bc983613f3c565b92508260ff03821115613bdf57613bde614068565b5b828201905092915050565b6000613bf582613f08565b9150613c0083613f08565b925082613c1057613c0f614097565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615613c4957613c48614068565b5b828205905092915050565b6000613c5f82613f32565b9150613c6a83613f32565b925082613c7a57613c79614097565b5b828204905092915050565b6000613c9082613f08565b9150613c9b83613f08565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615613cda57613cd9614068565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615613d1757613d16614068565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615613d5457613d53614068565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615613d9157613d90614068565b5b828202905092915050565b6000613da782613f32565b9150613db283613f32565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613deb57613dea614068565b5b828202905092915050565b6000613e0182613f08565b9150613e0c83613f08565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613e4757613e46614068565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613e7f57613e7e614068565b5b828203905092915050565b6000613e9582613f32565b9150613ea083613f32565b925082821015613eb357613eb2614068565b5b828203905092915050565b6000613ec982613f12565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613f76578082015181840152602081019050613f5b565b83811115613f85576000848401525b50505050565b60006002820490506001821680613fa357607f821691505b60208210811415613fb757613fb66140c6565b5b50919050565b613fc682614167565b810181811067ffffffffffffffff82111715613fe557613fe4614124565b5b80604052505050565b6000613ff982613f32565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561402c5761402b614068565b5b600182019050919050565b600061404282613f32565b915061404d83613f32565b92508261405d5761405c614097565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206973206e6f7420746865206d696e7465720000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f7b226e616d65223a202245636f6e746572696320426f6f6b222c200000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4d696e746572206973206c6f636b656400000000000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f226465736372697074696f6e223a202245636f6e6f6d69637320616e64204d6160008201527f7468206f6620546f6b656e20456e67696e656572696e6720616e64204465466960208201527f222c200000000000000000000000000000000000000000000000000000000000604082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f226e756d6265724f66426f6f6b73223a20220000000000000000000000000000600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766722206865696768743d2200000000000000000000000000000000602082015250565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f222066696c6c3d227472616e73706172656e7422207374726f6b653d22000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f223e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f222c202265787069726174696f6e44617465223a202200000000000000000000600082015250565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b6148b581613ebe565b81146148c057600080fd5b50565b6148cc81613ed0565b81146148d757600080fd5b50565b6148e381613edc565b81146148ee57600080fd5b50565b6148fa81613f32565b811461490557600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220974cfd0cf8f1625b1937b5912da5d8c7a31e4ee5f3c78402be40d98a076ba82b64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80636dcee4ca11610125578063b88d4fde116100ad578063e11c81441161007c578063e11c81441461062c578063e985e9c514610648578063f0503e8014610678578063f2fde38b146106a9578063fca3b5aa146106c557610211565b8063b88d4fde14610580578063bd11f69d1461059c578063c68b49d1146105cc578063c87b56dd146105fc57610211565b80638da5cb5b116100f45780638da5cb5b146104da578063949d225d146104f8578063955968d41461051657806395d89b4114610546578063a22cb4651461056457610211565b80636dcee4ca1461046657806370a0823114610496578063715018a6146104c657806376daebe1146104d057610211565b806323b872dd116101a857806342966c681161017757806342966c68146103c057806348e896ab146103dc5780634f2f005e146103fa578063568a1844146104185780636352211e1461043657610211565b806323b872dd1461032857806330d871c61461034457806333af59891461037457806342842e0e146103a457610211565b8063095ea7b3116101e4578063095ea7b3146102b25780631249c58b146102ce57806318160ddd146102ec5780631e688e101461030a57610211565b806301ffc9a71461021657806306fdde03146102465780630754617214610264578063081812fc14610282575b600080fd5b610230600480360381019061022b9190612f04565b6106e1565b60405161023d919061375e565b60405180910390f35b61024e6107c3565b60405161025b9190613779565b60405180910390f35b61026c610855565b60405161027991906136f7565b60405180910390f35b61029c60048036038101906102979190612fa7565b61087b565b6040516102a991906136f7565b60405180910390f35b6102cc60048036038101906102c79190612ec4565b610900565b005b6102d6610a18565b6040516102e391906139bb565b60405180910390f35b6102f4610af1565b60405161030191906139bb565b60405180910390f35b610312610af7565b60405161031f919061375e565b60405180910390f35b610342600480360381019061033d9190612dae565b610b0a565b005b61035e60048036038101906103599190612f5e565b610b6a565b60405161036b9190613779565b60405180910390f35b61038e60048036038101906103899190612fa7565b610c03565b60405161039b9190613779565b60405180910390f35b6103be60048036038101906103b99190612dae565b610dcf565b005b6103da60048036038101906103d59190612fa7565b610def565b005b6103e4610e8b565b6040516103f191906139bb565b60405180910390f35b610402610e91565b60405161040f91906139bb565b60405180910390f35b610420610e97565b60405161042d91906139bb565b60405180910390f35b610450600480360381019061044b9190612fa7565b610e9d565b60405161045d91906136f7565b60405180910390f35b610480600480360381019061047b9190612fa7565b610f4f565b60405161048d9190613779565b60405180910390f35b6104b060048036038101906104ab9190612d41565b611051565b6040516104bd91906139bb565b60405180910390f35b6104ce611109565b005b6104d8611191565b005b6104e261127a565b6040516104ef91906136f7565b60405180910390f35b6105006112a4565b60405161050d91906139bb565b60405180910390f35b610530600480360381019061052b9190612fa7565b6112aa565b60405161053d9190613779565b60405180910390f35b61054e611356565b60405161055b9190613779565b60405180910390f35b61057e60048036038101906105799190612e84565b6113e8565b005b61059a60048036038101906105959190612e01565b611569565b005b6105b660048036038101906105b19190612fa7565b6115cb565b6040516105c39190613779565b60405180910390f35b6105e660048036038101906105e19190612fa7565b611677565b6040516105f39190613779565b60405180910390f35b61061660048036038101906106119190612fa7565b611810565b6040516106239190613779565b60405180910390f35b61064660048036038101906106419190612fa7565b61190a565b005b610662600480360381019061065d9190612d6e565b611990565b60405161066f919061375e565b60405180910390f35b610692600480360381019061068d9190612fa7565b611a24565b6040516106a09291906139d6565b60405180910390f35b6106c360048036038101906106be9190612d41565b611a48565b005b6106df60048036038101906106da9190612d41565b611b40565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107ac57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107bc57506107bb82611c50565b5b9050919050565b6060600080546107d290613f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107fe90613f8b565b801561084b5780601f106108205761010080835404028352916020019161084b565b820191906000526020600020905b81548152906001019060200180831161082e57829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061088682611cba565b6108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc9061391b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061090b82610e9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561097c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109739061397b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661099b611d26565b73ffffffffffffffffffffffffffffffffffffffff1614806109ca57506109c9816109c4611d26565b611990565b5b610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a009061389b565b60405180910390fd5b610a138383611d2e565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa1906137db565b60405180910390fd5b610aec600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660096000815480929190610ae390613fee565b91905055611de7565b905090565b60085481565b600a60009054906101000a900460ff1681565b610b1b610b15611d26565b82611e3e565b610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b519061399b565b60405180910390fd5b610b65838383611f1c565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610bd084604051602001610bbc9190613504565b604051602081830303815290604052612178565b905060008282604051602001610be792919061351b565b6040516020818303038152906040529050809350505050919050565b60606000600160105484610c179190614037565b610c219190613b5d565b90506040518060400160405280600981526020017f3c7061746820643d220000000000000000000000000000000000000000000000815250915060005b81811015610ce95760008482601154610c779190613b5d565b604051602001610c889291906139d6565b6040516020818303038152906040528051906020012060001c90506000610cae82611677565b90508481604051602001610cc392919061351b565b604051602081830303815290604052945050508080610ce190613fee565b915050610c5e565b5060006013808054905085610cfe9190614037565b81548110610d0f57610d0e6140f5565b5b906000526020600020018054610d2490613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5090613f8b565b8015610d9d5780601f10610d7257610100808354040283529160200191610d9d565b820191906000526020600020905b815481529060010190602001808311610d8057829003601f168201915b505050505090508281604051602001610db7929190613591565b60405160208183030381529060405292505050919050565b610dea83838360405180602001604052806000815250611569565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e76906137db565b60405180910390fd5b610e88816122f1565b50565b60105481565b600c5481565b600f5481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d906138db565b60405180910390fd5b80915050919050565b606060006001600f5484610f639190614037565b610f6d9190613b5d565b9050610f7a601154612402565b610f85601154612402565b604051602001610f96929190613690565b604051602081830303815290604052915060005b818110156110285760008482604051602001610fc79291906139d6565b6040516020818303038152906040528051906020012060001c90506000610fed82610c03565b9050848160405160200161100292919061351b565b60405160208183030381529060405294505050808061102090613fee565b915050610faa565b508160405160200161103a91906135cb565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b9906138bb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611111611d26565b73ffffffffffffffffffffffffffffffffffffffff1661112f61127a565b73ffffffffffffffffffffffffffffffffffffffff1614611185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117c9061393b565b60405180910390fd5b61118f600061258b565b565b611199611d26565b73ffffffffffffffffffffffffffffffffffffffff166111b761127a565b73ffffffffffffffffffffffffffffffffffffffff161461120d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112049061393b565b60405180910390fd5b600a60009054906101000a900460ff161561125d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112549061387b565b60405180910390fd5b6001600a60006101000a81548160ff021916908315150217905550565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60115481565b601281815481106112ba57600080fd5b9060005260206000200160009150905080546112d590613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461130190613f8b565b801561134e5780601f106113235761010080835404028352916020019161134e565b820191906000526020600020905b81548152906001019060200180831161133157829003601f168201915b505050505081565b60606001805461136590613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461139190613f8b565b80156113de5780601f106113b3576101008083540402835291602001916113de565b820191906000526020600020905b8154815290600101906020018083116113c157829003601f168201915b5050505050905090565b6113f0611d26565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561145e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114559061383b565b60405180910390fd5b806005600061146b611d26565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611518611d26565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161155d919061375e565b60405180910390a35050565b61157a611574611d26565b83611e3e565b6115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b09061399b565b60405180910390fd5b6115c584848484612651565b50505050565b601381815481106115db57600080fd5b9060005260206000200160009150905080546115f690613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461162290613f8b565b801561166f5780601f106116445761010080835404028352916020019161166f565b820191906000526020600020905b81548152906001019060200180831161165257829003601f168201915b505050505081565b6060601280805490508361168b9190614037565b8154811061169c5761169b6140f5565b5b9060005260206000200180546116b190613f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546116dd90613f8b565b801561172a5780601f106116ff5761010080835404028352916020019161172a565b820191906000526020600020905b81548152906001019060200180831161170d57829003601f168201915b5050505050905060006011548360026011546117469190613d9c565b6040516020016117579291906139d6565b6040516020818303038152906040528051906020012060001c61177a9190614037565b9050600060115484600160026011546117939190613d9c565b61179d9190613b5d565b6040516020016117ae9291906139d6565b6040516020818303038152906040528051906020012060001c6117d19190614037565b9050826117dd83612402565b6117e683612402565b6040516020016117f89392919061353f565b60405160208183030381529060405292505050919050565b60606000806000611836600b6000878152602001908152602001600020600001546126ad565b809350819450829550505050600043426118509190613c54565b9050600061185d82610f4f565b9050600061186a82610b6a565b905060006118d4611890600b60008c815260200190815260200160002060010154612402565b61189987612402565b6118a289612402565b6118ab8b612402565b866040516020016118c09594939291906135ed565b604051602081830303815290604052612178565b90506000816040516020016118e991906136d5565b60405160208183030381529060405290508098505050505050505050919050565b611912611d26565b73ffffffffffffffffffffffffffffffffffffffff1661193061127a565b73ffffffffffffffffffffffffffffffffffffffff1614611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197d9061393b565b60405180910390fd5b80600c8190555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600b6020528060005260406000206000915090508060000154908060010154905082565b611a50611d26565b73ffffffffffffffffffffffffffffffffffffffff16611a6e61127a565b73ffffffffffffffffffffffffffffffffffffffff1614611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb9061393b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2b906137bb565b60405180910390fd5b611b3d8161258b565b50565b611b48611d26565b73ffffffffffffffffffffffffffffffffffffffff16611b6661127a565b73ffffffffffffffffffffffffffffffffffffffff1614611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb39061393b565b60405180910390fd5b600a60009054906101000a900460ff1615611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c039061387b565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611da183610e9d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006040518060400160405280600c5481526020016014815250600b60008481526020019081526020016000206000820151816000015560208201518160010155905050611e3583836126dc565b81905092915050565b6000611e4982611cba565b611e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f9061385b565b60405180910390fd5b6000611e9383610e9d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f0257508373ffffffffffffffffffffffffffffffffffffffff16611eea8461087b565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f135750611f128185611990565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f3c82610e9d565b73ffffffffffffffffffffffffffffffffffffffff1614611f92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f899061395b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff99061381b565b60405180910390fd5b61200d8383836128aa565b612018600082611d2e565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120689190613e8a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120bf9190613b5d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b606060008251141561219b576040518060200160405280600081525090506122ec565b600060405180606001604052806040815260200161490960409139905060006003600285516121ca9190613b5d565b6121d49190613c54565b60046121e09190613d9c565b905060006020826121f19190613b5d565b67ffffffffffffffff81111561220a57612209614124565b5b6040519080825280601f01601f19166020018201604052801561223c5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156122ab576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612250565b6003895106600181146122c557600281146122d5576122e0565b613d3d60f01b60028303526122e0565b603d60f81b60018303525b50505050508093505050505b919050565b60006122fc82610e9d565b905061230a816000846128aa565b612315600083611d2e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123659190613e8a565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6060600082141561244a576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612586565b600082905060005b6000821461247c57808061246590613fee565b915050600a826124759190613c54565b9150612452565b60008167ffffffffffffffff81111561249857612497614124565b5b6040519080825280601f01601f1916602001820160405280156124ca5781602001600182028036833780820191505090505b50905060008290505b6000861461257e576001816124e89190613e8a565b90506000600a80886124fa9190613c54565b6125049190613d9c565b8761250f9190613e8a565b603061251b9190613bb3565b905060008160f81b905080848481518110612539576125386140f5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886125759190613c54565b975050506124d3565b819450505050505b919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61265c848484611f1c565b612668848484846128af565b6126a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269e9061379b565b60405180910390fd5b50505050565b60008060006126c962015180856126c49190613c54565b612a46565b8093508194508295505050509193909250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561274c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612743906138fb565b60405180910390fd5b61275581611cba565b15612795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278c906137fb565b60405180910390fd5b6127a1600083836128aa565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127f19190613b5d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b60006128d08473ffffffffffffffffffffffffffffffffffffffff16612be5565b15612a39578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026128f9611d26565b8786866040518563ffffffff1660e01b815260040161291b9493929190613712565b602060405180830381600087803b15801561293557600080fd5b505af192505050801561296657506040513d601f19601f820116820180604052508101906129639190612f31565b60015b6129e9573d8060008114612996576040519150601f19603f3d011682016040523d82523d6000602084013e61299b565b606091505b506000815114156129e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d89061379b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612a3e565b600190505b949350505050565b600080600080849050600062253d8c62010bd983612a649190613ac9565b612a6e9190613ac9565b9050600062023ab1826004612a839190613c85565b612a8d9190613bea565b9050600460038262023ab1612aa29190613c85565b612aac9190613ac9565b612ab69190613bea565b82612ac19190613df6565b9150600062164b09600184612ad69190613ac9565b610fa0612ae39190613c85565b612aed9190613bea565b9050601f6004826105b5612b019190613c85565b612b0b9190613bea565b84612b169190613df6565b612b209190613ac9565b9250600061098f846050612b349190613c85565b612b3e9190613bea565b9050600060508261098f612b529190613c85565b612b5c9190613bea565b85612b679190613df6565b9050600b82612b769190613bea565b945084600c612b859190613c85565b600283612b929190613ac9565b612b9c9190613df6565b91508483603186612bad9190613df6565b6064612bb99190613c85565b612bc39190613ac9565b612bcd9190613ac9565b92508298508197508096505050505050509193909250565b600080823b905060008111915050919050565b6000612c0b612c0684613a24565b6139ff565b905082815260208101848484011115612c2757612c26614158565b5b612c32848285613f49565b509392505050565b6000612c4d612c4884613a55565b6139ff565b905082815260208101848484011115612c6957612c68614158565b5b612c74848285613f49565b509392505050565b600081359050612c8b816148ac565b92915050565b600081359050612ca0816148c3565b92915050565b600081359050612cb5816148da565b92915050565b600081519050612cca816148da565b92915050565b600082601f830112612ce557612ce4614153565b5b8135612cf5848260208601612bf8565b91505092915050565b600082601f830112612d1357612d12614153565b5b8135612d23848260208601612c3a565b91505092915050565b600081359050612d3b816148f1565b92915050565b600060208284031215612d5757612d56614162565b5b6000612d6584828501612c7c565b91505092915050565b60008060408385031215612d8557612d84614162565b5b6000612d9385828601612c7c565b9250506020612da485828601612c7c565b9150509250929050565b600080600060608486031215612dc757612dc6614162565b5b6000612dd586828701612c7c565b9350506020612de686828701612c7c565b9250506040612df786828701612d2c565b9150509250925092565b60008060008060808587031215612e1b57612e1a614162565b5b6000612e2987828801612c7c565b9450506020612e3a87828801612c7c565b9350506040612e4b87828801612d2c565b925050606085013567ffffffffffffffff811115612e6c57612e6b61415d565b5b612e7887828801612cd0565b91505092959194509250565b60008060408385031215612e9b57612e9a614162565b5b6000612ea985828601612c7c565b9250506020612eba85828601612c91565b9150509250929050565b60008060408385031215612edb57612eda614162565b5b6000612ee985828601612c7c565b9250506020612efa85828601612d2c565b9150509250929050565b600060208284031215612f1a57612f19614162565b5b6000612f2884828501612ca6565b91505092915050565b600060208284031215612f4757612f46614162565b5b6000612f5584828501612cbb565b91505092915050565b600060208284031215612f7457612f73614162565b5b600082013567ffffffffffffffff811115612f9257612f9161415d565b5b612f9e84828501612cfe565b91505092915050565b600060208284031215612fbd57612fbc614162565b5b6000612fcb84828501612d2c565b91505092915050565b612fdd81613ebe565b82525050565b612fec81613ed0565b82525050565b6000612ffd82613a86565b6130078185613a9c565b9350613017818560208601613f58565b61302081614167565b840191505092915050565b600061303682613a91565b6130408185613aad565b9350613050818560208601613f58565b61305981614167565b840191505092915050565b600061306f82613a91565b6130798185613abe565b9350613089818560208601613f58565b80840191505092915050565b60006130a2603283613aad565b91506130ad82614178565b604082019050919050565b60006130c5602683613aad565b91506130d0826141c7565b604082019050919050565b60006130e8601883613aad565b91506130f382614216565b602082019050919050565b600061310b601c83613aad565b91506131168261423f565b602082019050919050565b600061312e601b83613abe565b915061313982614268565b601b82019050919050565b6000613151602483613aad565b915061315c82614291565b604082019050919050565b6000613174601983613aad565b915061317f826142e0565b602082019050919050565b6000613197602c83613aad565b91506131a282614309565b604082019050919050565b60006131ba601083613aad565b91506131c582614358565b602082019050919050565b60006131dd600183613abe565b91506131e882614381565b600182019050919050565b6000613200603883613aad565b915061320b826143aa565b604082019050919050565b6000613223602a83613aad565b915061322e826143f9565b604082019050919050565b6000613246602983613aad565b915061325182614448565b604082019050919050565b6000613269604383613abe565b915061327482614497565b604382019050919050565b600061328c600283613abe565b91506132978261450c565b600282019050919050565b60006132af602083613aad565b91506132ba82614535565b602082019050919050565b60006132d2600d83613abe565b91506132dd8261455e565b600d82019050919050565b60006132f5602c83613aad565b915061330082614587565b604082019050919050565b6000613318602083613aad565b9150613323826145d6565b602082019050919050565b600061333b601283613abe565b9150613346826145ff565b601282019050919050565b600061335e602983613aad565b915061336982614628565b604082019050919050565b6000613381603083613abe565b915061338c82614677565b603082019050919050565b60006133a4600383613abe565b91506133af826146c6565b600382019050919050565b60006133c7602183613aad565b91506133d2826146ef565b604082019050919050565b60006133ea601d83613abe565b91506133f58261473e565b601d82019050919050565b600061340d601d83613abe565b915061341882614767565b601d82019050919050565b6000613430603183613aad565b915061343b82614790565b604082019050919050565b6000613453600283613abe565b915061345e826147df565b600282019050919050565b6000613476600683613abe565b915061348182614808565b600682019050919050565b6000613499600983613abe565b91506134a482614831565b600982019050919050565b60006134bc601683613abe565b91506134c78261485a565b601682019050919050565b60006134df600183613abe565b91506134ea82614883565b600182019050919050565b6134fe81613f32565b82525050565b60006135108284613064565b915081905092915050565b60006135278285613064565b91506135338284613064565b91508190509392505050565b600061354b8286613064565b9150613556826131d0565b91506135628285613064565b915061356d826131d0565b91506135798284613064565b9150613584826131d0565b9150819050949350505050565b600061359d8285613064565b91506135a8826133dd565b91506135b48284613064565b91506135bf82613397565b91508190509392505050565b60006135d78284613064565b91506135e282613469565b915081905092915050565b60006135f882613121565b91506136038261325c565b915061360e8261332e565b915061361a8288613064565b9150613625826134af565b91506136318287613064565b915061363c826134d2565b91506136488286613064565b9150613653826134d2565b915061365f8285613064565b915061366a826132c5565b91506136768284613064565b91506136818261327f565b91508190509695505050505050565b600061369b82613374565b91506136a78285613064565b91506136b28261348c565b91506136be8284613064565b91506136c982613446565b91508190509392505050565b60006136e082613400565b91506136ec8284613064565b915081905092915050565b600060208201905061370c6000830184612fd4565b92915050565b60006080820190506137276000830187612fd4565b6137346020830186612fd4565b61374160408301856134f5565b81810360608301526137538184612ff2565b905095945050505050565b60006020820190506137736000830184612fe3565b92915050565b60006020820190508181036000830152613793818461302b565b905092915050565b600060208201905081810360008301526137b481613095565b9050919050565b600060208201905081810360008301526137d4816130b8565b9050919050565b600060208201905081810360008301526137f4816130db565b9050919050565b60006020820190508181036000830152613814816130fe565b9050919050565b6000602082019050818103600083015261383481613144565b9050919050565b6000602082019050818103600083015261385481613167565b9050919050565b600060208201905081810360008301526138748161318a565b9050919050565b60006020820190508181036000830152613894816131ad565b9050919050565b600060208201905081810360008301526138b4816131f3565b9050919050565b600060208201905081810360008301526138d481613216565b9050919050565b600060208201905081810360008301526138f481613239565b9050919050565b60006020820190508181036000830152613914816132a2565b9050919050565b60006020820190508181036000830152613934816132e8565b9050919050565b600060208201905081810360008301526139548161330b565b9050919050565b6000602082019050818103600083015261397481613351565b9050919050565b60006020820190508181036000830152613994816133ba565b9050919050565b600060208201905081810360008301526139b481613423565b9050919050565b60006020820190506139d060008301846134f5565b92915050565b60006040820190506139eb60008301856134f5565b6139f860208301846134f5565b9392505050565b6000613a09613a1a565b9050613a158282613fbd565b919050565b6000604051905090565b600067ffffffffffffffff821115613a3f57613a3e614124565b5b613a4882614167565b9050602081019050919050565b600067ffffffffffffffff821115613a7057613a6f614124565b5b613a7982614167565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ad482613f08565b9150613adf83613f08565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615613b1a57613b19614068565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615613b5257613b51614068565b5b828201905092915050565b6000613b6882613f32565b9150613b7383613f32565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ba857613ba7614068565b5b828201905092915050565b6000613bbe82613f3c565b9150613bc983613f3c565b92508260ff03821115613bdf57613bde614068565b5b828201905092915050565b6000613bf582613f08565b9150613c0083613f08565b925082613c1057613c0f614097565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615613c4957613c48614068565b5b828205905092915050565b6000613c5f82613f32565b9150613c6a83613f32565b925082613c7a57613c79614097565b5b828204905092915050565b6000613c9082613f08565b9150613c9b83613f08565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615613cda57613cd9614068565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615613d1757613d16614068565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615613d5457613d53614068565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615613d9157613d90614068565b5b828202905092915050565b6000613da782613f32565b9150613db283613f32565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613deb57613dea614068565b5b828202905092915050565b6000613e0182613f08565b9150613e0c83613f08565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615613e4757613e46614068565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615613e7f57613e7e614068565b5b828203905092915050565b6000613e9582613f32565b9150613ea083613f32565b925082821015613eb357613eb2614068565b5b828203905092915050565b6000613ec982613f12565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613f76578082015181840152602081019050613f5b565b83811115613f85576000848401525b50505050565b60006002820490506001821680613fa357607f821691505b60208210811415613fb757613fb66140c6565b5b50919050565b613fc682614167565b810181811067ffffffffffffffff82111715613fe557613fe4614124565b5b80604052505050565b6000613ff982613f32565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561402c5761402b614068565b5b600182019050919050565b600061404282613f32565b915061404d83613f32565b92508261405d5761405c614097565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206973206e6f7420746865206d696e7465720000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f7b226e616d65223a202245636f6e746572696320426f6f6b222c200000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4d696e746572206973206c6f636b656400000000000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f226465736372697074696f6e223a202245636f6e6f6d69637320616e64204d6160008201527f7468206f6620546f6b656e20456e67696e656572696e6720616e64204465466960208201527f222c200000000000000000000000000000000000000000000000000000000000604082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f226e756d6265724f66426f6f6b73223a20220000000000000000000000000000600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766722206865696768743d2200000000000000000000000000000000602082015250565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f222066696c6c3d227472616e73706172656e7422207374726f6b653d22000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f223e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f222c202265787069726174696f6e44617465223a202200000000000000000000600082015250565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b6148b581613ebe565b81146148c057600080fd5b50565b6148cc81613ed0565b81146148d757600080fd5b50565b6148e381613edc565b81146148ee57600080fd5b50565b6148fa81613f32565b811461490557600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220974cfd0cf8f1625b1937b5912da5d8c7a31e4ee5f3c78402be40d98a076ba82b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn a nft."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 593,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 595,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 599,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 603,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 607,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 613,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 393,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2793,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "minter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2795,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2797,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_currentEconNFTId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2799,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "isMinterLocked",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2804,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "seeds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Seed)2791_storage)"
      },
      {
        "astId": 2806,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "currentExpirationDate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2810,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2814,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2826,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "maxNumberOfPath",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2828,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "maxNumberOfPathCommands",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2830,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "size",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2833,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "pathCommands",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2836,
        "contract": "contracts/EconNFT.sol:EconNFT",
        "label": "colors",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)2791_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EconNFT.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)2791_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Seed)2791_storage": {
        "encoding": "inplace",
        "label": "struct EconNFT.Seed",
        "members": [
          {
            "astId": 2788,
            "contract": "contracts/EconNFT.sol:EconNFT",
            "label": "expirationDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2790,
            "contract": "contracts/EconNFT.sol:EconNFT",
            "label": "numberOfBooks",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}