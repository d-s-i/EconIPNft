{
  "address": "0x201aDD7b7957FA2438C3D131063F219d07025CF7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "econNFTId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExpirationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "econAuctionHouse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePath",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathSvg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePathCommand",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathCommand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "finalSvg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentExpirationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPeriodPassed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinterLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPath",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfPeriodPassed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAuctionHouse",
          "type": "address"
        }
      ],
      "name": "setAuctionHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newExpirationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setCurrentExpirationTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ac4f00fbc4b22a813f230baed49a66bf9824c96bbe3eeca0763b74c1a2a93d3",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x201aDD7b7957FA2438C3D131063F219d07025CF7",
    "transactionIndex": 32,
    "gasUsed": "2727631",
    "logsBloom": "0x
    "blockHash": "0x805ff5d1d343ccc29adcb39358cc8e25dde1a08917e34561c5d8e3bdd8601f98",
    "transactionHash": "0x8ac4f00fbc4b22a813f230baed49a66bf9824c96bbe3eeca0763b74c1a2a93d3",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 10075940,
        "transactionHash": "0x8ac4f00fbc4b22a813f230baed49a66bf9824c96bbe3eeca0763b74c1a2a93d3",
        "address": "0x201aDD7b7957FA2438C3D131063F219d07025CF7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004428161dbd37d935c64894525f91039e1a6e4a1e"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x805ff5d1d343ccc29adcb39358cc8e25dde1a08917e34561c5d8e3bdd8601f98"
      }
    ],
    "blockNumber": 10075940,
    "cumulativeGasUsed": "4841443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    1659013091
  ],
  "solcInputHash": "dc79de28ef606609174219cc56dc3594",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"econNFTId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpirationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"econAuctionHouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathSvg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePathCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathCommand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"finalSvg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExpirationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPeriodPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinterLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPeriodPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuctionHouse\",\"type\":\"address\"}],\"name\":\"setAuctionHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExpirationTimestamp\",\"type\":\"uint256\"}],\"name\":\"setCurrentExpirationTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"econNFTId\":\"the id of the NFT you want to burn.\"}},\"constructor\":{\"details\":\"Variables used to make the JPEG are set in order to construct an SVG later on. \",\"params\":{\"_expirationTimestamp\":\"the date where the EconNFT will expire (timestamp in seconds).\",\"_totalSupply\":\"maximum number of NFT that is going to be minted.\"}},\"generatePath(uint256)\":{\"details\":\"Function called by the `generateSVG()` function.\",\"params\":{\"_randomNumber\":\"is a random number from the `generatePath()` function.\"},\"returns\":{\"pathSvg\":\"a string containing all SVG instructions.\"}},\"generatePathCommand(uint256)\":{\"details\":\"Called by the `generatePath()` function.\",\"params\":{\"_randomNumber\":\"is a random number from the `generatePath()` function.\"},\"returns\":{\"pathCommand\":\"a string containing the paths to create the SVG.\"}},\"generateSVG(uint256)\":{\"details\":\"The random number is used to print random lines and random colors on the final SVG.\",\"params\":{\"_randomNumber\":\"is a random number used to construct the SVG (the more random the better).\"},\"returns\":{\"finalSvg\":\"the full SVG component readable by a browser.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint()\":{\"details\":\"Create a new NFT and send it to the minter.\",\"returns\":{\"_0\":\"Return the id of the minted NFT.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setCurrentExpirationTimestamp(uint256)\":{\"params\":{\"_newExpirationTimestamp\":\"the new timestamp.\"}},\"setMinter(address)\":{\"params\":{\"_minter\":\"The new minter address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"svgToImageURI(string)\":{\"params\":{\"_svg\":\"is the SVG component.\"},\"returns\":{\"_0\":\"imageURI a string readable by the browser which will display the SVG.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the id of the token you would like to read information from.\"},\"returns\":{\"_0\":\"data a 64 based encoded string containing a json object with all the informations.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Economics Design Property Right NFT.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0).\"},\"generatePath(uint256)\":{\"notice\":\"Generate different paths that creates the SVG lines.\"},\"generatePathCommand(uint256)\":{\"notice\":\"Generate the paths to create the SVG.\"},\"generateSVG(uint256)\":{\"notice\":\"Generate a full SVG component.\"},\"getCurrentExpirationTimestamp()\":{\"notice\":\"Used mainly for the auction house.\"},\"getNumberOfPeriodPassed()\":{\"notice\":\"Used mainly for the auction house.\"},\"lockMinter()\":{\"notice\":\"Lock the minter from calling certain functions.\"},\"mint()\":{\"notice\":\"Mint a new NFT.\"},\"setCurrentExpirationTimestamp(uint256)\":{\"notice\":\"Change the expiration timestamp of the future NFTs about to get minted.\"},\"setMinter(address)\":{\"notice\":\"Change the minter address.\"},\"svgToImageURI(string)\":{\"notice\":\"Takes a SVG and encode it while still keeping it readable by a browser.\"},\"tokenURI(uint256)\":{\"notice\":\"Contain all the informations needed for read this NFT informations.\"}},\"notice\":\"Contract used to verify the ownership of the Economics Design book property rights.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EconNFTERC721.sol\":\"EconNFTERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, Ownable {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    address public econAuctionHouse;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) Ownable() {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function setAuctionHouse(address newAuctionHouse) public onlyOwner {\\r\\n        econAuctionHouse = newAuctionHouse;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"lol\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n\\r\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\r\\n        if(operator == econAuctionHouse) {\\r\\n            return true;\\r\\n        }\\r\\n        return _operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x64c190b133abf63d8d11a2ea1906f63686a733f0d01eb4f11255aac7da6d0099\",\"license\":\"MIT\"},\"contracts/EconNFTERC721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { ERC721 } from \\\"./ERC721.sol\\\";\\r\\nimport \\\"./interfaces/IEconNFTERC721.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/// @title Economics Design Property Right NFT.\\r\\n/// @notice Contract used to verify the ownership of the Economics Design book property rights.\\r\\ncontract EconNFTERC721 is ERC721, IEconNFTERC721 {\\r\\n\\r\\n    // expiration timestamp of the NFT, date after the owner won't be able to buy books anymore. \\r\\n    struct Seed {\\r\\n        uint256 expirationTimestamp;\\r\\n    }\\r\\n\\r\\n    // Minter of the EconNFT. \\r\\n    address public minter;  \\r\\n\\r\\n    // Id currently auctionned.\\r\\n    uint256 private _currentEconNFTId;\\r\\n\\r\\n    bool public isMinterLocked;\\r\\n\\r\\n    // Contain information about the NFT that are set when its first minted.\\r\\n    mapping(uint256 => Seed) public seeds;\\r\\n\\r\\n    // Expiration timestamp currently associated with each EconNFT.\\r\\n    uint256 public currentExpirationTimestamp;\\r\\n\\r\\n    // Number of epoch passed, used for the auctionHouse\\r\\n    uint256 public numberOfPeriodPassed;\\r\\n\\r\\n    // Constant used to translate a timestamp into a date for tokenURI().\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    // Constant used to translate a timestamp into a date for tokenURI() as timestamps start from 01/01/1970.\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    // Variables used to make the JPEG image.\\r\\n    uint256 public maxNumberOfPath;\\r\\n    uint256 public maxNumberOfPathCommands;\\r\\n    uint256 public size;\\r\\n    string[] public pathCommands;\\r\\n    string[] public colors;\\r\\n\\r\\n    /// @param _totalSupply maximum number of NFT that is going to be minted.\\r\\n    /// @param _expirationTimestamp the date where the EconNFT will expire (timestamp in seconds).\\r\\n    /// @dev Variables used to make the JPEG are set in order to construct an SVG later on. \\r\\n    constructor(uint256 _totalSupply, uint256 _expirationTimestamp) ERC721(\\\"Econteric IP\\\", \\\"ECIP\\\") public {\\r\\n        isMinterLocked = false;\\r\\n        _currentEconNFTId = 0;\\r\\n        numberOfPeriodPassed = 0;\\r\\n        currentExpirationTimestamp = _expirationTimestamp;\\r\\n\\r\\n        maxNumberOfPath = 10;\\r\\n        maxNumberOfPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n        colors = [\\\"red\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"black\\\", \\\"white\\\"];\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict a function only when minter is not locked (i.e. isMinterLocked == false).\\r\\n    modifier whenMinterNotLocked() {\\r\\n        require(!isMinterLocked, \\\"EconNFT: Minter is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Restrict a function to be called only by the minter address.\\r\\n    modifier onlyMinter() {\\r\\n        require(msg.sender == minter, \\\"EconNFT: Sender is not the minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a new NFT.\\r\\n    /// @return Return the id of the minted NFT.\\r\\n    /// @dev Create a new NFT and send it to the minter.\\r\\n    function mint() public onlyMinter returns (uint256) {\\r\\n        return _mintTo(minter, _currentEconNFTId++);\\r\\n    }\\r\\n\\r\\n    /// @notice Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0).\\r\\n    /// @param econNFTId the id of the NFT you want to burn.\\r\\n    function burn(uint256 econNFTId) public onlyMinter {\\r\\n        _burn(econNFTId);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint an property right NFT.\\r\\n    /// @param to the address to send to the minted NFT.\\r\\n    /// @param econNFTId the id of the NFT to mint.\\r\\n    function _mintTo(address to, uint256 econNFTId) internal returns (uint256) {\\r\\n        seeds[econNFTId] = Seed({\\r\\n            expirationTimestamp: currentExpirationTimestamp\\r\\n        });\\r\\n        _mint(to, econNFTId);\\r\\n\\r\\n        return econNFTId;\\r\\n    }\\r\\n\\r\\n    /// @notice Contain all the informations needed for read this NFT informations.\\r\\n    /// @param tokenId the id of the token you would like to read information from.\\r\\n    /// @return data a 64 based encoded string containing a json object with all the informations.\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        uint256 year;\\r\\n        uint256 month;\\r\\n        uint256 day;\\r\\n        (year, month, day) = timestampToDate(seeds[tokenId].expirationTimestamp); \\r\\n        uint256 randomNumber = block.timestamp / block.number;\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        string memory json = Base64.encode(bytes(abi.encodePacked(\\r\\n            '{ \\\"name\\\": \\\"Economics Design Book\\\", ', \\r\\n            '\\\"description\\\": \\\"Economics and Math of Token Engineering and DeFi\\\"', \\r\\n            ', \\\"expirationDate\\\": \\\"',\\r\\n            uint2str(day),\\r\\n            '/',\\r\\n            uint2str(month),\\r\\n            '/',\\r\\n            uint2str(year),\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            imageURI,\\r\\n            '\\\" }'\\r\\n        )));\\r\\n\\r\\n        string memory data = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /// @notice Transform a uint type into a string type. Used to encode tokenURI().\\r\\n    /// @param _i the uint to encode into string.\\r\\n    /// @return _uintAsString the same number but in a string format.\\r\\n    /// @dev Function taken from https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    /// @notice Takes a timestamp in seconds and convert it into a human readable date.\\r\\n    /// @param timestamp the timestamp you want to convert.\\r\\n    /// @return year the year from your timestamp.\\r\\n    /// @return month the month from your timestamp (between 1 and 12).\\r\\n    /// @return day the day from your timestamp (between 1 and 31).\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate year/month/day from the number of days _days since 1970/01/01.\\r\\n    /// @param _days the number of day between the timestamp you can to convert into a date and 01/01/1970.\\r\\n    /// @return year the year from your timestamp.\\r\\n    /// @return month the month from your timestamp (between 1 and 12).\\r\\n    /// @return day the day from your timestamp (between 1 and 31).\\r\\n    /// @dev Function taken from https://etherscan.io/address/0x78f96b2d5f717fa9ad416957b79d825cc4cce69d#code.\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    /// @notice Generate a full SVG component.\\r\\n    /// @param _randomNumber is a random number used to construct the SVG (the more random the better).\\r\\n    /// @return finalSvg the full SVG component readable by a browser.\\r\\n    /// @dev The random number is used to print random lines and random colors on the final SVG.\\r\\n    function generateSVG(uint256 _randomNumber) public view returns(string memory finalSvg) {\\r\\n        uint256 numberOfPath = (_randomNumber % maxNumberOfPath) + 1;\\r\\n        finalSvg = string(abi.encodePacked('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"', uint2str(size), '\\\" width=\\\"', uint2str(size), '\\\">'));\\r\\n        for(uint i = 0; i < numberOfPath; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSvg = generatePath(newRNG);\\r\\n            finalSvg = string(abi.encodePacked(finalSvg, pathSvg));\\r\\n        }\\r\\n        finalSvg = string(abi.encodePacked(finalSvg, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Generate different paths that creates the SVG lines.\\r\\n    /// @param _randomNumber is a random number from the `generatePath()` function.\\r\\n    /// @return pathSvg a string containing all SVG instructions.\\r\\n    /// @dev Function called by the `generateSVG()` function.\\r\\n    function generatePath(uint256 _randomNumber) public view returns(string memory pathSvg) {\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxNumberOfPathCommands) + 1;\\r\\n        pathSvg = '<path d=\\\"';\\r\\n        for(uint i = 0; i < numberOfPathCommands; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\\r\\n            string memory pathCommand = generatePathCommand(newRNG);\\r\\n            pathSvg = string(abi.encodePacked(pathSvg, pathCommand));\\r\\n        }\\r\\n        string memory color = colors[_randomNumber % colors.length];\\r\\n        pathSvg = string(abi.encodePacked(pathSvg, '\\\" fill=\\\"transparent\\\" stroke=\\\"', color, '\\\"/>'));\\r\\n    }\\r\\n\\r\\n    /// @notice Generate the paths to create the SVG.\\r\\n    /// @param _randomNumber is a random number from the `generatePath()` function.\\r\\n    /// @return pathCommand a string containing the paths to create the SVG.\\r\\n    /// @dev Called by the `generatePath()` function.\\r\\n    function generatePathCommand(uint256 _randomNumber) public view returns(string memory pathCommand) {\\r\\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\\r\\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 2 + 1))) % size;\\r\\n        pathCommand = string(abi.encodePacked(pathCommand, \\\" \\\", uint2str(parameterOne), \\\" \\\", uint2str(parameterTwo), \\\" \\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Takes a SVG and encode it while still keeping it readable by a browser.\\r\\n    /// @param _svg is the SVG component.\\r\\n    /// @return imageURI a string readable by the browser which will display the SVG.\\r\\n    function svgToImageURI(string memory _svg) public pure returns(string memory) {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(_svg))));\\r\\n        string memory imageURI = string(abi.encodePacked(baseURL, svgBase64Encoded));\\r\\n        return imageURI;\\r\\n    }\\r\\n\\r\\n    /// @notice Change the minter address.\\r\\n    /// @param _minter The new minter address.\\r\\n    function setMinter(address _minter) external onlyOwner whenMinterNotLocked {\\r\\n        minter = _minter;\\r\\n    }\\r\\n\\r\\n    /// @notice Lock the minter from calling certain functions.\\r\\n    function lockMinter() external onlyOwner whenMinterNotLocked {\\r\\n        isMinterLocked = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Change the expiration timestamp of the future NFTs about to get minted.\\r\\n    /// @param _newExpirationTimestamp the new timestamp.\\r\\n    function setCurrentExpirationTimestamp(uint256 _newExpirationTimestamp) external override onlyOwner {\\r\\n        currentExpirationTimestamp = _newExpirationTimestamp;\\r\\n        numberOfPeriodPassed++;\\r\\n    }\\r\\n\\r\\n    /// @notice Used mainly for the auction house.\\r\\n    function getNumberOfPeriodPassed() public view override returns(uint256) {\\r\\n        return numberOfPeriodPassed;\\r\\n    }\\r\\n\\r\\n    /// @notice Used mainly for the auction house.\\r\\n    function getCurrentExpirationTimestamp() public view override returns(uint256) {\\r\\n        return currentExpirationTimestamp;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8b33b0370c0d4c8692e48ece4cb145b05bae8fc754c6f11bd47d97601984efe3\",\"license\":\"MIT\"},\"contracts/interfaces/IEconNFTERC721.sol\":{\"content\":\"interface IEconNFTERC721 {\\r\\n    function setCurrentExpirationTimestamp(uint256 _newExpirationTimestamp) external virtual;\\r\\n    function getNumberOfPeriodPassed() external view virtual returns(uint256);\\r\\n    function getCurrentExpirationTimestamp() external view virtual returns(uint256);\\r\\n}\",\"keccak256\":\"0x11449812ab68858a4a8d571e82e69640f5fe792e788f7f05895ef80cdaa7fc5e\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002da538038062002da5833981016040819052620000349162000435565b6040518060400160405280600c81526020016b045636f6e74657269632049560a41b815250604051806040016040528060048152602001630454349560e41b815250620000906200008a6200022660201b60201c565b6200022a565b8151620000a59060019060208501906200027a565b508051620000bb9060029060208401906200027a565b5050600a805460ff1916815560006009819055600d55600c839055600e55506005600f556101f4601055604080516080810182526001818301818152604d60f81b6060840152825282518084019093528252601360fa1b6020838101919091528101919091526200013190601190600262000309565b506040518060c00160405280604051806040016040528060038152602001621c995960ea1b815250815260200160405180604001604052806004815260200163626c756560e01b81525081526020016040518060400160405280600581526020016433b932b2b760d91b81525081526020016040518060400160405280600681526020016579656c6c6f7760d01b815250815260200160405180604001604052806005815260200164626c61636b60d81b815250815260200160405180604001604052806005815260200164776869746560d81b81525081525060129060066200021d92919062000369565b50505062000497565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805462000288906200045a565b90600052602060002090601f016020900481019282620002ac5760008555620002f7565b82601f10620002c757805160ff1916838001178555620002f7565b82800160010185558215620002f7579182015b82811115620002f7578251825591602001919060010190620002da565b5062000305929150620003bb565b5090565b8280548282559060005260206000209081019282156200035b579160200282015b828111156200035b57825180516200034a9184916020909101906200027a565b50916020019190600101906200032a565b5062000305929150620003d2565b8280548282559060005260206000209081019282156200035b579160200282015b828111156200035b5782518051620003aa9184916020909101906200027a565b50916020019190600101906200038a565b5b80821115620003055760008155600101620003bc565b8082111562000305576000620003e98282620003f3565b50600101620003d2565b50805462000401906200045a565b6000825580601f1062000412575050565b601f016020900490600052602060002090810190620004329190620003bb565b50565b600080604083850312156200044957600080fd5b505080516020909101519092909150565b600181811c908216806200046f57607f821691505b602082108114156200049157634e487b7160e01b600052602260045260246000fd5b50919050565b6128fe80620004a76000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063715018a61161013b578063c87b56dd116100b8578063f26e54f31161007c578063f26e54f3146104a2578063f2c5df9b146104b5578063f2fde38b146104be578063f838904f146104d1578063fca3b5aa146104e457600080fd5b8063c87b56dd14610440578063d3574ab914610453578063e76d89521461045c578063e985e9c51461046f578063f0503e801461048257600080fd5b806395d89b41116100ff57806395d89b41146103ec578063a22cb465146103f4578063b88d4fde14610407578063bd11f69d1461041a578063c68b49d11461042d57600080fd5b8063715018a6146103af57806376daebe1146103b75780638da5cb5b146103bf578063949d225d146103d0578063955968d4146103d957600080fd5b806330d871c6116101c957806348e896ab1161018d57806348e896ab14610364578063568a18441461036d5780636352211e146103765780636dcee4ca1461038957806370a082311461039c57600080fd5b806330d871c61461031057806333af5989146103235780633607cf3d1461033657806342842e0e1461033e57806342966c681461035157600080fd5b8063095ea7b311610210578063095ea7b3146102bd5780631249c58b146102d25780631399364d146102e85780631e688e10146102f057806323b872dd146102fd57600080fd5b806301ffc9a71461024257806306fdde031461026a578063075461721461027f578063081812fc146102aa575b600080fd5b61025561025036600461202a565b6104f7565b60405190151581526020015b60405180910390f35b610272610549565b60405161026191906124a4565b600854610292906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b6102926102b83660046120ad565b6105db565b6102d06102cb366004612000565b610675565b005b6102da61078b565b604051908152602001610261565b600c546102da565b600a546102559060ff1681565b6102d061030b366004611f0c565b6107e6565b61027261031e366004612064565b610817565b6102726103313660046120ad565b6108ad565b600d546102da565b6102d061034c366004611f0c565b610a62565b6102d061035f3660046120ad565b610a7d565b6102da600f5481565b6102da600e5481565b6102926103843660046120ad565b610ab3565b6102726103973660046120ad565b610b2a565b6102da6103aa366004611eb7565b610c23565b6102d0610caa565b6102d0610ce0565b6000546001600160a01b0316610292565b6102da60105481565b6102726103e73660046120ad565b610d68565b610272610e14565b6102d0610402366004611fc4565b610e23565b6102d0610415366004611f48565b610ee8565b6102726104283660046120ad565b610f20565b61027261043b3660046120ad565b610f30565b61027261044e3660046120ad565b6110ad565b6102da600d5481565b6102d061046a366004611eb7565b611163565b61025561047d366004611ed9565b6111af565b6102da6104903660046120ad565b600b6020526000908152604090205481565b6102d06104b03660046120ad565b6111ff565b6102da600c5481565b6102d06104cc366004611eb7565b611246565b600754610292906001600160a01b031681565b6102d06104f2366004611eb7565b6112de565b60006001600160e01b031982166380ac58cd60e01b148061052857506001600160e01b03198216635b5e139f60e01b145b8061054357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060018054610558906127b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610584906127b6565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166106595760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061068082610ab3565b9050806001600160a01b0316836001600160a01b031614156106ee5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610650565b336001600160a01b038216148061070a575061070a81336111af565b61077c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610650565b6107868383611379565b505050565b6008546000906001600160a01b031633146107b85760405162461bcd60e51b815260040161065090612509565b600854600980546107e1926001600160a01b03169160006107d8836127eb565b919050556113e7565b905090565b6107f03382611418565b61080c5760405162461bcd60e51b81526004016106509061257f565b6107868383836114ef565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152509050600061087d84604051602001610869919061210e565b60405160208183030381529060405261168f565b90506000828260405160200161089492919061212a565b60408051601f1981840301815291905295945050505050565b60606000600f54836108bf9190612806565b6108ca906001612611565b9050604051806040016040528060098152602001681e3830ba3410321e9160b91b815250915060005b8181101561097f576000848260105461090c9190612611565b6040805160208101939093528201526060016040516020818303038152906040528051906020012060001c9050600061094482610f30565b9050848160405160200161095992919061212a565b604051602081830303815290604052945050508080610977906127eb565b9150506108f3565b5060128054600091906109929086612806565b815481106109a2576109a2612846565b9060005260206000200180546109b7906127b6565b80601f01602080910402602001604051908101604052809291908181526020018280546109e3906127b6565b8015610a305780601f10610a0557610100808354040283529160200191610a30565b820191906000526020600020905b815481529060010190602001808311610a1357829003601f168201915b505050505090508281604051602001610a4a9291906121bc565b60405160208183030381529060405292505050919050565b61078683838360405180602001604052806000815250610ee8565b6008546001600160a01b03163314610aa75760405162461bcd60e51b815260040161065090612509565b610ab0816117f5565b50565b6000818152600360205260408120546001600160a01b0316806105435760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610650565b60606000600e5483610b3c9190612806565b610b47906001612611565b9050610b54601054611890565b610b5f601054611890565b604051602001610b7092919061224e565b604051602081830303815290604052915060005b81811015610bfa57604080516020808201879052818301849052825180830384018152606090920190925280519101206000610bbf826108ad565b90508481604051602001610bd492919061212a565b604051602081830303815290604052945050508080610bf2906127eb565b915050610b84565b5081604051602001610c0c9190612224565b604051602081830303815290604052915050919050565b60006001600160a01b038216610c8e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610650565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b03163314610cd45760405162461bcd60e51b81526004016106509061254a565b610cde60006119b9565b565b6000546001600160a01b03163314610d0a5760405162461bcd60e51b81526004016106509061254a565b600a5460ff1615610d595760405162461bcd60e51b81526020600482015260196024820152781158dbdb9391950e88135a5b9d195c881a5cc81b1bd8dad959603a1b6044820152606401610650565b600a805460ff19166001179055565b60118181548110610d7857600080fd5b906000526020600020016000915090508054610d93906127b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbf906127b6565b8015610e0c5780601f10610de157610100808354040283529160200191610e0c565b820191906000526020600020905b815481529060010190602001808311610def57829003601f168201915b505050505081565b606060028054610558906127b6565b6001600160a01b038216331415610e7c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610650565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ef23383611418565b610f0e5760405162461bcd60e51b81526004016106509061257f565b610f1a84848484611a09565b50505050565b60128181548110610d7857600080fd5b6011805460609190610f429084612806565b81548110610f5257610f52612846565b906000526020600020018054610f67906127b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f93906127b6565b8015610fe05780601f10610fb557610100808354040283529160200191610fe0565b820191906000526020600020905b815481529060010190602001808311610fc357829003601f168201915b505050505090506000601054836010546002610ffc9190612715565b6040805160208101939093528201526060016040516020818303038152906040528051906020012060001c6110319190612806565b60105490915060009084611046826002612715565b611051906001612611565b6040805160208101939093528201526060016040516020818303038152906040528051906020012060001c6110869190612806565b90508261109283611890565b61109b83611890565b604051602001610a4a93929190612159565b6000818152600b602052604081205460609190819081906110cd90611a3c565b9194509250905060006110e0434261267c565b905060006110ed82610b2a565b905060006110fa82610817565b9050600061113061110a86611890565b61111388611890565b61111c8a611890565b856040516020016108699493929190612328565b905060008160405160200161114591906122e3565b60408051601f198184030181529190529a9950505050505050505050565b6000546001600160a01b0316331461118d5760405162461bcd60e51b81526004016106509061254a565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6007546000906001600160a01b03838116911614156111d057506001610543565b506001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6000546001600160a01b031633146112295760405162461bcd60e51b81526004016106509061254a565b600c819055600d805490600061123e836127eb565b919050555050565b6000546001600160a01b031633146112705760405162461bcd60e51b81526004016106509061254a565b6001600160a01b0381166112d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610650565b610ab0816119b9565b6000546001600160a01b031633146113085760405162461bcd60e51b81526004016106509061254a565b600a5460ff16156113575760405162461bcd60e51b81526020600482015260196024820152781158dbdb9391950e88135a5b9d195c881a5cc81b1bd8dad959603a1b6044820152606401610650565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113ae82610ab3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6040805160208082018352600c5482526000848152600b909152918220905190556114128383611a62565b50919050565b6000818152600360205260408120546001600160a01b03166114915760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610650565b600061149c83610ab3565b9050806001600160a01b0316846001600160a01b031614806114d75750836001600160a01b03166114cc846105db565b6001600160a01b0316145b806114e757506114e781856111af565b949350505050565b826001600160a01b031661150282610ab3565b6001600160a01b03161461156a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610650565b6001600160a01b0382166115cc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610650565b6115d7600082611379565b6001600160a01b0383166000908152600460205260408120805460019290611600908490612773565b90915550506001600160a01b038216600090815260046020526040812080546001929061162e908490612611565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60608151600014156116af57505060408051602081019091526000815290565b600060405180606001604052806040815260200161288960409139905060006003845160026116de9190612611565b6116e8919061267c565b6116f3906004612715565b90506000611702826020612611565b67ffffffffffffffff81111561171a5761171a61285c565b6040519080825280601f01601f191660200182016040528015611744576020820181803683370190505b509050818152600183018586518101602084015b818310156117b0576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101611758565b6003895106600181146117ca57600281146117db576117e7565b613d3d60f01b6001198301526117e7565b603d60f81b6000198301525b509398975050505050505050565b600061180082610ab3565b905061180d600083611379565b6001600160a01b0381166000908152600460205260408120805460019290611836908490612773565b909155505060008281526003602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6060816118b45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118de57806118c8816127eb565b91506118d79050600a8361267c565b91506118b8565b60008167ffffffffffffffff8111156118f9576118f961285c565b6040519080825280601f01601f191660200182016040528015611923576020820181803683370190505b509050815b85156119b057611939600182612773565b90506000611948600a8861267c565b61195390600a612715565b61195d9088612773565b611968906030612629565b905060008160f81b90508084848151811061198557611985612846565b60200101906001600160f81b031916908160001a9053506119a7600a8961267c565b97505050611928565b50949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a148484846114ef565b611a2084848484611ba4565b610f1a5760405162461bcd60e51b8152600401610650906124b7565b60008080611a55611a50620151808661267c565b611cb1565b9196909550909350915050565b6001600160a01b038216611ab85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610650565b6000818152600360205260409020546001600160a01b031615611b1d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610650565b6001600160a01b0382166000908152600460205260408120805460019290611b46908490612611565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15611ca657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611be8903390899088908890600401612467565b602060405180830381600087803b158015611c0257600080fd5b505af1925050508015611c32575060408051601f3d908101601f19168201909252611c2f91810190612047565b60015b611c8c573d808015611c60576040519150601f19603f3d011682016040523d82523d6000602084013e611c65565b606091505b508051611c845760405162461bcd60e51b8152600401610650906124b7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e7565b506001949350505050565b60008080838162253d8c611cc88362010bd96125d0565b611cd291906125d0565b9050600062023ab1611ce5836004612690565b611cef919061264e565b90506004611d008262023ab1612690565b611d0b9060036125d0565b611d15919061264e565b611d1f9083612734565b9150600062164b09611d328460016125d0565b611d3e90610fa0612690565b611d48919061264e565b90506004611d58826105b5612690565b611d62919061264e565b611d6c9084612734565b611d7790601f6125d0565b9250600061098f611d89856050612690565b611d93919061264e565b905060006050611da58361098f612690565b611daf919061264e565b611db99086612734565b9050611dc6600b8361264e565b9450611dd385600c612690565b611dde8360026125d0565b611de89190612734565b91508483611df7603187612734565b611e02906064612690565b611e0c91906125d0565b611e1691906125d0565b9a919950975095505050505050565b600067ffffffffffffffff80841115611e4057611e4061285c565b604051601f8501601f19908116603f01168101908282118183101715611e6857611e6861285c565b81604052809350858152868686011115611e8157600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611eb257600080fd5b919050565b600060208284031215611ec957600080fd5b611ed282611e9b565b9392505050565b60008060408385031215611eec57600080fd5b611ef583611e9b565b9150611f0360208401611e9b565b90509250929050565b600080600060608486031215611f2157600080fd5b611f2a84611e9b565b9250611f3860208501611e9b565b9150604084013590509250925092565b60008060008060808587031215611f5e57600080fd5b611f6785611e9b565b9350611f7560208601611e9b565b925060408501359150606085013567ffffffffffffffff811115611f9857600080fd5b8501601f81018713611fa957600080fd5b611fb887823560208401611e25565b91505092959194509250565b60008060408385031215611fd757600080fd5b611fe083611e9b565b915060208301358015158114611ff557600080fd5b809150509250929050565b6000806040838503121561201357600080fd5b61201c83611e9b565b946020939093013593505050565b60006020828403121561203c57600080fd5b8135611ed281612872565b60006020828403121561205957600080fd5b8151611ed281612872565b60006020828403121561207657600080fd5b813567ffffffffffffffff81111561208d57600080fd5b8201601f8101841361209e57600080fd5b6114e784823560208401611e25565b6000602082840312156120bf57600080fd5b5035919050565b600081518084526120de81602086016020860161278a565b601f01601f19169290920160200192915050565b6000815161210481856020860161278a565b9290920192915050565b6000825161212081846020870161278a565b9190910192915050565b6000835161213c81846020880161278a565b83519083019061215081836020880161278a565b01949350505050565b6000845161216b81846020890161278a565b8083019050600160fd1b808252855161218b816001850160208a0161278a565b6001920191820181905284516121a881600285016020890161278a565b600292019182015260030195945050505050565b600083516121ce81846020880161278a565b7f222066696c6c3d227472616e73706172656e7422207374726f6b653d22000000908301908152835161220881601d84016020880161278a565b6211179f60e91b601d9290910191820152602001949350505050565b6000825161223681846020870161278a565b651e17b9bb339f60d11b920191825250600601919050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081526f181817b9bb3391103432b4b3b43a1e9160811b60208201526000835161229f81603085016020880161278a565b6811103bb4b23a341e9160b91b60309184019182015283516122c881603984016020880161278a565b61111f60f11b60399290910191820152603b01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161231b81601d85016020870161278a565b91909101601d0192915050565b7f7b20226e616d65223a202245636f6e6f6d6963732044657369676e20426f6f6b81526201116160ed1b60208201527f226465736372697074696f6e223a202245636f6e6f6d69637320616e64204d6160238201527f7468206f6620546f6b656e20456e67696e656572696e6720616e6420446546696043820152601160f91b60638201527416101132bc3834b930ba34b7b72230ba32911d101160591b6064820152600085516123e0816079850160208a0161278a565b8083019050602f60f81b806079830152865161240381607a850160208b0161278a565b607a920191820152845161241e81607b84016020890161278a565b61245b61244c612446607b848601016c1116101134b6b0b3b2911d101160991b8152600d0190565b876120f2565b6222207d60e81b815260030190565b98975050505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061249a908301846120c6565b9695505050505050565b602081526000611ed260208301846120c6565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526021908201527f45636f6e4e46543a2053656e646572206973206e6f7420746865206d696e74656040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600080821280156001600160ff1b03849003851316156125f2576125f261281a565b600160ff1b839003841281161561260b5761260b61281a565b50500190565b600082198211156126245761262461281a565b500190565b600060ff821660ff84168060ff038211156126465761264661281a565b019392505050565b60008261265d5761265d612830565b600160ff1b8214600019841416156126775761267761281a565b500590565b60008261268b5761268b612830565b500490565b60006001600160ff1b03818413828413808216868404861116156126b6576126b661281a565b600160ff1b60008712828116878305891216156126d5576126d561281a565b600087129250878205871284841616156126f1576126f161281a565b878505871281841616156127075761270761281a565b505050929093029392505050565b600081600019048311821515161561272f5761272f61281a565b500290565b60008083128015600160ff1b8501841216156127525761275261281a565b6001600160ff1b038401831381161561276d5761276d61281a565b50500390565b6000828210156127855761278561281a565b500390565b60005b838110156127a557818101518382015260200161278d565b83811115610f1a5750506000910152565b600181811c908216806127ca57607f821691505b6020821081141561141257634e487b7160e01b600052602260045260246000fd5b60006000198214156127ff576127ff61281a565b5060010190565b60008261281557612815612830565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ab057600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208bb2aa8ec380e9baead276f29647f8f22cfcec27b10c791124d12f167413934164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c8063715018a61161013b578063c87b56dd116100b8578063f26e54f31161007c578063f26e54f3146104a2578063f2c5df9b146104b5578063f2fde38b146104be578063f838904f146104d1578063fca3b5aa146104e457600080fd5b8063c87b56dd14610440578063d3574ab914610453578063e76d89521461045c578063e985e9c51461046f578063f0503e801461048257600080fd5b806395d89b41116100ff57806395d89b41146103ec578063a22cb465146103f4578063b88d4fde14610407578063bd11f69d1461041a578063c68b49d11461042d57600080fd5b8063715018a6146103af57806376daebe1146103b75780638da5cb5b146103bf578063949d225d146103d0578063955968d4146103d957600080fd5b806330d871c6116101c957806348e896ab1161018d57806348e896ab14610364578063568a18441461036d5780636352211e146103765780636dcee4ca1461038957806370a082311461039c57600080fd5b806330d871c61461031057806333af5989146103235780633607cf3d1461033657806342842e0e1461033e57806342966c681461035157600080fd5b8063095ea7b311610210578063095ea7b3146102bd5780631249c58b146102d25780631399364d146102e85780631e688e10146102f057806323b872dd146102fd57600080fd5b806301ffc9a71461024257806306fdde031461026a578063075461721461027f578063081812fc146102aa575b600080fd5b61025561025036600461202a565b6104f7565b60405190151581526020015b60405180910390f35b610272610549565b60405161026191906124a4565b600854610292906001600160a01b031681565b6040516001600160a01b039091168152602001610261565b6102926102b83660046120ad565b6105db565b6102d06102cb366004612000565b610675565b005b6102da61078b565b604051908152602001610261565b600c546102da565b600a546102559060ff1681565b6102d061030b366004611f0c565b6107e6565b61027261031e366004612064565b610817565b6102726103313660046120ad565b6108ad565b600d546102da565b6102d061034c366004611f0c565b610a62565b6102d061035f3660046120ad565b610a7d565b6102da600f5481565b6102da600e5481565b6102926103843660046120ad565b610ab3565b6102726103973660046120ad565b610b2a565b6102da6103aa366004611eb7565b610c23565b6102d0610caa565b6102d0610ce0565b6000546001600160a01b0316610292565b6102da60105481565b6102726103e73660046120ad565b610d68565b610272610e14565b6102d0610402366004611fc4565b610e23565b6102d0610415366004611f48565b610ee8565b6102726104283660046120ad565b610f20565b61027261043b3660046120ad565b610f30565b61027261044e3660046120ad565b6110ad565b6102da600d5481565b6102d061046a366004611eb7565b611163565b61025561047d366004611ed9565b6111af565b6102da6104903660046120ad565b600b6020526000908152604090205481565b6102d06104b03660046120ad565b6111ff565b6102da600c5481565b6102d06104cc366004611eb7565b611246565b600754610292906001600160a01b031681565b6102d06104f2366004611eb7565b6112de565b60006001600160e01b031982166380ac58cd60e01b148061052857506001600160e01b03198216635b5e139f60e01b145b8061054357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060018054610558906127b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610584906127b6565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166106595760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061068082610ab3565b9050806001600160a01b0316836001600160a01b031614156106ee5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610650565b336001600160a01b038216148061070a575061070a81336111af565b61077c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610650565b6107868383611379565b505050565b6008546000906001600160a01b031633146107b85760405162461bcd60e51b815260040161065090612509565b600854600980546107e1926001600160a01b03169160006107d8836127eb565b919050556113e7565b905090565b6107f03382611418565b61080c5760405162461bcd60e51b81526004016106509061257f565b6107868383836114ef565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152509050600061087d84604051602001610869919061210e565b60405160208183030381529060405261168f565b90506000828260405160200161089492919061212a565b60408051601f1981840301815291905295945050505050565b60606000600f54836108bf9190612806565b6108ca906001612611565b9050604051806040016040528060098152602001681e3830ba3410321e9160b91b815250915060005b8181101561097f576000848260105461090c9190612611565b6040805160208101939093528201526060016040516020818303038152906040528051906020012060001c9050600061094482610f30565b9050848160405160200161095992919061212a565b604051602081830303815290604052945050508080610977906127eb565b9150506108f3565b5060128054600091906109929086612806565b815481106109a2576109a2612846565b9060005260206000200180546109b7906127b6565b80601f01602080910402602001604051908101604052809291908181526020018280546109e3906127b6565b8015610a305780601f10610a0557610100808354040283529160200191610a30565b820191906000526020600020905b815481529060010190602001808311610a1357829003601f168201915b505050505090508281604051602001610a4a9291906121bc565b60405160208183030381529060405292505050919050565b61078683838360405180602001604052806000815250610ee8565b6008546001600160a01b03163314610aa75760405162461bcd60e51b815260040161065090612509565b610ab0816117f5565b50565b6000818152600360205260408120546001600160a01b0316806105435760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610650565b60606000600e5483610b3c9190612806565b610b47906001612611565b9050610b54601054611890565b610b5f601054611890565b604051602001610b7092919061224e565b604051602081830303815290604052915060005b81811015610bfa57604080516020808201879052818301849052825180830384018152606090920190925280519101206000610bbf826108ad565b90508481604051602001610bd492919061212a565b604051602081830303815290604052945050508080610bf2906127eb565b915050610b84565b5081604051602001610c0c9190612224565b604051602081830303815290604052915050919050565b60006001600160a01b038216610c8e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610650565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b03163314610cd45760405162461bcd60e51b81526004016106509061254a565b610cde60006119b9565b565b6000546001600160a01b03163314610d0a5760405162461bcd60e51b81526004016106509061254a565b600a5460ff1615610d595760405162461bcd60e51b81526020600482015260196024820152781158dbdb9391950e88135a5b9d195c881a5cc81b1bd8dad959603a1b6044820152606401610650565b600a805460ff19166001179055565b60118181548110610d7857600080fd5b906000526020600020016000915090508054610d93906127b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbf906127b6565b8015610e0c5780601f10610de157610100808354040283529160200191610e0c565b820191906000526020600020905b815481529060010190602001808311610def57829003601f168201915b505050505081565b606060028054610558906127b6565b6001600160a01b038216331415610e7c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610650565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ef23383611418565b610f0e5760405162461bcd60e51b81526004016106509061257f565b610f1a84848484611a09565b50505050565b60128181548110610d7857600080fd5b6011805460609190610f429084612806565b81548110610f5257610f52612846565b906000526020600020018054610f67906127b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f93906127b6565b8015610fe05780601f10610fb557610100808354040283529160200191610fe0565b820191906000526020600020905b815481529060010190602001808311610fc357829003601f168201915b505050505090506000601054836010546002610ffc9190612715565b6040805160208101939093528201526060016040516020818303038152906040528051906020012060001c6110319190612806565b60105490915060009084611046826002612715565b611051906001612611565b6040805160208101939093528201526060016040516020818303038152906040528051906020012060001c6110869190612806565b90508261109283611890565b61109b83611890565b604051602001610a4a93929190612159565b6000818152600b602052604081205460609190819081906110cd90611a3c565b9194509250905060006110e0434261267c565b905060006110ed82610b2a565b905060006110fa82610817565b9050600061113061110a86611890565b61111388611890565b61111c8a611890565b856040516020016108699493929190612328565b905060008160405160200161114591906122e3565b60408051601f198184030181529190529a9950505050505050505050565b6000546001600160a01b0316331461118d5760405162461bcd60e51b81526004016106509061254a565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6007546000906001600160a01b03838116911614156111d057506001610543565b506001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6000546001600160a01b031633146112295760405162461bcd60e51b81526004016106509061254a565b600c819055600d805490600061123e836127eb565b919050555050565b6000546001600160a01b031633146112705760405162461bcd60e51b81526004016106509061254a565b6001600160a01b0381166112d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610650565b610ab0816119b9565b6000546001600160a01b031633146113085760405162461bcd60e51b81526004016106509061254a565b600a5460ff16156113575760405162461bcd60e51b81526020600482015260196024820152781158dbdb9391950e88135a5b9d195c881a5cc81b1bd8dad959603a1b6044820152606401610650565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113ae82610ab3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6040805160208082018352600c5482526000848152600b909152918220905190556114128383611a62565b50919050565b6000818152600360205260408120546001600160a01b03166114915760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610650565b600061149c83610ab3565b9050806001600160a01b0316846001600160a01b031614806114d75750836001600160a01b03166114cc846105db565b6001600160a01b0316145b806114e757506114e781856111af565b949350505050565b826001600160a01b031661150282610ab3565b6001600160a01b03161461156a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610650565b6001600160a01b0382166115cc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610650565b6115d7600082611379565b6001600160a01b0383166000908152600460205260408120805460019290611600908490612773565b90915550506001600160a01b038216600090815260046020526040812080546001929061162e908490612611565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60608151600014156116af57505060408051602081019091526000815290565b600060405180606001604052806040815260200161288960409139905060006003845160026116de9190612611565b6116e8919061267c565b6116f3906004612715565b90506000611702826020612611565b67ffffffffffffffff81111561171a5761171a61285c565b6040519080825280601f01601f191660200182016040528015611744576020820181803683370190505b509050818152600183018586518101602084015b818310156117b0576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101611758565b6003895106600181146117ca57600281146117db576117e7565b613d3d60f01b6001198301526117e7565b603d60f81b6000198301525b509398975050505050505050565b600061180082610ab3565b905061180d600083611379565b6001600160a01b0381166000908152600460205260408120805460019290611836908490612773565b909155505060008281526003602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6060816118b45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118de57806118c8816127eb565b91506118d79050600a8361267c565b91506118b8565b60008167ffffffffffffffff8111156118f9576118f961285c565b6040519080825280601f01601f191660200182016040528015611923576020820181803683370190505b509050815b85156119b057611939600182612773565b90506000611948600a8861267c565b61195390600a612715565b61195d9088612773565b611968906030612629565b905060008160f81b90508084848151811061198557611985612846565b60200101906001600160f81b031916908160001a9053506119a7600a8961267c565b97505050611928565b50949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a148484846114ef565b611a2084848484611ba4565b610f1a5760405162461bcd60e51b8152600401610650906124b7565b60008080611a55611a50620151808661267c565b611cb1565b9196909550909350915050565b6001600160a01b038216611ab85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610650565b6000818152600360205260409020546001600160a01b031615611b1d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610650565b6001600160a01b0382166000908152600460205260408120805460019290611b46908490612611565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15611ca657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611be8903390899088908890600401612467565b602060405180830381600087803b158015611c0257600080fd5b505af1925050508015611c32575060408051601f3d908101601f19168201909252611c2f91810190612047565b60015b611c8c573d808015611c60576040519150601f19603f3d011682016040523d82523d6000602084013e611c65565b606091505b508051611c845760405162461bcd60e51b8152600401610650906124b7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114e7565b506001949350505050565b60008080838162253d8c611cc88362010bd96125d0565b611cd291906125d0565b9050600062023ab1611ce5836004612690565b611cef919061264e565b90506004611d008262023ab1612690565b611d0b9060036125d0565b611d15919061264e565b611d1f9083612734565b9150600062164b09611d328460016125d0565b611d3e90610fa0612690565b611d48919061264e565b90506004611d58826105b5612690565b611d62919061264e565b611d6c9084612734565b611d7790601f6125d0565b9250600061098f611d89856050612690565b611d93919061264e565b905060006050611da58361098f612690565b611daf919061264e565b611db99086612734565b9050611dc6600b8361264e565b9450611dd385600c612690565b611dde8360026125d0565b611de89190612734565b91508483611df7603187612734565b611e02906064612690565b611e0c91906125d0565b611e1691906125d0565b9a919950975095505050505050565b600067ffffffffffffffff80841115611e4057611e4061285c565b604051601f8501601f19908116603f01168101908282118183101715611e6857611e6861285c565b81604052809350858152868686011115611e8157600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611eb257600080fd5b919050565b600060208284031215611ec957600080fd5b611ed282611e9b565b9392505050565b60008060408385031215611eec57600080fd5b611ef583611e9b565b9150611f0360208401611e9b565b90509250929050565b600080600060608486031215611f2157600080fd5b611f2a84611e9b565b9250611f3860208501611e9b565b9150604084013590509250925092565b60008060008060808587031215611f5e57600080fd5b611f6785611e9b565b9350611f7560208601611e9b565b925060408501359150606085013567ffffffffffffffff811115611f9857600080fd5b8501601f81018713611fa957600080fd5b611fb887823560208401611e25565b91505092959194509250565b60008060408385031215611fd757600080fd5b611fe083611e9b565b915060208301358015158114611ff557600080fd5b809150509250929050565b6000806040838503121561201357600080fd5b61201c83611e9b565b946020939093013593505050565b60006020828403121561203c57600080fd5b8135611ed281612872565b60006020828403121561205957600080fd5b8151611ed281612872565b60006020828403121561207657600080fd5b813567ffffffffffffffff81111561208d57600080fd5b8201601f8101841361209e57600080fd5b6114e784823560208401611e25565b6000602082840312156120bf57600080fd5b5035919050565b600081518084526120de81602086016020860161278a565b601f01601f19169290920160200192915050565b6000815161210481856020860161278a565b9290920192915050565b6000825161212081846020870161278a565b9190910192915050565b6000835161213c81846020880161278a565b83519083019061215081836020880161278a565b01949350505050565b6000845161216b81846020890161278a565b8083019050600160fd1b808252855161218b816001850160208a0161278a565b6001920191820181905284516121a881600285016020890161278a565b600292019182015260030195945050505050565b600083516121ce81846020880161278a565b7f222066696c6c3d227472616e73706172656e7422207374726f6b653d22000000908301908152835161220881601d84016020880161278a565b6211179f60e91b601d9290910191820152602001949350505050565b6000825161223681846020870161278a565b651e17b9bb339f60d11b920191825250600601919050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081526f181817b9bb3391103432b4b3b43a1e9160811b60208201526000835161229f81603085016020880161278a565b6811103bb4b23a341e9160b91b60309184019182015283516122c881603984016020880161278a565b61111f60f11b60399290910191820152603b01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161231b81601d85016020870161278a565b91909101601d0192915050565b7f7b20226e616d65223a202245636f6e6f6d6963732044657369676e20426f6f6b81526201116160ed1b60208201527f226465736372697074696f6e223a202245636f6e6f6d69637320616e64204d6160238201527f7468206f6620546f6b656e20456e67696e656572696e6720616e6420446546696043820152601160f91b60638201527416101132bc3834b930ba34b7b72230ba32911d101160591b6064820152600085516123e0816079850160208a0161278a565b8083019050602f60f81b806079830152865161240381607a850160208b0161278a565b607a920191820152845161241e81607b84016020890161278a565b61245b61244c612446607b848601016c1116101134b6b0b3b2911d101160991b8152600d0190565b876120f2565b6222207d60e81b815260030190565b98975050505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061249a908301846120c6565b9695505050505050565b602081526000611ed260208301846120c6565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526021908201527f45636f6e4e46543a2053656e646572206973206e6f7420746865206d696e74656040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600080821280156001600160ff1b03849003851316156125f2576125f261281a565b600160ff1b839003841281161561260b5761260b61281a565b50500190565b600082198211156126245761262461281a565b500190565b600060ff821660ff84168060ff038211156126465761264661281a565b019392505050565b60008261265d5761265d612830565b600160ff1b8214600019841416156126775761267761281a565b500590565b60008261268b5761268b612830565b500490565b60006001600160ff1b03818413828413808216868404861116156126b6576126b661281a565b600160ff1b60008712828116878305891216156126d5576126d561281a565b600087129250878205871284841616156126f1576126f161281a565b878505871281841616156127075761270761281a565b505050929093029392505050565b600081600019048311821515161561272f5761272f61281a565b500290565b60008083128015600160ff1b8501841216156127525761275261281a565b6001600160ff1b038401831381161561276d5761276d61281a565b50500390565b6000828210156127855761278561281a565b500390565b60005b838110156127a557818101518382015260200161278d565b83811115610f1a5750506000910152565b600181811c908216806127ca57607f821691505b6020821081141561141257634e487b7160e01b600052602260045260246000fd5b60006000198214156127ff576127ff61281a565b5060010190565b60008261281557612815612830565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ab057600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212208bb2aa8ec380e9baead276f29647f8f22cfcec27b10c791124d12f167413934164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "econNFTId": "the id of the NFT you want to burn."
        }
      },
      "constructor": {
        "details": "Variables used to make the JPEG are set in order to construct an SVG later on. ",
        "params": {
          "_expirationTimestamp": "the date where the EconNFT will expire (timestamp in seconds).",
          "_totalSupply": "maximum number of NFT that is going to be minted."
        }
      },
      "generatePath(uint256)": {
        "details": "Function called by the `generateSVG()` function.",
        "params": {
          "_randomNumber": "is a random number from the `generatePath()` function."
        },
        "returns": {
          "pathSvg": "a string containing all SVG instructions."
        }
      },
      "generatePathCommand(uint256)": {
        "details": "Called by the `generatePath()` function.",
        "params": {
          "_randomNumber": "is a random number from the `generatePath()` function."
        },
        "returns": {
          "pathCommand": "a string containing the paths to create the SVG."
        }
      },
      "generateSVG(uint256)": {
        "details": "The random number is used to print random lines and random colors on the final SVG.",
        "params": {
          "_randomNumber": "is a random number used to construct the SVG (the more random the better)."
        },
        "returns": {
          "finalSvg": "the full SVG component readable by a browser."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint()": {
        "details": "Create a new NFT and send it to the minter.",
        "returns": {
          "_0": "Return the id of the minted NFT."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setCurrentExpirationTimestamp(uint256)": {
        "params": {
          "_newExpirationTimestamp": "the new timestamp."
        }
      },
      "setMinter(address)": {
        "params": {
          "_minter": "The new minter address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "svgToImageURI(string)": {
        "params": {
          "_svg": "is the SVG component."
        },
        "returns": {
          "_0": "imageURI a string readable by the browser which will display the SVG."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the id of the token you would like to read information from."
        },
        "returns": {
          "_0": "data a 64 based encoded string containing a json object with all the informations."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Economics Design Property Right NFT.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Call the ERC721 `_burn()` function which burn an NFT and sends it to the address(0)."
      },
      "generatePath(uint256)": {
        "notice": "Generate different paths that creates the SVG lines."
      },
      "generatePathCommand(uint256)": {
        "notice": "Generate the paths to create the SVG."
      },
      "generateSVG(uint256)": {
        "notice": "Generate a full SVG component."
      },
      "getCurrentExpirationTimestamp()": {
        "notice": "Used mainly for the auction house."
      },
      "getNumberOfPeriodPassed()": {
        "notice": "Used mainly for the auction house."
      },
      "lockMinter()": {
        "notice": "Lock the minter from calling certain functions."
      },
      "mint()": {
        "notice": "Mint a new NFT."
      },
      "setCurrentExpirationTimestamp(uint256)": {
        "notice": "Change the expiration timestamp of the future NFTs about to get minted."
      },
      "setMinter(address)": {
        "notice": "Change the minter address."
      },
      "svgToImageURI(string)": {
        "notice": "Takes a SVG and encode it while still keeping it readable by a browser."
      },
      "tokenURI(uint256)": {
        "notice": "Contain all the informations needed for read this NFT informations."
      }
    },
    "notice": "Contract used to verify the ownership of the Economics Design book property rights.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2352,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2354,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2358,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2362,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2366,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2372,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2374,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "econAuctionHouse",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5530,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "minter",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5532,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "_currentEconNFTId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5534,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "isMinterLocked",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 5539,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "seeds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Seed)5528_storage)"
      },
      {
        "astId": 5541,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "currentExpirationTimestamp",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5543,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "numberOfPeriodPassed",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5555,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "maxNumberOfPath",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5557,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "maxNumberOfPathCommands",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5559,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "size",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5562,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "pathCommands",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5565,
        "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
        "label": "colors",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)5528_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EconNFTERC721.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)5528_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Seed)5528_storage": {
        "encoding": "inplace",
        "label": "struct EconNFTERC721.Seed",
        "members": [
          {
            "astId": 5527,
            "contract": "contracts/EconNFTERC721.sol:EconNFTERC721",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}